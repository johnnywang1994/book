import{_ as t,c as e,b as s,a as p,d as o,o as c,r as l}from"./app-SzYbZUl3.js";const i={};function u(r,n){const a=l("SocialBlock");return c(),e("div",null,[n[0]||(n[0]=s("h1",{id:"babel-7-decorator-的神奇小問題",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#babel-7-decorator-的神奇小問題"},[s("span",null,"Babel 7 Decorator 的神奇小問題")])],-1)),p(a,{hashtags:"javascript,typescript,babel,decorator"}),n[1]||(n[1]=o(`<p>Hi 各位朋友們大家好，我是 Johnny，最近在調整優化我的開源套件<a href="https://www.npmjs.com/package/script-custom-module" target="_blank" rel="noopener noreferrer">script-custom-module</a>時踩到了一個很神奇的 Decorator 小坑，覺得有必要把這記錄下來。</p><h2 id="背景故事" tabindex="-1"><a class="header-anchor" href="#背景故事"><span>背景故事</span></a></h2><p>整個事件背景是：我在幫我的開源工具添加 Typescript loader 後，順便測試使用 Property Decorator 時，發現無論我怎麼在 Decorator 中使用 <code>defineProperty</code> 對 target 進行調整，最後都會作用到 prototype 中而不是我的 instance，參考如下範例</p><h3 id="相關配置" tabindex="-1"><a class="header-anchor" href="#相關配置"><span>相關配置</span></a></h3><ul><li>@babel/standalone: <code>v7.17.11</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>availablePresets<span class="token punctuation">.</span>typescript<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">[</span>availablePlugins<span class="token punctuation">[</span><span class="token string">&#39;proposal-decorators&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&#39;legacy&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    availablePlugins<span class="token punctuation">[</span><span class="token string">&#39;proposal-class-properties&#39;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="property-decorator-範例" tabindex="-1"><a class="header-anchor" href="#property-decorator-範例"><span>Property Decorator 範例</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 首先定義一個 decorator</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">logDec</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propName<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> target<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propName<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;gocha&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      value <span class="token operator">=</span> newVal<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 套用到目標類上</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token decorator"><span class="token at operator">@</span><span class="token function">logDec</span></span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在線上-ts-playground-中編譯的結果" tabindex="-1"><a class="header-anchor" href="#在線上-ts-playground-中編譯的結果"><span>在線上 TS Playground 中編譯的結果</span></a></h3><ul><li><a href="https://www.typescriptlang.org/pt/play" target="_blank" rel="noopener noreferrer">TS Playground</a></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> __decorate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__decorate<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> __metadata <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__metadata<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">logDec</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> propName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> value <span class="token operator">=</span> target<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propName<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;gocha&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            value <span class="token operator">=</span> newVal<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    logDec<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">__metadata</span><span class="token punctuation">(</span><span class="token string">&quot;design:type&quot;</span><span class="token punctuation">,</span> String<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> johnny <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;johnny&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>johnny<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在-babel-v7-編譯後" tabindex="-1"><a class="header-anchor" href="#在-babel-v7-編譯後"><span>在 Babel v7 編譯後</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> _class<span class="token punctuation">,</span> _descriptor<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">_initializerDefineProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>descriptor<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> descriptor<span class="token punctuation">.</span>enumerable<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">configurable</span><span class="token operator">:</span> descriptor<span class="token punctuation">.</span>configurable<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">writable</span><span class="token operator">:</span> descriptor<span class="token punctuation">.</span>writable<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">value</span><span class="token operator">:</span> descriptor<span class="token punctuation">.</span>initializer <span class="token operator">?</span> descriptor<span class="token punctuation">.</span><span class="token function">initializer</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">_defineProperty</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">_applyDecoratedDescriptor</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> decorators<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> desc <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    desc<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> descriptor<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  desc<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>desc<span class="token punctuation">.</span>enumerable<span class="token punctuation">;</span></span>
<span class="line">  desc<span class="token punctuation">.</span>configurable <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>desc<span class="token punctuation">.</span>configurable<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span> <span class="token keyword">in</span> desc <span class="token operator">||</span> desc<span class="token punctuation">.</span>initializer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    desc<span class="token punctuation">.</span>writable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 這邊會判斷 decorator 回傳的 descriptor，若有回傳則使用回傳的，若沒有則取到目前為止的，預設是由 babel 提供</span></span>
<span class="line">  desc <span class="token operator">=</span> decorators<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">desc<span class="token punctuation">,</span> decorator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">decorator</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> desc<span class="token punctuation">)</span> <span class="token operator">||</span> desc<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">&amp;&amp;</span> desc<span class="token punctuation">.</span>initializer <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    desc<span class="token punctuation">.</span>value <span class="token operator">=</span> desc<span class="token punctuation">.</span>initializer <span class="token operator">?</span> desc<span class="token punctuation">.</span><span class="token function">initializer</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    desc<span class="token punctuation">.</span>initializer <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>desc<span class="token punctuation">.</span>initializer <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    desc <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> desc<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">_initializerWarningHelper</span><span class="token punctuation">(</span><span class="token parameter">descriptor<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Decorating class property failed. Please ensure that &#39;</span> <span class="token operator">+</span> <span class="token string">&#39;proposal-class-properties is enabled and runs after the decorators transform.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">logDec</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> propName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> target<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propName<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token parameter">newVal</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;gocha&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      value <span class="token operator">=</span> newVal<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> User <span class="token operator">=</span> <span class="token punctuation">(</span>_class <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 這邊被 Babel 包了一層 _initializerDefineProperty</span></span>
<span class="line">    <span class="token comment">// _descriptor 由 _applyDecoratedDescriptor 的 reduce 處理後獲得</span></span>
<span class="line">    <span class="token function">_initializerDefineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> _descriptor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> _descriptor <span class="token operator">=</span> <span class="token function">_applyDecoratedDescriptor</span><span class="token punctuation">(</span><span class="token class-name">_class</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>logDec<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">initializer</span><span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _class<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> johnny <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;johnny&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>johnny<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在一般 ts 本地編譯環境似乎這麼寫沒有問題，而 Babel v7 以後，似乎 Babel 對 class constructor 內部的一些 property 進行了改寫重組，導致原本 Decorator 的 getter/setter 無法正確被調用</p><p>我們在觀察 <code>_initializerDefineProperty</code>, <code>_applyDecoratedDescriptor</code> 的實現後發現，如果在我們的 decorator 函數中沒有返回任何 <code>descriptor</code>，那 Babel 就會自動協助產生一個 descriptor 來構建對應的 property，而我們的 decorator 將只作用在 prototype 上</p><p>以這個情況而言，就必須明確將我們的 <code>descriptor</code> 從 decorator 中返回，如此 Babel 在編譯時就會以我們返回的 <code>descriptor</code> 來進行構建，修改後如下</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 返回一個 descriptor</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">logDec</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propName<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> target<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> descriptor <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;gocha&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      value <span class="token operator">=</span> newVal<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token decorator"><span class="token at operator">@</span><span class="token function">logDec</span></span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="結論" tabindex="-1"><a class="header-anchor" href="#結論"><span>結論</span></a></h2><p>只能說 <code>decorator</code> 這概念目前在 Javascript 中的實現還沒有一個定論，導致 Babel, Typescript 的一些實現不太一致，大家在使用的時候要多多注意環境，避免像我這樣無意間掉進這種可怕的無解陷阱當中，找了好久才找到一個相關的<a href="https://github.com/lit/lit-element/issues/234#issuecomment-425739431" target="_blank" rel="noopener noreferrer">討論串</a></p><p>今天的分享就到這了，感謝大家收看，掰掰~</p>`,20)),p(a,{hashtags:"javascript,typescript,babel,decorator"})])}const d=t(i,[["render",u],["__file","babel7-decorator-issue.html.vue"]]),v=JSON.parse('{"path":"/articles/js/babel7-decorator-issue.html","title":"Babel 7 Decorator 的神奇小問題","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"背景故事","slug":"背景故事","link":"#背景故事","children":[{"level":3,"title":"相關配置","slug":"相關配置","link":"#相關配置","children":[]},{"level":3,"title":"Property Decorator 範例","slug":"property-decorator-範例","link":"#property-decorator-範例","children":[]},{"level":3,"title":"在線上 TS Playground 中編譯的結果","slug":"在線上-ts-playground-中編譯的結果","link":"#在線上-ts-playground-中編譯的結果","children":[]},{"level":3,"title":"在 Babel v7 編譯後","slug":"在-babel-v7-編譯後","link":"#在-babel-v7-編譯後","children":[]}]},{"level":2,"title":"結論","slug":"結論","link":"#結論","children":[]}],"git":{"updatedTime":1652106567000,"contributors":[{"name":"johnnywang","username":"johnnywang","email":"johnny29621189@kimo.com","commits":3,"url":"https://github.com/johnnywang"}]},"filePathRelative":"articles/js/babel7-decorator-issue.md"}');export{d as comp,v as data};
