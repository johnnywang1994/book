import{_ as t,r as o,o as e,c,a,d as n,e as p,f as l}from"./app-da643460.js";const i={},r=n("h1",{id:"compound-pattern",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#compound-pattern","aria-hidden":"true"},"#"),p(" Compound Pattern")],-1),u=l(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>大家好，我是 Johnny，今天要紀錄分享的是 Patterns 筆記系列的 <code>Compound Pattern</code></p><h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹" aria-hidden="true">#</a> 介紹</h2><p><code>Compound Pattern</code> 是透過組合多個組件、元件來完成一個整體功能，常常在 select, dropdown, menu 等功能看到這個 pattern 的應用，底下以一個 React Dropdown 功能當作範例</p><h2 id="react-dropdown" tabindex="-1"><a class="header-anchor" href="#react-dropdown" aria-hidden="true">#</a> React Dropdown</h2><p>使用 <code>useContext</code> 來製作跨組件之間的局部狀態共享，把狀態封裝在局部組件當中，相關組件拿取共同的狀態，但組件邏輯又可獨立進行編寫</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> DropdownContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Dropdown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>open<span class="token punctuation">,</span> toggle<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>DropdownContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> open<span class="token punctuation">,</span> toggle <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>DropdownContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Toggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> open<span class="token punctuation">,</span> toggle <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>DropdownContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token operator">!</span>open<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Content</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> open <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>DropdownContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> open <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Dropdown<span class="token punctuation">.</span>Toggle <span class="token operator">=</span> Toggle<span class="token punctuation">;</span>
Dropdown<span class="token punctuation">.</span>Content <span class="token operator">=</span> Content<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Dropdown<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上我們構建一個 Compound 的 Dropdown，並可快速調用該功能相關聯的組件，不僅使用方便，且功能狀態完全封裝在 Compound 組件中了，不會污染到使用的組件環境</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      Hello
      <span class="token operator">&lt;</span>Dropdown<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Dropdown<span class="token punctuation">.</span>Toggle<span class="token operator">&gt;</span>
          toggle
        <span class="token operator">&lt;</span><span class="token operator">/</span>Dropdown<span class="token punctuation">.</span>Toggle<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Dropdown<span class="token punctuation">.</span>Content<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>item <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>item <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Dropdown<span class="token punctuation">.</span>Content<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Dropdown<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="評價-compound-components" tabindex="-1"><a class="header-anchor" href="#評價-compound-components" aria-hidden="true">#</a> 評價 Compound Components</h2><p>這麽寫的好處是</p><ul><li>功能只需要 import 一個組件，相關的組件已經全部包含在內</li><li>不需要另外維護許多功能相關狀態</li></ul><h2 id="react-children-map" tabindex="-1"><a class="header-anchor" href="#react-children-map" aria-hidden="true">#</a> React.Children.map</h2><p>另一個實現方式是透過 <code>React.Children.map</code> 結合 <code>cloneElement</code>，將我們的功能狀態透過改寫 children 的 props 完成</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Dropdown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>open<span class="token punctuation">,</span> toggle<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> <span class="token parameter">child</span> <span class="token operator">=&gt;</span>
        React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token punctuation">{</span> open<span class="token punctuation">,</span> toggle <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Toggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> open<span class="token punctuation">,</span> toggle<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token operator">!</span>open<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Content</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> open<span class="token punctuation">,</span> toggle<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> open <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Dropdown<span class="token punctuation">.</span>Toggle <span class="token operator">=</span> Toggle<span class="token punctuation">;</span>
Dropdown<span class="token punctuation">.</span>Content <span class="token operator">=</span> Content<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Dropdown<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>寫法上雖然避免掉了使用 <code>useContext</code> 以及 <code>Provider</code>，變得更為精簡，但也有一個缺點，因為是直接傳遞 props 給 children，狀態只會傳遞到 <code>Dropdown</code> 組件內的第一層，如下用法就會出現問題，並且 props 是 shallow merge，如果出現名稱衝突將會被覆蓋導致問題</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      Hello
      <span class="token operator">&lt;</span>Dropdown<span class="token operator">&gt;</span>
        <span class="token punctuation">{</span><span class="token comment">/* This breaks */</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span>Dropdown<span class="token punctuation">.</span>Toggle<span class="token operator">&gt;</span>
            toggle
          <span class="token operator">&lt;</span><span class="token operator">/</span>Dropdown<span class="token punctuation">.</span>Toggle<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span>Dropdown<span class="token punctuation">.</span>Content<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>item <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>item <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>Dropdown<span class="token punctuation">.</span>Content<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Dropdown<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),d=n("h2",{id:"結論",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#結論","aria-hidden":"true"},"#"),p(" 結論")],-1),k=n("p",null,"總結 Compound Pattern 有下列優點",-1),v=n("ul",null,[n("li",null,"功能狀態的隔離封裝"),n("li",null,"功能組件的完整性，同一功能的相關組件可以明確定位劃分"),n("li",null,"使用方便，減少重複撰寫類似功能的邏輯 缺點如下"),n("li",null,"狀態、邏輯被封裝，無法快速看出具體組件內做了什麼")],-1),m=n("p",null,"綜合評斷下來，Compound Pattern 適用在目標明確、單一的功能上，避免將過多不相關的邏輯狀態全部放在一個 Compound 中，使用上就較不容易造成功能模糊不清、開發者難以理解的狀況",-1),b=n("p",null,"感謝收看，下一篇見拉～",-1);function g(h,w){const s=o("SocialBlock");return e(),c("div",null,[r,a(s,{hashtags:"design,pattern,compound"}),u,a(s,{hashtags:"design,pattern,compound"}),d,k,v,m,b])}const C=t(i,[["render",g],["__file","compound.html.vue"]]);export{C as default};
