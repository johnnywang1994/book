import{_ as p,r as o,o as c,c as u,d as n,e as s,a as t,f as e}from"./app.3c6c98db.js";const i={},l=n("h1",{id:"parse-user-object-\u7AE0\u7BC0",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#parse-user-object-\u7AE0\u7BC0","aria-hidden":"true"},"#"),s(" Parse User Object \u7AE0\u7BC0")],-1),r={href:"https://docs.parseplatform.org/js/guide/#users",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="property" tabindex="-1"><a class="header-anchor" href="#property" aria-hidden="true">#</a> Property</h2><ul><li>username(required).</li><li>password(required on signup).</li><li>email(optional).</li></ul><h2 id="sign-up" tabindex="-1"><a class="header-anchor" href="#sign-up" aria-hidden="true">#</a> Sign up</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my pass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;email@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// other fields can be set just like with Parse.Object</span>
user<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;415-392-0202&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> user<span class="token punctuation">.</span><span class="token function">signUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="login" tabindex="-1"><a class="header-anchor" href="#login" aria-hidden="true">#</a> Login</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> Parse<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">logIn</span><span class="token punctuation">(</span><span class="token string">&quot;myname&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mypass&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">usePost</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Do stuff after successful login.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="current-user" tabindex="-1"><a class="header-anchor" href="#current-user" aria-hidden="true">#</a> Current User</h3>`,7),d={href:"https://docs.parseplatform.org/js/guide/#current-user",target:"_blank",rel:"noopener noreferrer"},v=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> currentUser <span class="token operator">=</span> Parse<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do stuff with the user</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// show the signup or login page</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set-current-user" tabindex="-1"><a class="header-anchor" href="#set-current-user" aria-hidden="true">#</a> Set Current User</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Parse<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">become</span><span class="token punctuation">(</span><span class="token string">&quot;session-token-here&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// The current user is now set to user.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logout" tabindex="-1"><a class="header-anchor" href="#logout" aria-hidden="true">#</a> Logout</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Parse<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">logOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> currentUser <span class="token operator">=</span> Parse<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// this will now be null</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="security-for-other-objects" tabindex="-1"><a class="header-anchor" href="#security-for-other-objects" aria-hidden="true">#</a> Security For Other Objects</h3><p>\u5C0D\u7269\u4EF6\u6DFB\u52A0\u5B89\u5168\u6027\u6AA2\u8996\u689D\u4EF6\uFF0C\u4E0B\u9762\u7BC4\u4F8B\u5C0D\u65B0\u7684 note \u6DFB\u52A0\u65B0\u5275\u5EFA\u9650\u5236\u70BA current user \u7684 ACL</p><ul><li><code>Parse.ACL</code>: access control list</li><li>setReadAccess(targetObject, boolean)</li><li>setWriteAccess(targetObject, boolean)</li><li>setPublicReadAccess(boolean)</li><li>setPublicWriteAccess(boolean)</li></ul><h4 id="\u7BC4\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u7BC4\u4F8B" aria-hidden="true">#</a> \u7BC4\u4F8B</h4><ul><li>\u76F4\u63A5\u5957\u7528</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Note <span class="token operator">=</span> Parse<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string">&quot;Note&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> privateNote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
privateNote<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;This note is private!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
privateNote<span class="token punctuation">.</span><span class="token function">setACL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>ACL</span><span class="token punctuation">(</span>Parse<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
privateNote<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u7D30\u90E8\u6DFB\u52A0\u5C0D\u8C61\u7269\u4EF6</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> groupMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> groupACL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>ACL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// userList is an array with the users we are sending this message to.</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> userList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  groupACL<span class="token punctuation">.</span><span class="token function">setReadAccess</span><span class="token punctuation">(</span>userList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  groupACL<span class="token punctuation">.</span><span class="token function">setWriteAccess</span><span class="token punctuation">(</span>userList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
groupMessage<span class="token punctuation">.</span><span class="token function">setACL</span><span class="token punctuation">(</span>groupACL<span class="token punctuation">)</span><span class="token punctuation">;</span>
groupMessage<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u8907\u96DC\u5834\u666F(\u65B0\u589E post\uFF0C\u9650\u5236\u6B0A\u9650\u5728\u7576\u524D\u7528\u6236\uFF0C\u4E26\u958B\u653E read \u6B0A\u9650\u516C\u958B)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> publicPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> postACL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>ACL</span><span class="token punctuation">(</span>Parse<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
postACL<span class="token punctuation">.</span><span class="token function">setPublicReadAccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
publicPost<span class="token punctuation">.</span><span class="token function">setACL</span><span class="token punctuation">(</span>postACL<span class="token punctuation">)</span><span class="token punctuation">;</span>
publicPost<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="linking-user" tabindex="-1"><a class="header-anchor" href="#linking-user" aria-hidden="true">#</a> Linking User</h3><p>Parse \u53EF\u4F7F\u7528\u7B2C\u4E09\u65B9\u9A57\u8B49\u9032\u884C\u8A3B\u518A\u7528\u6236\u6216\u767B\u5165\uFF0C\u4F7F\u7528 <code>linkWith</code> \u65B9\u6CD5\u9032\u884C\u7D81\u5B9A\u3001\u767B\u5165\uFF08\u82E5\u7B2C\u4E00\u6B21\u547C\u53EB\u6703\u81EA\u52D5 create user\uFF0C\u4E26\u8FD4\u56DE userInfo\uFF09</p>`,17),m={href:"https://docs.parseplatform.org/js/guide/#signing-up-and-logging-in",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> myAuthData <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;12345678&#39;</span>  <span class="token comment">// Required field. Used to uniquely identify the linked account.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> user<span class="token punctuation">.</span><span class="token function">linkWith</span><span class="token punctuation">(</span><span class="token string">&#39;providerName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">authData</span><span class="token operator">:</span> myAuthData <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),b={href:"https://docs.parseplatform.org/js/guide/#custom-authentication-module",target:"_blank",rel:"noopener noreferrer"},g=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> CustomAuth <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./CustomAuth&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParseServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">myAuth</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">module</span><span class="token operator">:</span> CustomAuth<span class="token punctuation">,</span>
      <span class="token literal-property property">option1</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">option2</span><span class="token operator">:</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/parse&#39;</span><span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="query-\u9032\u884C-select-authdata-\u7684\u554F\u984C" tabindex="-1"><a class="header-anchor" href="#query-\u9032\u884C-select-authdata-\u7684\u554F\u984C" aria-hidden="true">#</a> query \u9032\u884C select authData \u7684\u554F\u984C</h4>`,2),f=n("code",null,"select",-1),y=n("code",null,"authData",-1),_=n("code",null,"query.select('authData')",-1),w={href:"https://github.com/parse-community/parse-server/pull/2081/files",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"_auth_data_xxxx",-1),q=n("code",null,"_auth_data_facebook",-1);function x(A,P){const a=o("ExternalLinkIcon");return c(),u("div",null,[l,n("ul",null,[n("li",null,[n("a",r,[s("Link"),t(a)])])]),k,n("ul",null,[n("li",null,[n("a",d,[s("Link"),t(a)])])]),v,n("ul",null,[n("li",null,[n("a",m,[s("Link"),t(a)])])]),h,n("p",null,[s("\u6216\u662F\u53EF\u4EE5\u5728 Parse Server \u7684 options \u63D0\u4F9B\u5BA2\u88FD\u5316\u7684 user login module\uFF0C\u8A73\u60C5\u8ACB"),n("a",b,[s("\u53C3\u8003\u9019\u908A"),t(a)])]),g,n("p",null,[s("\u53E6\u5916\u9700\u6CE8\u610F\uFF0C\u5982\u679C\u8981\u4F7F\u7528 "),f,s(" \u53D6\u5F97 "),y,s(" \u7684\u8A71\uFF0C\u4E0D\u80FD\u76F4\u63A5 "),_,s("\uFF0C\u56E0\u70BA DB \u88E1\u4E0D\u662F\u5B58\u9019\u500B\u6B04\u4F4D\u540D\u7A31\uFF0C\u9700\u4F7F\u7528"),n("a",w,[s("\u9019\u88E1\u63CF\u8FF0"),t(a)]),s("\u7684 "),j,s("\u624D\u80FD\u62FF\u5230\uFF0C\u6BD4\u5982 "),q])])}const C=p(i,[["render",x],["__file","user.html.vue"]]);export{C as default};
