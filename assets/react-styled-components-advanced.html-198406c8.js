import{_ as o,r as p,o as l,c,d as n,e as s,a as e,f as t}from"./app-b03d09bb.js";const i={},r=n("h1",{id:"react-styled-components-進階篇",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#react-styled-components-進階篇","aria-hidden":"true"},"#"),s(" React Styled-Components 進階篇")],-1),u=n("p",null,"本篇是學習 Styled-Components 時閱讀官網的一些筆記跟心得記錄，接續前一篇",-1),d={href:"https://styled-components.com/docs/api",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"theme",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#theme","aria-hidden":"true"},"#"),s(" Theme")],-1),v={href:"https://styled-components.com/docs/advanced#theming",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>使用 <code>ThemeProvider</code> 透過 context 傳遞 theme props 在組件內</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Define our button, but with the use of props.theme this time</span>
<span class="token keyword">const</span> Button <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  /* Color the border and text with theme.main */
  color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token parameter">props</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>main<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;
  border: 2px solid </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token parameter">props</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>theme<span class="token punctuation">.</span>main<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">// We are passing a default theme for Buttons that arent wrapped in the ThemeProvider</span>
Button<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&quot;palevioletred&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Define what props.theme will look like</span>
<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&quot;mediumseagreen&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Button<span class="token operator">&gt;</span>Normal<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>ThemeProvider theme<span class="token operator">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Button<span class="token operator">&gt;</span>Themed<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeProvider<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="override-with-theme-prop" tabindex="-1"><a class="header-anchor" href="#override-with-theme-prop" aria-hidden="true">#</a> Override with theme prop</h3><p>或是你也可以透過 <code>theme</code> 屬性覆蓋預設的主題樣式設定</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Button theme<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&quot;royalblue&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Ad hoc theme<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ThemeProvider theme<span class="token operator">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Button<span class="token operator">&gt;</span>Themed<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Button theme<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">&quot;darkorange&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Overridden<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeProvider<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="style-優先級" tabindex="-1"><a class="header-anchor" href="#style-優先級" aria-hidden="true">#</a> Style 優先級</h2><p>如果將全局類與樣式化的組件類一起應用，結果可能不是您所期望的。如果在兩個類中都定義了相同屬性，<code>styled-components</code> 將獲勝，這是因為樣式組件默認情況下會在 runtime 時在 <code>&lt;head&gt;</code> 末尾處注入其樣式。因此，會優先於其他單一的 class selector</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// MyComponent.js</span>
<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">background-color: green;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">// my-component.css</span>
<span class="token punctuation">.</span>red<span class="token operator">-</span>bg <span class="token punctuation">{</span>
  background<span class="token operator">-</span>color<span class="token operator">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// For some reason this component still has a green background,</span>
<span class="token comment">// even though you&#39;re trying to override it with the &quot;red-bg&quot; class!</span>
<span class="token operator">&lt;</span>MyComponent className<span class="token operator">=</span><span class="token string">&quot;red-bg&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一種解決方法是將 class selector 重複撰寫提升優先度</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* my-component.css */</span>
<span class="token selector">.red-bg.red-bg</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="refer-to-other-component" tabindex="-1"><a class="header-anchor" href="#refer-to-other-component" aria-hidden="true">#</a> Refer to other component</h2><p>可以將 styled-components 的組件相互依賴使用如下</p>`,12),b={href:"https://styled-components.com/docs/advanced#caveat",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Link <span class="token operator">=</span> styled<span class="token punctuation">.</span>a<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  display: flex;
  align-items: center;
  padding: 5px 10px;
  background: papayawhip;
  color: palevioletred;
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Icon <span class="token operator">=</span> styled<span class="token punctuation">.</span>svg<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  flex: none;
  transition: fill 0.25s;
  width: 48px;
  height: 48px;

  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Link<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:hover &amp; {
    fill: rebeccapurple;
  }
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="server-rendering-with-nextjs" tabindex="-1"><a class="header-anchor" href="#server-rendering-with-nextjs" aria-hidden="true">#</a> Server Rendering with Nextjs</h2>`,2),g={href:"https://styled-components.com/docs/tooling#serverside-rendering",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,".babelrc",-1),x=n("code",null,"next.config.js",-1),f=n("p",null,[s("首先我們需要安裝 "),n("code",null,"babel-plugin-styled-components"),s(" 幫我們處理 server 端的編譯")],-1),_=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`$ npm install --save-dev babel-plugin-styled-components
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),w=n("code",null,"next.config.js",-1),j={href:"https://nextjs.org/docs/advanced-features/compiler#styled-components",target:"_blank",rel:"noopener noreferrer"},S=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;next&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>NextConfig<span class="token punctuation">}</span></span> */</span>
<span class="token keyword">const</span> nextConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">reactStrictMode</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">compiler</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ssr and displayName are configured by default</span>
    <span class="token literal-property property">styledComponents</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> nextConfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),C={href:"https://github.com/vercel/next.js/tree/canary/examples/with-styled-components-babel",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"_document.tsx",-1),B=t(`<div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// _document.tsx</span>
<span class="token keyword">import</span> Document<span class="token punctuation">,</span> <span class="token punctuation">{</span> DocumentContext<span class="token punctuation">,</span> DocumentInitialProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/document&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ServerStyleSheet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;styled-components&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyDocument</span> <span class="token keyword">extends</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getInitialProps</span><span class="token punctuation">(</span>
    ctx<span class="token operator">:</span> DocumentContext
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>DocumentInitialProps<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sheet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerStyleSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> originalRenderPage <span class="token operator">=</span> ctx<span class="token punctuation">.</span>renderPage

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      ctx<span class="token punctuation">.</span><span class="token function-variable function">renderPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token function">originalRenderPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token function-variable function">enhanceApp</span><span class="token operator">:</span> <span class="token punctuation">(</span>App<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            sheet<span class="token punctuation">.</span><span class="token function">collectStyles</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token keyword">const</span> initialProps <span class="token operator">=</span> <span class="token keyword">await</span> Document<span class="token punctuation">.</span><span class="token function">getInitialProps</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>initialProps<span class="token punctuation">,</span>
        styles<span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token punctuation">{</span>initialProps<span class="token punctuation">.</span>styles<span class="token punctuation">}</span><span class="token plain-text">
            </span><span class="token punctuation">{</span>sheet<span class="token punctuation">.</span><span class="token function">getStyleElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      sheet<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大功告成，接著就可以快樂的在 Next 中使用 Styled-Components 摟～</p><blockquote><p>那為何我們會需要這麼麻煩處理這些呢？可以參考官網說明如下：<code>By adding a unique identifier to every styled component, this plugin avoids checksum mismatches due to different class generation on the client and on the server. If you do not use this plugin and try to server-side render styled-components React will complain with an HTML attribute mismatch warning during rehydration.</code>，另一方面因為 Styled-Components 原本是動態在 Client Side 產生 stylesheet 並插入 head 套用，但在 Server 端渲染時沒有辦法插入到我們的 Document String 當中，也因此會跳出 Render not match 的 Error，所以我們在 <code>_document.tsx</code> 當中預先提取 <code>&lt;App /&gt;</code> 底下的 stylesheets 並插入到 Props 當中，讓 Nextjs 把 styled-components 的樣式設定一併處理就可以瞜</p></blockquote>`,3);function q(N,D){const a=p("ExternalLinkIcon");return l(),c("div",null,[r,u,n("ul",null,[n("li",null,[n("a",d,[s("API 參考"),e(a)])])]),k,n("ul",null,[n("li",null,[n("a",v,[s("說明"),e(a)])])]),m,n("blockquote",null,[n("p",null,[s("注意!這種寫法只適用在 styled-components，一般 React.Component 不是一個 Styled Component，可"),n("a",b,[s("參考這邊"),e(a)])])]),h,n("p",null,[s("SSR 部分其實可以在不同框架下使用，詳細基本教學可以"),n("a",g,[s("參考官網"),e(a)]),s("，這邊以 Nextjs 為範例，因為 "),y,s(" 的部分 Nextjs 有先做好基本設定，我們只需要在 "),x,s(" 中添加設定即可")]),f,_,n("p",null,[s("接著修改 "),w,s("，可參考 "),n("a",j,[s("Next官方說明"),e(a)])]),S,n("p",null,[s("最後參考 "),n("a",C,[s("Styled-Components Nextjs範例"),e(a)]),s(" 添加 Custom "),P,s(" 加入如下：")]),B])}const I=o(i,[["render",q],["__file","react-styled-components-advanced.html.vue"]]);export{I as default};
