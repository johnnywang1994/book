import{_ as s,c as a,d as e,o as l}from"./app-mRs5tNIG.js";const p={};function i(t,n){return l(),a("div",null,n[0]||(n[0]=[e(`<h1 id="graphql-學習筆記-基礎篇" tabindex="-1"><a class="header-anchor" href="#graphql-學習筆記-基礎篇"><span>GraphQL 學習筆記 - 基礎篇</span></a></h1><h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹"><span>介紹</span></a></h2><p>GraphQL 是一種為 API 設計的資料查詢(修改)的語言，使得 client 端可以使用更直覺且彈性的語法來取得或修改資料。 Facebook 為了因應跨裝置及開發 News Feed 功能而開發</p><h3 id="輪廓" tabindex="-1"><a class="header-anchor" href="#輪廓"><span>輪廓</span></a></h3><p>流程由上到下</p><ul><li>Schema: Server 端撰寫的一個規範</li><li>Query: Client 端根據 Schema 規範撰寫的 query 請求</li><li>Server Response: Server 根據 query 請求返回給 Client 端資料</li></ul><h4 id="schema" tabindex="-1"><a class="header-anchor" href="#schema"><span>Schema</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">type Query <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">hello</span><span class="token operator">:</span> String<span class="token operator">!</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="query" tabindex="-1"><a class="header-anchor" href="#query"><span>Query</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">query <span class="token punctuation">{</span></span>
<span class="line">  hello</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="server-response" tabindex="-1"><a class="header-anchor" href="#server-response"><span>Server Response</span></a></h4><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;hello&quot;</span><span class="token operator">:</span> <span class="token string">&quot;world&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="優點" tabindex="-1"><a class="header-anchor" href="#優點"><span>優點</span></a></h3><ul><li>精準資料取得</li><li>程式即文檔</li><li>前端控制權提升</li><li>強型別</li></ul><h3 id="缺點" tabindex="-1"><a class="header-anchor" href="#缺點"><span>缺點</span></a></h3><ul><li>過於自由、規範少</li><li>學習成本</li><li>Server Side Caching 實作複雜</li></ul><h2 id="生態圈" tabindex="-1"><a class="header-anchor" href="#生態圈"><span>生態圈</span></a></h2><p>GraphQL 生態圈非常大，基本上你能想到的語言都支援，這邊主要以 <code>Javascript</code> 來說明，可以參考<a href="https://graphql.org/code/#javascript" target="_blank" rel="noopener noreferrer">官網 Javascript 清單</a>，除了原生的以外，最著名的大概就是 <code>Apollo Server/Client</code>，主要是內部時做了很多知名 Nodejs Framework 的相容層，讓開發者能夠更快將 GraphQL 與原來熟悉的技術做結合使用</p><ul><li><a href="https://www.apollographql.com/docs/apollo-server/" target="_blank" rel="noopener noreferrer">Apollo Server</a></li><li><a href="https://www.apollographql.com/docs/react/" target="_blank" rel="noopener noreferrer">Apollo Client</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10202144" target="_blank" rel="noopener noreferrer">其他生態系統介紹</a></li></ul><h2 id="基礎-query" tabindex="-1"><a class="header-anchor" href="#基礎-query"><span>基礎 Query</span></a></h2><p><img src="https://i.imgur.com/jz0e8ea.png" alt=""></p><h3 id="object-vs-scalar" tabindex="-1"><a class="header-anchor" href="#object-vs-scalar"><span>Object vs Scalar</span></a></h3><p>在使用 query 時需要注意，type 分為 <code>Object Type</code>, <code>Scalar Type</code>，前者在 query 取得時必須展開，後者則不需要，例如下面範例中 <code>User</code> 就是一個 <code>Object Type</code>，而 <code>String</code> 則是 <code>Scalar Type</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">type User <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token constant">ID</span><span class="token operator">!</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> String</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token string">&quot;Query 是最上層的&quot;</span></span>
<span class="line">type Query <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">hello</span><span class="token operator">:</span> String</span>
<span class="line">  <span class="token literal-property property">me</span><span class="token operator">:</span> User</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在進行 query 時，必須要把 <code>Object Type</code> 明確展開</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">query <span class="token punctuation">{</span></span>
<span class="line">  hello</span>
<span class="line">  me <span class="token punctuation">{</span></span>
<span class="line">    id</span>
<span class="line">    name</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>query 進行時，實際上是使用 HTTP <code>Post</code> method 把 query 請求轉為 header 字串送到 Server，Server 收到後會解析成 <code>AST</code> 格式，並且驗證欄位，只有 <code>解析</code>, <code>驗證</code> 都通過後才會正式進行 <code>執行</code></p><h2 id="apollo-server-基礎" tabindex="-1"><a class="header-anchor" href="#apollo-server-基礎"><span>Apollo Server 基礎</span></a></h2><p>以下是 Apollo Server 最基本的建立方式，若想看看一個基礎 <a href="https://github.com/jwlearn1994/graphql-blog-demo" target="_blank" rel="noopener noreferrer">GraphQL Blog 範例</a>，可以點連結參考看看</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ApolloServer<span class="token punctuation">,</span> gql <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;apollo-server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. GraphQL Schema 定義</span></span>
<span class="line"><span class="token keyword">const</span> typeDefs <span class="token operator">=</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">  type Query {</span>
<span class="line">    &quot;A simple type for getting started!&quot;</span>
<span class="line">    hello: String</span>
<span class="line">  }</span>
<span class="line"></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. Resolvers 是一個會對照 Schema 中 field 的 function map ，讓你可以計算並回傳資料給 GraphQL Server</span></span>
<span class="line"><span class="token keyword">const</span> resolvers <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">Query</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 需注意名稱一定要對到 Schema 中 field 的名稱</span></span>
<span class="line">    <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;world&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 初始化 Web Server ，需傳入 typeDefs (Schema) 與 resolvers (Resolver)</span></span>
<span class="line"><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Schema 部分</span></span>
<span class="line">  typeDefs<span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// Resolver 部分</span></span>
<span class="line">  resolvers</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. 啟動 Server</span></span>
<span class="line">server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> url <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">? Server ready at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ul><li><a href="https://ithelp.ithome.com.tw/articles/10202596" target="_blank" rel="noopener noreferrer">2019 IT 邦幫忙 - Think in GraphQL</a></li></ul>`,33)]))}const c=s(p,[["render",i],["__file","basic.html.vue"]]),o=JSON.parse('{"path":"/articles/memo/graphql/basic.html","title":"GraphQL 學習筆記 - 基礎篇","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"介紹","slug":"介紹","link":"#介紹","children":[{"level":3,"title":"輪廓","slug":"輪廓","link":"#輪廓","children":[]},{"level":3,"title":"優點","slug":"優點","link":"#優點","children":[]},{"level":3,"title":"缺點","slug":"缺點","link":"#缺點","children":[]}]},{"level":2,"title":"生態圈","slug":"生態圈","link":"#生態圈","children":[]},{"level":2,"title":"基礎 Query","slug":"基礎-query","link":"#基礎-query","children":[{"level":3,"title":"Object vs Scalar","slug":"object-vs-scalar","link":"#object-vs-scalar","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]},{"level":2,"title":"Apollo Server 基礎","slug":"apollo-server-基礎","link":"#apollo-server-基礎","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1655636083000,"contributors":[{"name":"JohnnyWang","email":"johnnywang@test.com","commits":1}]},"filePathRelative":"articles/memo/graphql/basic.md"}');export{c as comp,o as data};
