import{_ as e,c as t,b as s,a as p,d as o,r as c,o as l}from"./app-DxoW7puS.js";const i={};function u(r,n){const a=c("SocialBlock");return l(),t("div",null,[n[0]||(n[0]=s("h1",{id:"rxjs-學習筆記",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#rxjs-學習筆記"},[s("span",null,"Rxjs 學習筆記")])],-1)),p(a,{hashtags:"javascript,rxjs"}),n[1]||(n[1]=o(`<p>本篇紀錄學習 Rxjs 的相關筆記內容，供日後複習使用，主要以基礎知識開始。</p><h2 id="什麼是-rxjs" tabindex="-1"><a class="header-anchor" href="#什麼是-rxjs"><span>什麼是 Rxjs</span></a></h2><p>Rxjs 就像是處理 event 的 lodash，提供使用者對於非同步或同步事件的操作處理。傳統上 javascript 為 pull 系統，也就是 function 回傳給使用者值，被動取值，function 並不知道何時使用者需要。而 promise 就是一種 push 系統，我們事先註冊一個回調動作，在 promise 完成後，會自動將值傳回並處理回調的內容，而 Observable 的概念也是 push 系統，但是其為 lazy 的調用，不像 promise 會在創建後立即執行，Observable 創建後並不會做任何動作，當使用者訂閱的同時，才會去進行處理取值。</p><p>主要為分為幾個單元：</p><ol><li>Observable</li></ol><p>為一可調用的事件邏輯集合，定義之後可以使用 subscribe 進行訂閱</p><ol start="2"><li>Observer</li></ol><p>裝載回調的容器，定義三種包括 next, error, complete 等回調，可在 subscribe 時傳入，提供 Observable 調用。</p><ol start="3"><li>Operator</li></ol><p>純函數，方便讓使用者以函數式編程進行事件邏輯的處理，包括 <code>map</code>,<code>filter</code>,<code>concat</code>,<code>reduce</code>,<code>first</code>,<code>last</code> 等等。</p><ol start="4"><li>Subscription</li></ol><p>subscribe 後回傳的執行，主要用於取消 Observable 之執行</p><h2 id="observable" tabindex="-1"><a class="header-anchor" href="#observable"><span>Observable</span></a></h2><p>建立 Observable 的方式主要有兩種，第一種是直接 new 一個，第二種是使用 <code>create operator</code> 如 <code>of</code>,<code>from</code>,<code>interval</code> 等等進行創建。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> observable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">subscriber</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>調用 Observable，使用 subscribe，其中接受一組 observer 包含回調事件。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;got value &#39;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;something wrong occurred: &#39;</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>當在 observable 中調用 <code>error</code> 或 <code>complete</code> 回調後，其後的所有動作都將不再被執行：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> observable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">subscriber</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  subscriber<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 這裡不會被執行</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="operator" tabindex="-1"><a class="header-anchor" href="#operator"><span>Operator</span></a></h2><p>operator 就是一個函數，因為有的需要傳入動作，有些不用，所以總是以調用的方式進行串接，主要分為 <code>Pipeable</code> 及 <code>Creation</code> 兩種：</p><ul><li>Pipeable：<code>map</code>, <code>filter</code> 等等，主要接收一個 Observable 並進行處理後回傳新的，因此操作後不影響原來的Observable，且對新的 Observable 訂閱一樣效果。</li><li>Creation: <code>of</code>, <code>from</code>, <code>interval</code> 等等，用以快速創建一個新的 Observable。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">of</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs/operators&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但當需要串接多個 operator 時，就會很容易變成這樣，可讀性非常的差。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">op4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">op3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">op2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">op1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也因此一般不會如上面那樣使用，我們用使用 <code>pipe</code> 這個 operator進行串接如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">obs<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function">op1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">op2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">op3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">op3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pipe" tabindex="-1"><a class="header-anchor" href="#pipe"><span>pipe</span></a></h3><p>官方推薦必用如下：</p><blockquote><p>As a stylistic matter, op()(obs) is never used, even if there is only one operator; obs.pipe(op()) is universally preferred</p></blockquote><h3 id="higher-order-observables" tabindex="-1"><a class="header-anchor" href="#higher-order-observables"><span>Higher-order Observables</span></a></h3><p>高階 Observable 是 Observable 中又有 Observable，此時會需要做 flattening 的動作將其回歸正常的狀態，常見的 <code>flattening operators</code> 包含：<code>concatAll</code>,<code>mergeAll</code>,<code>switchAll</code>,<code>exhaust</code></p><p>由於 Operator 種類非常之多，官方提供了一個目錄清單查詢使用 <a href="https://rxjs-dev.firebaseapp.com/guide/operators" target="_blank" rel="noopener noreferrer">清單在這</a></p><h2 id="subscription" tabindex="-1"><a class="header-anchor" href="#subscription"><span>Subscription</span></a></h2><p>是一個一次性資源物件，最主要具有 <code>unsubscribe</code> 這個方法，進行資源的清除動作。並且可以使用 <code>add</code> 方法，將多個 subscriptions 合併後一起進行移除</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> subscription <span class="token operator">=</span> observable1<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;first: &#39;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> childSubscription <span class="token operator">=</span> observable2<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;second: &#39;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">subscription<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>childSubscription<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Unsubscribes BOTH subscription and childSubscription</span></span>
<span class="line">  subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36)),p(a,{hashtags:"javascript,rxjs"})])}const k=e(i,[["render",u]]),b=JSON.parse('{"path":"/articles/memo/js/rxjs-basic.html","title":"Rxjs 學習筆記","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1748788505000,"contributors":[{"name":"Johnny Wang","username":"","email":"wangj@garena.com","commits":1},{"name":"johnnywang1994","username":"johnnywang1994","email":"johnny29621189@kimo.com","commits":2,"url":"https://github.com/johnnywang1994"},{"name":"johnnywang","username":"johnnywang","email":"johnny29621189@kimo.com","commits":1,"url":"https://github.com/johnnywang"},{"name":"Lindy Liao","username":"","email":"meiliao1207@gmail.com","commits":1}],"changelog":[{"hash":"f01bfa128b4d33fbeddb8abb1697b5391b273d28","time":1748788505000,"email":"meiliao1207@gmail.com","author":"Lindy Liao","message":"UPD"},{"hash":"f93d96fcdc391e63c4dd78deb53e0bb15506213c","time":1649601399000,"email":"johnny29621189@kimo.com","author":"johnnywang","message":"UPD: add vuetify-learn"},{"hash":"71ccb7693345c8ddc2f554e00f8a0ce73af2b783","time":1648521821000,"email":"johnny29621189@kimo.com","author":"johnnywang1994","message":"UPD: upgrade to v2"},{"hash":"da1521dcf805739a83e5efa4e52581013a51dcad","time":1638541816000,"email":"johnny29621189@kimo.com","author":"johnnywang1994","message":"UPD: update sociallinks"},{"hash":"51e618d93d4f837fbce25a1e1f0a9783cbc46b6a","time":1624012650000,"email":"wangj@garena.com","author":"Johnny Wang","message":"INIT"}]},"filePathRelative":"articles/memo/js/rxjs-basic.md"}');export{k as comp,b as data};
