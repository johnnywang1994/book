import{_ as p,r as o,o as l,c,d as n,e as s,a as e,f as t}from"./app-6147e6e2.js";const i={},r=n("h1",{id:"apollo-client-學習使用筆記",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#apollo-client-學習使用筆記","aria-hidden":"true"},"#"),s(" Apollo Client 學習使用筆記")],-1),u=n("p",null,"本篇是學習基礎 Apollo Client 時的部分筆記，同樣僅記錄特定我覺得很重要的部分，會根據我實際使用狀況持續增補內容，不會把所有基礎內容都紀錄在這",-1),d={href:"https://www.apollographql.com/docs/react/",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"fetch-policy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fetch-policy","aria-hidden":"true"},"#"),s(" Fetch Policy")],-1),v={href:"https://www.apollographql.com/docs/react/data/queries/#supported-fetch-policies",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"cache-first",-1),h=n("code",null,"nextFetchPolicy",-1),b=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token constant">GET_DOGS</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">fetchPolicy</span><span class="token operator">:</span> <span class="token string">&#39;network-only&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Used for first execution</span>
  <span class="token literal-property property">nextFetchPolicy</span><span class="token operator">:</span> <span class="token string">&#39;cache-first&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Used for subsequent executions</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),g={href:"https://www.apollographql.com/docs/react/data/queries#nextfetchpolicy",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"update-local-data",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#update-local-data","aria-hidden":"true"},"#"),s(" Update Local Data")],-1),f={href:"https://www.apollographql.com/docs/react/data/mutations#updating-local-data",target:"_blank",rel:"noopener noreferrer"},_=t(`<h3 id="refetching-query" tabindex="-1"><a class="header-anchor" href="#refetching-query" aria-hidden="true">#</a> refetching query</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Refetches two queries after mutation completes</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>addTodo<span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token constant">ADD_TODO</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">refetchQueries</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token constant">GET_POST</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// DocumentNode object parsed with gql</span>
    <span class="token string">&#39;GetComments&#39;</span> <span class="token comment">// Query name</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="updating-cache-directly" tabindex="-1"><a class="header-anchor" href="#updating-cache-directly" aria-hidden="true">#</a> updating cache directly</h3><p>include the result from mutation response, <code>cache</code> object includes <code>readQuery/writeQuery</code>, <code>readFragment/writeFragment</code>, <code>modify</code>, and <code>evict</code> method</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>addTodo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token constant">ADD_TODO</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">cache<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> addTodo <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">fields</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">todos</span><span class="token punctuation">(</span><span class="token parameter">existingTodos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> newTodoRef <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">writeFragment</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> addTodo<span class="token punctuation">,</span>
            <span class="token literal-property property">fragment</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
              fragment NewTodo on Todo {
                id
                type
              }
            </span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>existingTodos<span class="token punctuation">,</span> newTodoRef<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fragments" tabindex="-1"><a class="header-anchor" href="#fragments" aria-hidden="true">#</a> Fragments</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fragment NameParts on Person <span class="token punctuation">{</span>
  title
  firstName
  middleName
  lastName
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inline-fragments-with-unions-interfaces" tabindex="-1"><a class="header-anchor" href="#inline-fragments-with-unions-interfaces" aria-hidden="true">#</a> inline fragments with Unions Interfaces</h3><p>相關筆記已記錄在 <code>graphql/advance</code> 內</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>query AllCharacters <span class="token punctuation">{</span>
  all_characters <span class="token punctuation">{</span>

    <span class="token operator">...</span> on Character <span class="token punctuation">{</span>
      name
    <span class="token punctuation">}</span>

    <span class="token operator">...</span> on Jedi <span class="token punctuation">{</span>
      side
    <span class="token punctuation">}</span>

    <span class="token operator">...</span> on Droid <span class="token punctuation">{</span>
      model
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="possibletypes" tabindex="-1"><a class="header-anchor" href="#possibletypes" aria-hidden="true">#</a> possibleTypes</h3>`,11),w={href:"https://www.apollographql.com/docs/react/data/fragments#defining-possibletypes-manually",target:"_blank",rel:"noopener noreferrer"},q=n("li",null,[n("p",null,"手動定義")],-1),x=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">possibleTypes</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Character</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Jedi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Droid&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Test</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;PassingTest&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;FailingTest&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SkippedTest&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Snake</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Viper&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),j={href:"https://www.apollographql.com/docs/react/data/fragments#generating-possibletypes-automatically",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"graphql-query-best-practices",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#graphql-query-best-practices","aria-hidden":"true"},"#"),s(" GraphQL query best practices")],-1),C={href:"https://www.apollographql.com/docs/react/data/operation-best-practices",target:"_blank",rel:"noopener noreferrer"},Q=n("li",null,[n("p",null,"Name all operations: 命名所有 query, mutation 操作")],-1),F=n("li",null,[n("p",null,[s("Provide variable as arguments: 提供變數作為參數，推薦使用 "),n("code",null,"$input"),s(" 包裹所有參數")])],-1),I={href:"https://www.apollographql.com/docs/intro/benefits/#graphql-provides-declarative-efficient-data-fetching",target:"_blank",rel:"noopener noreferrer"},L=n("li",null,[n("p",null,"Use fragments: 使用 fragments 封裝相似欄位字段，但避免過度濫用")],-1),D=n("li",null,[n("p",null,"Query separately: 分開 query 全域資料及 user 相關資料，讓 GraphQL 能有效進行獨立 cache 作業，提升效能（千萬別在同一個 query 裡拿一堆不同 type 的東西）")],-1),P=n("li",null,[n("p",null,[s("Add "),n("code",null,"name"),s(", "),n("code",null,"version"),s(" in client: 在 ApolloClient 初始化時提供 name, version 提升偵錯的效率")])],-1),A=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">uri</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:4000/graphql&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;MarketingSite&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&#39;1.2&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cache" tabindex="-1"><a class="header-anchor" href="#cache" aria-hidden="true">#</a> Cache</h2>`,2),N={href:"https://www.apollographql.com/docs/react/caching/overview",target:"_blank",rel:"noopener noreferrer"},G=n("h3",{id:"typepolicies",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#typepolicies","aria-hidden":"true"},"#"),s(" typePolicies")],-1),S={href:"https://www.apollographql.com/docs/react/caching/cache-configuration#customizing-cache-ids",target:"_blank",rel:"noopener noreferrer"},V=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> makeVar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@apollo/client&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> doneVar <span class="token operator">=</span> makeVar<span class="token operator">&lt;</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">typePolicies</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Product</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// In an inventory management system, products might be identified</span>
      <span class="token comment">// by their UPC.</span>
      <span class="token literal-property property">keyFields</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;upc&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Todo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// custom behavior by field name</span>
      <span class="token comment">// eg. 可以用客製化的 cache 機制製作 client only 的欄位，並在 query 時標註獲取</span>
      <span class="token literal-property property">fields</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">isDone</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token function">read</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> <span class="token punctuation">{</span> readField <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> objectId <span class="token operator">=</span> <span class="token function">readField</span><span class="token punctuation">(</span><span class="token string">&#39;objectId&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> string<span class="token punctuation">;</span>
            <span class="token keyword">const</span> doneList <span class="token operator">=</span> <span class="token function">doneVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> doneList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>objectId<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M={href:"https://www.apollographql.com/docs/react/local-state/managing-state-with-field-policies/",target:"_blank",rel:"noopener noreferrer"},R=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> todoItem <span class="token operator">=</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  fragment TodoItem on Todo {
    objectId
    title
    content
    isDone @client
  }
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="read-write-interaction" tabindex="-1"><a class="header-anchor" href="#read-write-interaction" aria-hidden="true">#</a> Read/Write Interaction</h3>`,2),O={href:"https://www.apollographql.com/docs/react/caching/cache-interaction",target:"_blank",rel:"noopener noreferrer"},U=t(`<h4 id="read-all-caches" tabindex="-1"><a class="header-anchor" href="#read-all-caches" aria-hidden="true">#</a> Read All Caches</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useApolloClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@apollo/client&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">useApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> serializedState <span class="token operator">=</span> client<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>serializedState<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="read-write-query-cache" tabindex="-1"><a class="header-anchor" href="#read-write-query-cache" aria-hidden="true">#</a> Read/Write Query Cache</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Fetch the cached to-do item with ID 5</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> todo <span class="token punctuation">}</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">readQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">query</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    query ReadTodo($id: ID!) {
      todo(id: $id) {
        id
        text
        completed
      }
    }
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">variables</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// Provide any required variables here.  Variables of mismatched types will return \`null\`.</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">writeQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">query</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    query WriteTodo($id: Int!) {
      todo(id: $id) {
        id
        text
        completed
      }
    }</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">,</span>
  <span class="token literal-property property">variables</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span>
  <span class="token punctuation">}</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// Contains the data to write</span>
    <span class="token literal-property property">todo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">__typename</span><span class="token operator">:</span> <span class="token string">&#39;Todo&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
      <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;Buy grapes 🍇&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),E=n("code",null,"不要直接修改返回的對象",-1),$={href:"https://www.apollographql.com/docs/react/caching/cache-interaction#combining-reads-and-writes",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>當使用 <code>writeQuery</code> 時，注意以下提示：</p><ul><li>任何使用 <code>writeQuery</code> 對 cache 資料的改動不會同步到 GraphQL server，重新整理後就會消失</li><li>query 的 shape 不需要跟 GraphQL server 的 schema 相同，可以包含不在 schema 中的欄位</li></ul><h4 id="read-write-fragments" tabindex="-1"><a class="header-anchor" href="#read-write-fragments" aria-hidden="true">#</a> Read/Write Fragments</h4><ul><li>id: <code>&lt;__typename&gt;:&lt;id&gt;</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> todo <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">readFragment</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;Todo:5&#39;</span><span class="token punctuation">,</span> <span class="token comment">// The value of the to-do item&#39;s cache ID</span>
  <span class="token literal-property property">fragment</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    fragment MyTodo on Todo {
      id
      text
      completed
    }
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">writeFragment</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;Todo:5&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fragment</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    fragment MyTodo on Todo {
      completed
    }
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="update-query-cache" tabindex="-1"><a class="header-anchor" href="#update-query-cache" aria-hidden="true">#</a> Update Query Cache</h4>`,6),W={href:"https://www.apollographql.com/docs/react/caching/cache-interaction#using-updatequery-and-updatefragment",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"updateQuery",-1),J=n("code",null,"updateFragment",-1),H=n("code",null,"read/write",-1),K=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> query <span class="token operator">=</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  query MyTodoAppQuery {
    todos {
      id
      text
      completed
    }
  }
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">// Set all todos in the cache as completed</span>
cache<span class="token punctuation">.</span><span class="token function">updateQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span> query <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">todos</span><span class="token operator">:</span> data<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>todo<span class="token punctuation">,</span> <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function X(Y,Z){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,u,n("ul",null,[n("li",null,[n("a",d,[s("Apollo Client"),e(a)])])]),k,n("ul",null,[n("li",null,[n("a",v,[s("Supported fetch policies"),e(a)]),s(" 預設 Query 使用的 cache 政策是 "),m,s("，當請求時會先檢查本地 cache，如果存在則直接返回，而不進行 network request，也可以使用 "),h,s(" 設定第二次後請求的 cache 政策，如下範例總是在第一次時實際進行 network request，並在之後以 cache 返回為主")])]),b,n("p",null,[s("詳細使用可參考"),n("a",g,[s("nextFetchPolicy"),e(a)])]),y,n("ul",null,[n("li",null,[n("a",f,[s("Link"),e(a)])])]),_,n("ul",null,[n("li",null,[n("p",null,[n("a",w,[s("Link"),e(a)])])]),q]),x,n("ul",null,[n("li",null,[n("a",j,[s("自動產生"),e(a)])])]),T,n("ul",null,[n("li",null,[n("p",null,[n("a",C,[s("Link"),e(a)])])]),Q,F,n("li",null,[n("p",null,[s("Get data only when/where you need: 只拿你需要用到的資料，發揮 GraphQL 優勢-"),n("a",I,[s("declarative data fetching"),e(a)])])]),L,D,P]),A,n("ul",null,[n("li",null,[n("a",N,[s("Link"),e(a)])])]),G,n("ul",null,[n("li",null,[n("a",S,[s("Custom Cache id"),e(a)])])]),V,n("ul",null,[n("li",null,[s("query 獲取 client only 欄位，詳情可參考 "),n("a",M,[s("Local Only Field"),e(a)])])]),R,n("ul",null,[n("li",null,[n("a",O,[s("Link"),e(a)])])]),U,n("blockquote",null,[n("p",null,[s("Apollo Client 會自動 queries 每個物件的 __typename, 即使你沒有提供在 query 請求中，切記 "),E,s("，如果有需要更新 cache，請參考"),n("a",$,[s("Combining reads and writes"),e(a)])])]),B,n("ul",null,[n("li",null,[n("a",W,[s("Link"),e(a)]),s(" use "),z,s(", "),J,s(" to combine usage with "),H])]),K])}const sn=p(i,[["render",X],["__file","apollo-client.html.vue"]]);export{sn as default};
