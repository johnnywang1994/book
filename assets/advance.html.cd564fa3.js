import{_ as s,r as e,o as t,c as p,b as n,a as c,e as o,d as l}from"./app.14625945.js";const i={},r=o(`<h1 id="graphql-\u5B78\u7FD2\u7B46\u8A18-\u9032\u968E\u7BC7" tabindex="-1"><a class="header-anchor" href="#graphql-\u5B78\u7FD2\u7B46\u8A18-\u9032\u968E\u7BC7" aria-hidden="true">#</a> GraphQL \u5B78\u7FD2\u7B46\u8A18 - \u9032\u968E\u7BC7</h1><h2 id="custom-scalar" tabindex="-1"><a class="header-anchor" href="#custom-scalar" aria-hidden="true">#</a> Custom Scalar</h2><p>\u7576\u61C9\u7528\u7A0B\u5F0F\u8D8A\u4F86\u8D8A\u8907\u96DC\u5F8C\uFF0C\u9810\u8A2D GraphQL \u63D0\u4F9B\u7684 Scalar Type <code>Int</code>, <code>Float</code>, <code>String</code>, <code>Boolean</code>, <code>ID</code> \u6703\u6F38\u6F38\u7121\u6CD5\u771F\u5BE6\u6AA2\u9A57\u8CC7\u6599\u985E\u578B\uFF0C\u6709\u8DDF\u6C92\u6709\u4E00\u6A23\uFF0C\u6B64\u6642\u53EF\u4EE5\u900F\u904E\u5BA2\u88FD\u5316 GraphQL \u7684 scalar \u4F86\u589E\u5F37\u9019\u529F\u80FD\uFF0C\u7576\u7136\u4E5F\u80FD\u5B89\u88DD\u5176\u4ED6\u5DE5\u5177\u5957\u4EF6\u5E6B\u5FD9\u5594\uFF5E</p><h3 id="date-\u5BE6\u4F5C\u7BC4\u4F8B" tabindex="-1"><a class="header-anchor" href="#date-\u5BE6\u4F5C\u7BC4\u4F8B" aria-hidden="true">#</a> Date \u5BE6\u4F5C\u7BC4\u4F8B</h3><ul><li><code>name</code> (Required) Scalar Type \u540D\u7A31 (\u9700\u5C0D\u4E0A schema \u5B9A\u7FA9\u6642\u7684\u540D\u7A31)</li><li><code>description</code> (Optional) Scalar Type \u4ECB\u7D39</li><li><code>serialize(value)</code> (Required) Server \u56DE\u8986\u7D66 Client \u7684\u503C\u3002 <blockquote><p>\u7576 Server \u5728 Resolver \u8655\u7406\u5B8C\u8CC7\u6599\u8F38\u51FA\u6642\uFF0C\u6703\u5C07\u7D50\u679C\u4EE5 <code>value</code> \u50B3\u9032\u4F86\uFF0C\u800C serialize \u6C7A\u5B9A\u6700\u5F8C\u8F38\u51FA\u7684\u503C\u3002\u9700\u6CE8\u610F\uFF01\u9019\u908A\u8F38\u51FA\u7684\u503C\u7684\u578B\u5225\u53EA\u8981\u662F JSON \u683C\u5F0F\u5141\u8A31\u7684\u503C\u90FD\u884C\uFF0C\u5982 Int, String, Object, Array \u7B49\u7B49\u3002</p></blockquote></li><li><code>parseValue(value)</code> (Required) Client \u50B3\u7D66 Server \u7684\u503C\uFF0C <code>value</code> \u6703\u5F9E variables \u4E2D\u7372\u5F97\u3002</li><li><code>parseLiteral(ast)</code> (Required) Client \u50B3\u7D66 Server \u7684\u503C\uFF0C ast \u6703\u5F9E query \u5B57\u4E32\u4E2D\u89E3\u6790\u51FA\u4F86\uFF0C\u800C ast \u7684\u503C\u662F\u4E00\u500B AST \u683C\u5F0F\u7684 Object\uFF0C\u8209\u500B\u4F8B\u5B50\u5982\u4E0B</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> gql <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;apollo-server&#39;</span>

<span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token function">gql</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  scalar Date
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> GraphQLScalarType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;graphql&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Kind <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;graphql/language&#39;</span>

<span class="token keyword">const</span> resolvers <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">Date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLScalarType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Date&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;Date custom scalar type&#39;</span><span class="token punctuation">,</span>
    <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// value sent to the client</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">parseValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// value from the client</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">parseLiteral</span><span class="token punctuation">(</span><span class="token parameter">ast</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5F9E\u524D\u7AEF query \u5B57\u4E32\u9032\u4F86\u7684 input</span>
      <span class="token comment">// \u9019\u908A\u50C5\u63A5\u53D7\u8F38\u5165\u9032\u4F86\u7684\u662F Int \u503C</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>kind <span class="token operator">===</span> Kind<span class="token punctuation">.</span><span class="token constant">INT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ast value is always in string format</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5916\u90E8\u5957\u4EF6-okgrow-graphql-scalars" tabindex="-1"><a class="header-anchor" href="#\u5916\u90E8\u5957\u4EF6-okgrow-graphql-scalars" aria-hidden="true">#</a> \u5916\u90E8\u5957\u4EF6 @okgrow/graphql-scalars</h3><p>schema \u90E8\u5206\u4E00\u6A23\u9700\u8981\u81EA\u884C\u5B9A\u7FA9\uFF0Cresolver \u76F4\u63A5\u5F15\u5165\u5C31\u5B8C\u6210\u4E86\uFF01</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> DateTime <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@okgrow/graphql-scalars&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> resolvers <span class="token operator">=</span> <span class="token punctuation">{</span>
  DateTime<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,11),u={href:"https://ithelp.ithome.com.tw/articles/10202596",target:"_blank",rel:"noopener noreferrer"},d=l("2019 IT \u90A6\u5E6B\u5FD9 - Think in GraphQL");function k(v,m){const a=e("ExternalLinkIcon");return t(),p("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[d,c(a)])])])])}var b=s(i,[["render",k],["__file","advance.html.vue"]]);export{b as default};
