import{_ as p,c as t,b as s,a as e,d as l,r as o,o as c}from"./app-CD0kgWCL.js";const i={};function r(u,n){const a=o("SocialBlock");return c(),t("div",null,[n[0]||(n[0]=s("h1",{id:"create-a-react-server-components-project-without-nextjs-製作一個不依賴-nextjs-的-react-server-components-專案",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#create-a-react-server-components-project-without-nextjs-製作一個不依賴-nextjs-的-react-server-components-專案"},[s("span",null,"Create a React Server Components Project without NextJS - 製作一個不依賴 NextJS 的 React Server Components 專案")])],-1)),e(a,{hashtags:"javascript,nextjs,rsc,server-components"}),n[1]||(n[1]=l(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>Hi, 大家好，我是 Johnny，最近研究了一下 NextJS 14 具體是如何操作處理 Server Component 的渲染機制跟流程，把源碼裡 <code>server</code> 的部分原始碼看了個底朝天，花了一整個禮拜的閒暇時間才終於看懂整個流程，完整內容非常的複雜，我會用比較簡單的描述並節錄部分原始碼，把重點流程記錄下來，接下來的內容會比較艱澀難懂一些，推薦有一定的 JS 基礎再來閱讀喔～</p><h2 id="渲染流程與相關檔案" tabindex="-1"><a class="header-anchor" href="#渲染流程與相關檔案"><span>渲染流程與相關檔案</span></a></h2><p>開始之前，先介紹這次閱讀核心的 NextJS app render 到 html 的流程，包含關鍵函數名稱、細節，從上層往底層順序依序如下:（推薦都先打開相關的原始碼檔案一邊閱讀文章一邊查看原始碼會比較好理解喔）</p><ul><li><code>packages/next/src/server/app-render/app-render.tsx</code>: renderToHTMLOrFlightImpl <ul><li><code>packages/next/src/server/app-render/app-render.tsx</code>: renderToStream, RenderResult <ul><li><code>packages/next/src/server/app-render/app-render.tsx</code>: createServerComponentsRenderer <ul><li><code>packages/next/src/server/app-render/create-server-components-renderer.tsx</code>: useFlightResponse, <code>React.use()</code><ul><li><code>packages/next/src/server/app-render/use-flight-response.tsx</code>: createFromReadableStream, ssrManifest, <code>ReadableStream.tee()</code></li></ul></li></ul></li><li><code>packages/next/src/server/app-render/app-render.tsx</code>: createStaticRenderer <ul><li><code>packages/next/src/server/app-render/static/static-renderer.ts</code>: renderToReadableStream</li></ul></li><li><code>packages/next/src/server/render-result.ts</code>: toUnchunkedString</li></ul></li></ul></li><li><code>packages/next/src/server/stream-utils/node-web-streams-helper.ts</code>: streamToString</li></ul><h2 id="使用到的函數介紹" tabindex="-1"><a class="header-anchor" href="#使用到的函數介紹"><span>使用到的函數介紹</span></a></h2><ul><li><code>renderToHTMLOrFlightImpl</code>: 接收 server 端 req, res 並查找出對應的 render page 後，根據環境條件返回最終渲染結果</li><li><code>renderToStream</code>: 最終返回 stream 並傳遞給 <code>RenderResult</code> class</li><li><code>RenderResult</code>: 接收 stream 實例化，可透過其中的 <code>toUnchunkedString</code> 方法將 <code>createStaticRenderer</code> 創建實例後 render 出的 ReadableStream 轉為 html string</li><li><code>createServerComponentsRenderer</code>: 此函數內部會透過 <code>createServerComponentRenderer</code> 去創建一個 React 組件 <code>ServerComponentsRenderer</code>，該組件內部會先用 <code>react-server-dom-webpack/server.edge</code> 的 <code>renderToReadableStream</code> 得到 ReadableStream(此時為靜態分析物件，非 html stream)，接著用 <code>react-server-dom-webpack/client.edge</code> 的 <code>createFromReadableStream</code> 轉為提供 <code>React.use()</code> 去生成組件的結果 <ul><li><code>renderToReadableStream</code>: 接收組件內容，轉為靜態分析用的 readable stream</li><li><code>createFromReadableStream</code>: 接收靜態分析的 readable stream 並轉換為可提供 <code>React.use()</code> 使用的內容</li></ul></li><li><code>streamToString</code>: 轉換 stream 為 string</li></ul><h2 id="把原始碼以文字描述-較為冗長-建議搭配源碼閱讀" tabindex="-1"><a class="header-anchor" href="#把原始碼以文字描述-較為冗長-建議搭配源碼閱讀"><span>把原始碼以文字描述（較為冗長，建議搭配源碼閱讀）</span></a></h2><p>核心檔案在 <code>app-render.ts</code> 中</p><ol><li>首先創建 <code>ServerComponentsRenderer</code> 組件</li></ol><ul><li>透過 <code>createServerComponentsRenderer</code> 拿到 <code>ServerComponentsRenderer</code></li><li>createServerComponentsRenderer 中透過 <code>react-server-dom-webpack/server.edge</code> 方法<code>renderToReadableStream</code> 把 <code>app-render.ts</code> 內的組件轉為 readableStream（此時為靜態分析）</li><li><code>createServerComponentRenderer</code> 函數會返回 <code>ServerComponentWrapper</code> 組件，其中會呼叫 <code>useFlightResponse</code>，透過 <code>createFromReadableStream</code> 把 stream 轉為 response</li><li>最終透過 <code>react</code> 的 <code>use</code> 函數，把 response 轉為 react element 回傳</li></ul><ol start="2"><li><code>app-render.ts</code> 中，透過 <code>createStaticRenderer</code> 創建 <code>renderer</code></li></ol><ul><li>renderer 透過 <code>react-dom/server.edge</code> 的 <code>renderToReadableStream</code> 轉為 readableStream</li><li>readableStream 傳入 <code>render-result.ts</code> 的 <code>RenderResult</code> 方法 <code>toUnchunkedString</code> 轉為 html 字串</li></ul><h2 id="直接看原始碼拉" tabindex="-1"><a class="header-anchor" href="#直接看原始碼拉"><span>直接看原始碼拉～</span></a></h2><p>底下的原始碼已經從不同檔案中整理抽出需要的重點部分，方便一次性閱讀</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx" data-title="tsx"><pre><code><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">renderToHTMLOrFlightImpl</span><span class="token punctuation">(</span></span>
<span class="line">  req<span class="token operator">:</span> IncomingMessage<span class="token punctuation">,</span></span>
<span class="line">  res<span class="token operator">:</span> ServerResponse<span class="token punctuation">,</span></span>
<span class="line">  pagePath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  query<span class="token operator">:</span> NextParsedUrlQuery<span class="token punctuation">,</span></span>
<span class="line">  renderOpts<span class="token operator">:</span> RenderOpts<span class="token punctuation">,</span></span>
<span class="line">  baseCtx<span class="token operator">:</span> AppRenderBaseContext</span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 這一步是為了讓 react-server-dom-webpack 能拿到對應模組而 hack</span></span>
<span class="line">  <span class="token comment">// We need to expose the bundled \`require\` API globally for</span></span>
<span class="line">  <span class="token comment">// react-server-dom-webpack. This is a hack until we find a better way.</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ComponentMod<span class="token punctuation">.</span>__next_app__<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// @ts-ignore</span></span>
<span class="line">    globalThis<span class="token punctuation">.</span>__next_require__ <span class="token operator">=</span> ComponentMod<span class="token punctuation">.</span>__next_app__<span class="token punctuation">.</span><span class="token keyword">require</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// @ts-ignore</span></span>
<span class="line">    globalThis<span class="token punctuation">.</span>__next_chunk_load__ <span class="token operator">=</span> ComponentMod<span class="token punctuation">.</span>__next_app__<span class="token punctuation">.</span>loadChunk</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// ignore...</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> renderToStream <span class="token operator">=</span> <span class="token function">getTracer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span></span>
<span class="line">    AppRenderSpan<span class="token punctuation">.</span>getBodyResult<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      spanName<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">render route (app) </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pagePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      attributes<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-property property">&#39;next.route&#39;</span><span class="token operator">:</span> pagePath<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      asNotFound<span class="token punctuation">,</span></span>
<span class="line">      tree<span class="token punctuation">,</span></span>
<span class="line">      formState<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">/**</span>
<span class="line">       * This option is used to indicate that the page should be rendered as</span>
<span class="line">       * if it was not found. When it&#39;s enabled, instead of rendering the</span>
<span class="line">       * page component, it renders the not-found segment.</span>
<span class="line">       *</span>
<span class="line">       */</span></span>
<span class="line">      asNotFound<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">      tree<span class="token operator">:</span> LoaderTree</span>
<span class="line">      formState<span class="token operator">:</span> <span class="token builtin">any</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// ignore...</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 這一步入口在 createServerComponentsRenderer，得到一個經過靜態分析後，渲染用的組件</span></span>
<span class="line">      <span class="token keyword">const</span> ServerComponentsRenderer <span class="token operator">=</span> <span class="token function">createServerComponentsRenderer</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        ctx<span class="token punctuation">,</span></span>
<span class="line">        preinitScripts<span class="token punctuation">,</span></span>
<span class="line">        options<span class="token operator">:</span> serverComponentsRenderOpts<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 我們要渲染的目標放進去最裡面了！！</span></span>
<span class="line">      <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HeadManagerContext.Provider</span></span></span>
<span class="line">          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">appDir</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">            nonce<span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ServerInsertedHTMLProvider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ServerComponentsRenderer</span></span> <span class="token attr-name">asNotFound</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>asNotFound<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ServerInsertedHTMLProvider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">HeadManagerContext.Provider</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 取得 renderer</span></span>
<span class="line">      <span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">createStaticRenderer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ignore...</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 透過 renderer 把組件轉為 HTML stream</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">{</span> stream<span class="token punctuation">,</span> postponed <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// ignore...</span></span>
<span class="line">        <span class="token keyword">return</span> stream<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ignore...</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> formState<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>actionRequestResult<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>actionRequestResult<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;not-found&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> notFoundLoaderTree <span class="token operator">=</span> <span class="token function">createNotFoundLoaderTree</span><span class="token punctuation">(</span>loaderTree<span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 最終再透過 toUnchunkedString 就可以轉為 HTML string 摟</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RenderResult</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token comment">// 把 html stream 丟給 RenderResult</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token function">renderToStream</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          asNotFound<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">          tree<span class="token operator">:</span> notFoundLoaderTree<span class="token punctuation">,</span></span>
<span class="line">          formState<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token operator">...</span>extraRenderResultMeta <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createServerComponentsRenderer</span><span class="token punctuation">(</span></span>
<span class="line">  loaderTreeToRender<span class="token operator">:</span> LoaderTree<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> ctx<span class="token punctuation">,</span> preinitScripts<span class="token punctuation">,</span> options <span class="token punctuation">}</span><span class="token operator">:</span> ServerComponentsRendererOptions</span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 這個函數裡面才是重點，外面這邊接收的 async function 只是一個丟進去渲染的組件</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">createServerComponentRenderer</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span></span>
<span class="line">    asNotFound<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ignore...</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createServerComponentRenderer</span><span class="token generic class-name"><span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token function-variable function">ComponentToRender</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    ComponentMod<span class="token punctuation">,</span></span>
<span class="line">    clientReferenceManifest<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token operator">:</span> ServerComponentRendererOptions</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">JSX</span><span class="token punctuation">.</span>Element <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> flightStream<span class="token operator">:</span> ReadableStream<span class="token operator">&lt;</span>Uint8Array<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">createFlightStream</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flightStream<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 轉換為 flightStream</span></span>
<span class="line">      flightStream <span class="token operator">=</span> ComponentMod<span class="token punctuation">.</span><span class="token function">renderToReadableStream</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token comment">// 這邊的組件就是剛剛上面的 async 組件</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ComponentToRender</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">(</span>props <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span></span>
<span class="line">        clientReferenceManifest<span class="token punctuation">.</span>clientModules<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> flightStream</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> flightResponseRef<span class="token operator">:</span> FlightResponseRef <span class="token operator">=</span> <span class="token punctuation">{</span> current<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 最終回傳一個組件出去</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">ServerComponentWrapper</span><span class="token punctuation">(</span>props<span class="token operator">:</span> Props<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">JSX</span><span class="token punctuation">.</span>Element <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 轉換為 response 後丟給 React.use</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token function">useFlightResponse</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token function">createFlightStream</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      clientReferenceManifest<span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// ignore...</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">use</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ServerRenderer</span> <span class="token keyword">implements</span> <span class="token class-name">Renderer</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">readonly</span> renderToReadableStream <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;react-dom/server.edge&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span>renderToReadableStream <span class="token keyword">as</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;react-dom/server.edge&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;renderToReadableStream&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> options<span class="token operator">:</span> RenderToReadableStreamOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">render</span><span class="token punctuation">(</span>children<span class="token operator">:</span> <span class="token constant">JSX</span><span class="token punctuation">.</span>Element<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>RenderResult<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderToReadableStream</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span> stream <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createStaticRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Renderer <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ignore...</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerRenderer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ignore...</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">RenderResult</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">toUnchunkedString</span><span class="token punctuation">(</span>stream <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ignore...</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">streamToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readable<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">streamToString</span><span class="token punctuation">(</span></span>
<span class="line">  stream<span class="token operator">:</span> ReadableStream<span class="token operator">&lt;</span>Uint8Array<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> buffer <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">await</span> stream</span>
<span class="line">    <span class="token comment">// Decode the streamed chunks to turn them into strings.</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span><span class="token function">createDecodeTransformStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">pipeTo</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token keyword">new</span> <span class="token class-name">WritableStream<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">write</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          buffer <span class="token operator">+=</span> chunk</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> buffer</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createDecodeTransformStream</span><span class="token punctuation">(</span>decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransformStream<span class="token operator">&lt;</span>Uint8Array<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">transform</span><span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> controller<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> <span class="token punctuation">{</span> stream<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">flush</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意！！</span></a></h2><p>這邊會有個重點需要注意，<code>react-dom/server.edge</code> 本身就有提供 <code>renderToReadableStream</code> 方法，此方法是將組件轉換為 HTML Readable Stream，可以透過轉換取得 HTML string 結果</p><p>但是！！<code>react-server-dom-webpack/server.edge</code> 也有提供一個 <code>renderToReadableStream</code>，這個方法則是把組件透過靜態分析轉為特殊格式的「靜態分析物件」，這個物件不能直接轉為 HTML string，而是一種特殊格式的內容，必須經由 <code>react-server-dom-webpack/client.edge</code> 的 <code>createFromReadableStream</code>，轉為可提供 <code>React.use()</code> 使用的內容後才能轉回組件</p><h2 id="快速回顧渲染流程" tabindex="-1"><a class="header-anchor" href="#快速回顧渲染流程"><span>快速回顧渲染流程</span></a></h2><ol><li>根據 request 判斷要渲染的頁面並引入</li><li>用 <code>react-server-dom-webpack</code> 的 renderToReadableStream，轉換組件為<code>靜態分析物件</code>(這一步需要提供 <code>react-server-dom-webpack</code> 套件 Plugin 解析出的 <code>react-client-manifest.json</code>)</li><li>用 <code>ReadableStream.tee()</code> 方法，把靜態分析物件複製成獨立的兩份（這一步很重要，避免後續處理導致 readableStream 鎖死）</li><li>透過 <code>createFromReadableStream</code> 把靜態分析物件轉為 response，並將該 response 透過 <code>React.use</code> 包裹在一個獨立組件中</li><li>透過 <code>streamToString</code> 方法，把另一份複製的靜態分析物件轉換成靜態字串（特殊格式，為了方便前端直接透過 js 拿到），後面會注入到 render 的 page 當中，這一步的重點是為了讓 client side 能夠在畫面初始化時直接拿到預先產好的靜態分析物件，加速首頁面的載入速度，並減少對 server 產生多餘的 request，NextJS 中是注入像是 <code>self.__next_f.push([1, &quot;xxxx&quot;])</code> 的方式傳遞，詳情可點擊<a href="https://github.com/vercel/next.js/blob/canary/packages/next/src/server/app-render/use-flight-response.tsx#L28C11-L28C11" target="_blank" rel="noopener noreferrer">這邊原始碼查看</a></li><li>透過 <code>react-dom/server.edge</code> 的 <code>renderToReadableStream</code>(這裡重新命名為 renderToHtmlStream)，把上一步產生的獨立組件，轉換為 HTML Stream，同時使用 <code>bootstrapScriptContent</code> 注入前面預先產好的靜態分析物件，以及 <code>bootstrapScripts</code> 注入 client side 的 entrypoint</li><li>把 HTML stream 轉為 HTML string</li></ol><h3 id="實作還原流程" tabindex="-1"><a class="header-anchor" href="#實作還原流程"><span>實作還原流程</span></a></h3><p>不免俗的，都看完了原始碼跟實作流程，就是要來實作拉～，當然不可能從頭做得跟 NextJS 一樣完整細緻，我把 React 官網的範例 <a href="https://github.com/reactjs/server-components-demo" target="_blank" rel="noopener noreferrer">server-components-demo</a>的架構直接拿來使用修改，大致上脈絡總要可以動吧！？不然豈不是紙上談兵，白學了？（男人千萬不可只出...</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> renderToReadableStream <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-server-dom-webpack/server.edge&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createFromReadableStream <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-server-dom-webpack/client.edge&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> renderToReadableStream <span class="token keyword">as</span> renderToHtmlStream <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-dom/server.edge&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 1.</span></span>
<span class="line">  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">importPageByName</span><span class="token punctuation">(</span>pageName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> manifest <span class="token operator">=</span> <span class="token function">getClientManifest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 2.</span></span>
<span class="line">  <span class="token keyword">const</span> flightStream <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">renderToReadableStream</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ComponentToRender</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span></span>
<span class="line">    manifest<span class="token punctuation">.</span>clientModuleMap</span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 3.</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>renderStream<span class="token punctuation">,</span> dataStream<span class="token punctuation">]</span> <span class="token operator">=</span> flightStream<span class="token punctuation">.</span><span class="token function">tee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 4.</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token function">createFromReadableStream</span><span class="token punctuation">(</span>renderStream<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">ssrManifest</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">moduleLoading</span><span class="token operator">:</span> manifest<span class="token punctuation">.</span>moduleLoading<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">moduleMap</span><span class="token operator">:</span> manifest<span class="token punctuation">.</span>ssrModuleMap<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">ServerComponentWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 5.</span></span>
<span class="line">  <span class="token keyword">const</span> pageData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">streamToString</span><span class="token punctuation">(</span>dataStream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 6.</span></span>
<span class="line">  <span class="token keyword">const</span> htmlStream <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">renderToHtmlStream</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ServerComponentWrapper</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">bootstrapScriptContent</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    const self = window; self.__ssr_f = self.__ssr_f || [];</span>
<span class="line">    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pageData<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">bootstrapScripts</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/main.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 7.</span></span>
<span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readStream</span><span class="token punctuation">(</span>htmlStream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> data<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上只是部分節錄我的實作原始碼，想觀看更多實作細節，歡迎點擊這邊瀏覽 <a href="https://github.com/johnnywang1994/react-rsc" target="_blank" rel="noopener noreferrer">@johnnywang1994/react-rsc</a>摟，當然實際上 Server Component 還有更多細節需要處理，比如 Cache, Revalidate 等等，所以實際產品開發使用還是推薦直接用 NextJS 喔！這個實作只是一種學習成果的小練習～</p>`,25)),e(a,{hashtags:"javascript,nextjs,rsc,server-components"}),n[2]||(n[2]=s("h2",{id:"結論",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#結論"},[s("span",null,"結論")])],-1)),n[3]||(n[3]=s("p",null,"老實說這次發想來實作 React Server Component 架構，比我想像中的費力，儘管我在 1年多前也用 vue3 實作過一次 Vue3 的 Server Rendering 架構，這次的源碼研究比單純的 Server Rendering 更加艱澀，花費了比我想像多 3倍的時間才終於弄出一個雛形，最後還是老話一句，感謝各位讀者觀看到最後～也發自內心感謝所有投身於開源專案的大佬們，這些好用的工具、框架真的都是許許多多工程師的血汗結晶啊...，你各位開發的時候請好好珍惜！",-1)),n[4]||(n[4]=s("p",null,"歡迎將文章分享給更多朋友摟，我要趕緊去睡了，大家下篇文章見，掰掰～",-1))])}const k=p(i,[["render",r],["__file","react-rsc-without-nextjs.html.vue"]]),v=JSON.parse('{"path":"/articles/js/react-rsc-without-nextjs.html","title":"Create a React Server Components Project without NextJS - 製作一個不依賴 NextJS 的 React Server Components 專案","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"渲染流程與相關檔案","slug":"渲染流程與相關檔案","link":"#渲染流程與相關檔案","children":[]},{"level":2,"title":"使用到的函數介紹","slug":"使用到的函數介紹","link":"#使用到的函數介紹","children":[]},{"level":2,"title":"把原始碼以文字描述（較為冗長，建議搭配源碼閱讀）","slug":"把原始碼以文字描述-較為冗長-建議搭配源碼閱讀","link":"#把原始碼以文字描述-較為冗長-建議搭配源碼閱讀","children":[]},{"level":2,"title":"直接看原始碼拉～","slug":"直接看原始碼拉","link":"#直接看原始碼拉","children":[]},{"level":2,"title":"注意！！","slug":"注意","link":"#注意","children":[]},{"level":2,"title":"快速回顧渲染流程","slug":"快速回顧渲染流程","link":"#快速回顧渲染流程","children":[{"level":3,"title":"實作還原流程","slug":"實作還原流程","link":"#實作還原流程","children":[]}]},{"level":2,"title":"結論","slug":"結論","link":"#結論","children":[]}],"git":{"updatedTime":1700836541000,"contributors":[{"name":"johnnywang","username":"johnnywang","email":"johnnywang@test.com","commits":1,"url":"https://github.com/johnnywang"}]},"filePathRelative":"articles/js/react-rsc-without-nextjs.md"}');export{k as comp,v as data};
