import{_ as l,o as i,c as e,f as a}from"./app-9c5c90e3.js";const r={},t=a('<h1 id="前端性能優化" tabindex="-1"><a class="header-anchor" href="#前端性能優化" aria-hidden="true">#</a> 前端性能優化</h1><h2 id="何謂前端性能" tabindex="-1"><a class="header-anchor" href="#何謂前端性能" aria-hidden="true">#</a> 何謂前端性能？</h2><p>從用戶訪問網站到頁面完整展現，通過各種優化策略提升加載速度和用戶體驗</p><h2 id="為何重要" tabindex="-1"><a class="header-anchor" href="#為何重要" aria-hidden="true">#</a> 為何重要？</h2><p>網頁加載速度直接影響用戶留存和產品收入</p><h2 id="如何學習" tabindex="-1"><a class="header-anchor" href="#如何學習" aria-hidden="true">#</a> 如何學習</h2><ul><li>前端性能優化知識，包括html、css、js資源文件的優化，以及app、服務端和網絡優化基於整個研發過程展開</li><li>從靜態資源優化入手，到全鏈路質量監控體系建設</li></ul><ol><li><strong>靜態資源優化</strong>：</li></ol><ul><li>涵蓋 HTML、CSS、JS 和圖片等靜態資源。</li><li>講解圖片格式應用場景和使用策略。</li><li>討論文件壓縮合併、打包方案、版本號更新方案，以及前端工程化工具。</li><li>eg. 圖片壓縮、gzip、tree shaking</li></ul><ol start="2"><li><strong>頁面渲染架構設計</strong>：</li></ol><ul><li>系統化講解頁面渲染技術，包括前後端分離技術（SPA、PWA 等）。</li><li>涉及頁面加載策略、接口服務調優、接口緩存策略和實際性能優化案例。</li><li>介紹前端組件化和模塊化以加速業務開發。</li><li>eg. SPA、SSR、PWA、API cache、render cache、dynamic import</li></ul><ol start="3"><li><strong>Server 端和 Network 層面優化</strong>：</li></ol><ul><li>CDN 和 DNS 優化，減少 HTTP 請求數，減少 Cookie 大小。</li><li>NGX 緩存配置與優化，全站 HTTPS 配置及 HTTP/2 升級方法。</li></ul><ol start="4"><li><strong>開發流程優化</strong>：</li></ol><ul><li>技術調研方法，前後端接口約定，加快接口連接。</li><li>前端自動化測試、自動部署和上線，提高研發效率的方法。</li></ul><ol start="5"><li><strong>監控體系建設</strong>：</li></ol><ul><li>衡量性能優化結果，包括 H5 質量檢測、性能監控和錯誤監控。</li><li>原生 App 的性能和錯誤監控。</li><li>eg. Sentry, Lighthouse, SonarCube, Grafana Faro Web SDK...</li></ul>',17),o=[t];function n(s,h){return i(),e("div",null,o)}const d=l(r,[["render",n],["__file","index.html.vue"]]);export{d as default};
