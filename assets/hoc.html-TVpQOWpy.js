import{_ as e,c as o,b as s,a as p,d as t,r as c,o as l}from"./app-CA3bKxBI.js";const i={};function u(r,n){const a=c("SocialBlock");return l(),o("div",null,[n[0]||(n[0]=s("h1",{id:"hoc-pattern",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#hoc-pattern"},[s("span",null,"HOC Pattern")])],-1)),p(a,{hashtags:"design,pattern,hoc,higher-order-component"}),n[1]||(n[1]=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>大家好，我是 Johnny，今天要紀錄分享的是 Patterns 筆記系列的 <code>HOC Pattern</code></p><h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹"><span>介紹</span></a></h2><p><code>HOC</code> 全名 <code>Higher Order Component</code>，是一種把邏輯抽象後，讓我們可以將該段邏輯重複應用在許多組件上的技術，簡而言之，HOC 就是一個把其他組件當作參數傳入的組件，在 HOC 組件中，我們把想要套用的邏輯加在目標上之後返回它，套用的邏輯可以是 styles, authorization 等等多種應用方式，以下是一個套用樣式的 HOC 範例</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">withStyles</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token string">&#39;0.2rem&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token string">&#39;1rem&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Text</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> StyledButton <span class="token operator">=</span> <span class="token function">withStyles</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> StyledText <span class="token operator">=</span> <span class="token function">withStyles</span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我們把 Button, Text 作為目標，並透過 withStyles HOC 的方式加上了樣式，最終得到添加完成樣式的 StyledButton, StyledText 組件</p><blockquote><p>有個叫做 <code>recompose</code> 的有名 HOC 套件，但目前由於大部分 HOC 都可以直接由 hook 取代，故現在 recompose 已經停止維護了</p></blockquote><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks"><span>Hooks</span></a></h2><p>在許多情況下，我們可以用 hooks 取代 HOC，雖然我們無法在 hooks 中直接像 HOC 中那樣調用目標元素，但我們可以透過 ref 來間接控制調整，比如像下面是一個添加 hover 功能的 hook</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useHover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>hovering<span class="token punctuation">,</span> setHover<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleMouseOver</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setHover</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleMouseOut</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setHover</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> node <span class="token operator">=</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mouseover&quot;</span><span class="token punctuation">,</span> handleMouseOver<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mouseout&quot;</span><span class="token punctuation">,</span> handleMouseOut<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        node<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mouseover&quot;</span><span class="token punctuation">,</span> handleMouseOver<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        node<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mouseout&quot;</span><span class="token punctuation">,</span> handleMouseOut<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span>ref<span class="token punctuation">,</span> hovering<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我們就可以不必透過 hoc 包裹目標，而是直接在需要使用到 hover 邏輯的組件直接引用 useHover hook</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> useHover <span class="token keyword">from</span> <span class="token string">&quot;./useHover&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">DogImages</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>hoverRef<span class="token punctuation">,</span> hovering<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useHover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>hoverRef<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">{</span>hovering <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;hover&quot;</span><span class="token operator">&gt;</span>Hovering<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;list&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">{</span>props<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dog<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>dog<span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token string">&quot;Dog&quot;</span> key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> DogImages</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="討論" tabindex="-1"><a class="header-anchor" href="#討論"><span>討論</span></a></h2><p>總體而言，Hooks 並沒有取代 HOC，而是減少許多不必要的 Nested 層級關係，過度依賴 HOC 將導致元素階層過深的問題，而過度使用 hooks 也一樣可以導致依賴問題，以下進行兩者比較</p><ul><li>適合使用 HOC 的時機 <ul><li>在應用程式中，許多組件必須套用<code>相同</code>、<code>非客製化</code>的行為</li><li>組件本身可以完全獨立使用，與 HOC 中的邏輯較無關</li><li>其他特殊場合，無法在目標組件中透過 hooks 使用，而是希望在目標組件初始化前就預先完成的行為</li></ul></li><li>適合使用 Hooks 的時機 <ul><li>行爲必須依照組件進行客製化調整</li><li>行為僅套用在部分、少數組件上</li><li>在目標組件中添加許多 properties 的場合</li></ul></li></ul>`,15)),p(a,{hashtags:"design,pattern,hoc,higher-order-component"}),n[2]||(n[2]=t('<h2 id="結論" tabindex="-1"><a class="header-anchor" href="#結論"><span>結論</span></a></h2><h3 id="優點" tabindex="-1"><a class="header-anchor" href="#優點"><span>優點</span></a></h3><p><code>HOC Pattern</code> 讓我們能過把相同的邏輯統一整合到一個地方，減少重複撰寫同樣邏輯，分散在各地可能導致的問題，藉由此達到程式碼 <code>DRY</code>、<code>關注點分離</code> 的效果</p><h3 id="缺點" tabindex="-1"><a class="header-anchor" href="#缺點"><span>缺點</span></a></h3><ul><li>參數名稱覆蓋：在我們的 HOC 組件參數中，可能導致參數名稱被覆蓋的問題，比如常見的 <code>style</code> 屬性，使用時需確保參數名稱沒有衝突，以避免發生預期外的錯誤</li><li>除錯困難：因為 HOC 將組件包裹在內並透過 props 傳遞資料，但當包裹的層數上升時，內部 props 的屬性來源將變得難以定位查找，出錯時也較難以確認出錯的位置、層級</li></ul><p>今天介紹就到這邊拉，希望大家都有學習到東西，下篇見拉～=V=</p>',6))])}const d=e(i,[["render",u]]),v=JSON.parse('{"path":"/articles/memo/patterns/design/hoc.html","title":"HOC Pattern","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1673953009000,"contributors":[{"name":"johnnywang","username":"johnnywang","email":"johnnywang@test.com","commits":1,"url":"https://github.com/johnnywang"}],"changelog":[{"hash":"7cf8258164b98a681baabbbc045f5a44b75720ea","time":1673953009000,"email":"johnnywang@test.com","author":"johnnywang","message":"UPD: add hoc &#x26; flyweight"}]},"filePathRelative":"articles/memo/patterns/design/hoc.md"}');export{d as comp,v as data};
