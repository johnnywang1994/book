import{_ as i,r as o,o as l,c,d as n,e as s,a as e,f as t}from"./app-7841ac8a.js";const p={},r=t('<h1 id="traefik-memo" tabindex="-1"><a class="header-anchor" href="#traefik-memo" aria-hidden="true">#</a> Traefik Memo</h1><p>本篇是學習 traefik 的學習筆記，主要是介紹一些基礎概念, 名詞說明, 使用方式</p><h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹" aria-hidden="true">#</a> 介紹</h2><p>Traefik 是一款開源的邊緣路由器，主要功用是發布服務並進行一系列的組織管理。替系統接收請求並找出哪些組件負責處理它們</p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>Traefik 是一個邊緣路由器，做為系統平台的入口，它攔截並路由每個傳入的請求，並決定哪些服務處理哪些請求的所有邏輯和規則 <img src="https://doc.traefik.io/traefik/assets/img/traefik-concepts-1.png" alt=""></p><h3 id="自動化服務偵測-auto-service-discovery" tabindex="-1"><a class="header-anchor" href="#自動化服務偵測-auto-service-discovery" aria-hidden="true">#</a> 自動化服務偵測 Auto Service Discovery</h3><p>透過適當的服務集成，在部署服務時 traefik 將能夠自動偵測該部署服務，並提供系列的路由導向配置，無需像傳統邊緣路由器那樣手動配置每個服務，而當服務被移除時，也將自動移除相關的路由配置</p>',8),u=n("code",null,"Provider",-1),d={href:"https://doc.traefik.io/traefik/migration/v1-to-v2/#providers",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="配置介紹" tabindex="-1"><a class="header-anchor" href="#配置介紹" aria-hidden="true">#</a> 配置介紹</h2><p>請先看下面這張配置說明圖 <img src="https://doc.traefik.io/traefik/assets/img/static-dynamic-configuration.png" alt=""></p><p>Traefik 配置主要分為兩部分</p><ul><li>啟動配置(Static Configuration): 包含 Provider, Entrypoints 配置</li><li>動態路由配置(Dynamic Configuration): 包含所有請求處理相關配置，主要為 Routers, Services, Middlewares, Certificates 等部分</li></ul><h2 id="啟動配置-static-configuration" tabindex="-1"><a class="header-anchor" href="#啟動配置-static-configuration" aria-hidden="true">#</a> 啟動配置 - Static Configuration</h2><p>包含三種<code>互斥</code>(只能同時使用一種)的配置方式</p><ol><li>單一配置檔案</li><li>指令列參數配置</li><li>環境變數配置</li></ol><h3 id="_1-單一配置檔案" tabindex="-1"><a class="header-anchor" href="#_1-單一配置檔案" aria-hidden="true">#</a> 1. 單一配置檔案</h3><p>traefik 啟動時會去下列路徑上尋找檔案 <code>traefik.yml</code>(或是 <code>traefik.yaml</code>, <code>traefik.toml</code>)</p><ul><li><code>/etc/traefik/</code></li><li><code>$XDG_CONFIG_HOME/</code></li><li><code>$HOME/.config/</code></li><li><code>.</code>(Working directory)</li><li>透過 <code>--configFile</code> 覆蓋</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ traefik <span class="token parameter variable">--configFile</span><span class="token operator">=</span>foo/bar/myconfigfile.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),v={href:"https://doc.traefik.io/traefik/providers/docker/#provider-configuration",target:"_blank",rel:"noopener noreferrer"},m=t(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">providers</span><span class="token punctuation">:</span>
  <span class="token key atrule">docker</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment"># 預設</span>
  <span class="token comment"># or</span>
  <span class="token key atrule">docker</span><span class="token punctuation">:</span>
    <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> <span class="token string">&quot;unix:///var/run/docker.sock&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可對應配置一個範例動態路由如下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">traefik</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> traefik<span class="token punctuation">:</span>v2.9 <span class="token comment"># The official v2 Traefik docker image</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token comment"># The HTTP port</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;80:80&quot;</span>
      <span class="token comment"># The Web UI (enabled by --api.insecure=true)</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8080:8080&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token comment"># So that Traefik can listen to the Docker events</span>
      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock
  <span class="token key atrule">whoami</span><span class="token punctuation">:</span>
    <span class="token comment"># A container that exposes an API to show its IP address</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> traefik/whoami
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;traefik.http.routers.whoami.rule=Host(\`whoami.docker.localhost\`)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-指令列參數配置" tabindex="-1"><a class="header-anchor" href="#_2-指令列參數配置" aria-hidden="true">#</a> 2. 指令列參數配置</h3>`,4),h={href:"https://doc.traefik.io/traefik/reference/static-configuration/cli/",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"docker-compose",-1),f=t(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">traefik</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> traefik<span class="token punctuation">:</span>v2.9
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>accesslog
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>providers.docker
    <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-環境變數配置" tabindex="-1"><a class="header-anchor" href="#_3-環境變數配置" aria-hidden="true">#</a> 3. 環境變數配置</h3>`,2),y={href:"https://doc.traefik.io/traefik/reference/static-configuration/env/",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"動態路由配置-routing-load-balancing-dynamic-configuration",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#動態路由配置-routing-load-balancing-dynamic-configuration","aria-hidden":"true"},"#"),s(" 動態路由配置(Routing & Load Balancing) - Dynamic Configuration")],-1),_=n("p",null,[s("大致上處理請求的過程如下圖 "),n("img",{src:"https://doc.traefik.io/traefik/assets/img/architecture-overview.png",alt:""})],-1),q=n("p",null,"當 Traefik 被啟動時，從我們定義的 entrypoints 進入，接著路由解析並查找是否有該請求對應的路由配置規則，如果有查找到，則將套用對應路由配置中的一系列 middlewares 執行，並最終轉發請求到指定的 Service 服務",-1),x={href:"https://doc.traefik.io/traefik/routing/overview/#clear-responsibilities",target:"_blank",rel:"noopener noreferrer"},T={href:"https://doc.traefik.io/traefik/providers/overview/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://doc.traefik.io/traefik/routing/entrypoints/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://doc.traefik.io/traefik/routing/routers/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://doc.traefik.io/traefik/routing/services/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://doc.traefik.io/traefik/middlewares/overview/",target:"_blank",rel:"noopener noreferrer"},C=t(`<h3 id="file-provider-動態路由配置範例" tabindex="-1"><a class="header-anchor" href="#file-provider-動態路由配置範例" aria-hidden="true">#</a> File Provider 動態路由配置範例</h3><p>此範例中我們透過 File Provider 配置將 <code>http://example.com/whoami/</code> 轉發到 <code>http://private/whoami-service/</code></p><p>首先進行啟動配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">entryPoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token comment"># 監聽從 8081 進來的請求</span>
    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token punctuation">:</span><span class="token number">8081</span>

<span class="token key atrule">providers</span><span class="token punctuation">:</span>
  <span class="token comment"># 允許透過 file provider 來進行動態路由配置</span>
  <span class="token key atrule">file</span><span class="token punctuation">:</span>
    <span class="token key atrule">directory</span><span class="token punctuation">:</span> /path/to/dynamic/conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接著在 <code>/path/to/dynamic/conf</code> 中，建立一個名為 <code>http.yml</code> 的配置（名子可隨意）</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token key atrule">routers</span><span class="token punctuation">:</span>
    <span class="token key atrule">to-whoami</span><span class="token punctuation">:</span>
      <span class="token key atrule">rule</span><span class="token punctuation">:</span> <span class="token string">&quot;Host(\`example.com\`) &amp;&amp; PathPrefix(\`/whoami/\`)&quot;</span>
      <span class="token comment"># 如果規則對應成功, 轉發到 whoami service(定義在下方)</span>
      <span class="token key atrule">service</span><span class="token punctuation">:</span> whoami

  <span class="token key atrule">services</span><span class="token punctuation">:</span>
    <span class="token comment"># 定義服務在系統上的位置</span>
    <span class="token key atrule">whoami</span><span class="token punctuation">:</span>
      <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span>
        <span class="token key atrule">servers</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//private/whoami<span class="token punctuation">-</span>service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="entrypoints-支援的所有參數" tabindex="-1"><a class="header-anchor" href="#entrypoints-支援的所有參數" aria-hidden="true">#</a> Entrypoints 支援的所有參數</h3>`,7),I={href:"https://doc.traefik.io/traefik/routing/entrypoints/#configuration",target:"_blank",rel:"noopener noreferrer"},E=t(`<blockquote><p>需注意，預設情況下，沒有提供任何 entrypoints 給 traefik 時，會套用名為 <code>http</code> 的 entrypoint 在 80 port，但如果有明確提供任何一個 entrypoint 給 traefik 後，此預設 <code>http</code> 的 entrypoint 將不會被套用，如果仍然需要使用預設的 <code>80</code> port entrypoint 則需要手動將其加入</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">## Static configuration</span>
<span class="token key atrule">entryPoints</span><span class="token punctuation">:</span>
  <span class="token key atrule">http</span><span class="token punctuation">:</span> <span class="token comment"># default</span>
    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token string">&quot;:80&quot;</span>
  <span class="token key atrule">https</span><span class="token punctuation">:</span>
    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token string">&quot;:443&quot;</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span>
    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token string">&quot;:8888&quot;</span> <span class="token comment"># same as &quot;:8888/tcp&quot;</span>
    <span class="token key atrule">http2</span><span class="token punctuation">:</span>
      <span class="token key atrule">maxConcurrentStreams</span><span class="token punctuation">:</span> <span class="token number">42</span>
    <span class="token key atrule">http3</span><span class="token punctuation">:</span>
      <span class="token key atrule">advertisedPort</span><span class="token punctuation">:</span> <span class="token number">8888</span>
    <span class="token key atrule">transport</span><span class="token punctuation">:</span>
      <span class="token key atrule">lifeCycle</span><span class="token punctuation">:</span>
        <span class="token key atrule">requestAcceptGraceTimeout</span><span class="token punctuation">:</span> <span class="token number">42</span>
        <span class="token key atrule">graceTimeOut</span><span class="token punctuation">:</span> <span class="token number">42</span>
      <span class="token key atrule">respondingTimeouts</span><span class="token punctuation">:</span>
        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">42</span>
        <span class="token key atrule">writeTimeout</span><span class="token punctuation">:</span> <span class="token number">42</span>
        <span class="token key atrule">idleTimeout</span><span class="token punctuation">:</span> <span class="token number">42</span>
    <span class="token key atrule">proxyProtocol</span><span class="token punctuation">:</span>
      <span class="token key atrule">insecure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">trustedIPs</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;127.0.0.1&quot;</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;192.168.0.1&quot;</span>
    <span class="token key atrule">forwardedHeaders</span><span class="token punctuation">:</span>
      <span class="token key atrule">insecure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">trustedIPs</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;127.0.0.1&quot;</span>
        <span class="token punctuation">-</span> <span class="token string">&quot;192.168.0.1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="https-tls" tabindex="-1"><a class="header-anchor" href="#https-tls" aria-hidden="true">#</a> HTTPS &amp; TLS</h2>`,3),L=n("code",null,"tls",-1),D={href:"https://doc.traefik.io/traefik/routing/routers/#tls",target:"_blank",rel:"noopener noreferrer"},A=t(`<ul><li>限制進入請求只能為 <code>https</code></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">## Dynamic configuration</span>
<span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token key atrule">routers</span><span class="token punctuation">:</span>
    <span class="token key atrule">my-https-router</span><span class="token punctuation">:</span>
      <span class="token key atrule">rule</span><span class="token punctuation">:</span> <span class="token string">&quot;Host(\`foo-domain\`) &amp;&amp; Path(\`/foo-path/\`)&quot;</span>
      <span class="token key atrule">service</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>id
      <span class="token comment"># will terminate the TLS request</span>
      <span class="token key atrule">tls</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若需要同時支援 http, https 則需要寫兩個配置，其中一個加上 tls</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token key atrule">routers</span><span class="token punctuation">:</span>
    <span class="token key atrule">my-https-router</span><span class="token punctuation">:</span>
      <span class="token key atrule">rule</span><span class="token punctuation">:</span> <span class="token string">&quot;Host(\`foo-domain\`) &amp;&amp; Path(\`/foo-path/\`)&quot;</span>
      <span class="token key atrule">service</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>id
      <span class="token comment"># will terminate the TLS request</span>
      <span class="token key atrule">tls</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token key atrule">my-http-router</span><span class="token punctuation">:</span>
      <span class="token key atrule">rule</span><span class="token punctuation">:</span> <span class="token string">&quot;Host(\`foo-domain\`) &amp;&amp; Path(\`/foo-path/\`)&quot;</span>
      <span class="token key atrule">service</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function B(F,M){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,n("blockquote",null,[n("p",null,[s("Traefik 能夠使用您的 Cluster API 來發現服務並讀取附加信息。 在 Traefik 中，這些連接器被稱為 "),u,s("，因為它們為 Traefik 提供配置。"),n("a",d,[s("點此查看所有支援的 Provider 清單"),e(a)])])]),k,n("p",null,[s("這邊以 Provider Docker 舉例配置如下，詳細"),n("a",v,[s("配置方法可見這邊"),e(a)])]),m,n("p",null,[s("可參考這邊"),n("a",h,[s("支援的參數列表"),e(a)]),s("，這種方式在配置 "),b,s(" yaml file 時非常方便")]),f,n("p",null,[s("可參考這邊"),n("a",y,[s("支援的環境變數列表"),e(a)])]),g,_,q,n("p",null,[s("到此我們可以簡單釐清下個部分的職責，"),n("a",x,[s("參考連結"),e(a)]),s("：")]),n("ul",null,[n("li",null,[n("a",T,[s("Provider"),e(a)]),s(": 發現基礎設施上的服務(IP, health)")]),n("li",null,[n("a",w,[s("Entrypoints"),e(a)]),s(": 監聽傳入流量（ports）")]),n("li",null,[n("a",P,[s("Routers"),e(a)]),s(": 分析請求（host, path, headers, SSL）")]),n("li",null,[n("a",S,[s("Services"),e(a)]),s(": 將請求轉發給您的服務（load balancing）")]),n("li",null,[n("a",H,[s("Middlewares"),e(a)]),s(": 可能會更新請求或根據請求做出決定（authentication, rate limiting, headers）")])]),C,n("p",null,[s("內容可能會更新，"),n("a",I,[s("可參考這邊"),e(a)])]),E,n("p",null,[s("包含兩部分設定 routers, TLS connection，當路由器必須處理 HTTPS 流量時，應使用路由器定義的 "),L,s(" 字段指定，"),n("a",D,[s("詳情可見這邊"),e(a)])]),A])}const O=i(p,[["render",B],["__file","traefik.html.vue"]]);export{O as default};
