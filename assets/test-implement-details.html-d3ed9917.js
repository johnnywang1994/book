import{_ as t,r,o as c,c as o,d as a,e,a as i,f as n}from"./app-da643460.js";const h={},s=n('<h1 id="實作-test-的注意事項" tabindex="-1"><a class="header-anchor" href="#實作-test-的注意事項" aria-hidden="true">#</a> 實作 Test 的注意事項</h1><p>這邊是紀錄進行測試時一些常見的思維與概念，幫助正確有效地進行測試</p><h2 id="心法" tabindex="-1"><a class="header-anchor" href="#心法" aria-hidden="true">#</a> 心法</h2><h3 id="心法一-關注呈現結果-而非過程細節" tabindex="-1"><a class="header-anchor" href="#心法一-關注呈現結果-而非過程細節" aria-hidden="true">#</a> 心法一：關注呈現結果，而非過程細節</h3><p>在進行測試時，很常發生對於太細微的過程進行測試的狀況，這也導致許多 <code>False Negative</code>, <code>False Positive</code> 的狀況發生，比如修改組件內的方法名稱從 <code>handleEvent</code> 改為 <code>triggerEvent</code> 後，對應的測試邏輯其實是正確的，但只因為使用的名稱不同而造成錯誤，這種狀況就是 <code>False Negative</code>，我們應該更多<code>關注結果，而非細節</code></p><h3 id="心法二-你的使用者所不會使用、看見、甚至是了解的東西就是細節" tabindex="-1"><a class="header-anchor" href="#心法二-你的使用者所不會使用、看見、甚至是了解的東西就是細節" aria-hidden="true">#</a> 心法二：你的使用者所不會使用、看見、甚至是了解的東西就是細節</h3><p>我們的組件最終只會給兩種人使用，終端使用者、以及其他開發人員，所以我們就該去針對「能不能正確使用 <code>Props</code>」及「<code>Render</code> 出來的畫面」這兩項代表性的指標做測試</p><h3 id="心法三-不要只是為自己寫下測試案例" tabindex="-1"><a class="header-anchor" href="#心法三-不要只是為自己寫下測試案例" aria-hidden="true">#</a> 心法三：不要只是為自己寫下測試案例</h3><h3 id="心法三-你的測試案例越貼近使用者的使用方式-測試結果就能給你越大的信心" tabindex="-1"><a class="header-anchor" href="#心法三-你的測試案例越貼近使用者的使用方式-測試結果就能給你越大的信心" aria-hidden="true">#</a> 心法三：你的測試案例越貼近使用者的使用方式，測試結果就能給你越大的信心</h3><h2 id="找到對的東西測試" tabindex="-1"><a class="header-anchor" href="#找到對的東西測試" aria-hidden="true">#</a> 找到對的東西測試</h2><ul><li>哪部分沒有測試的程式碼一旦發生錯誤，你可能就得開始準備找份新工作?</li><li>試著把他們縮小成一個或幾個單元（按下結帳按鈕後，會將 items 中的資料透過 API /checkout 送出請求）</li><li>考慮使用者在這個單元的程式內在乎什麼（開發者要能 Render 的結帳表單，末端使用者在乎能夠點擊按鈕）</li><li>為使用者寫下<code>使用說明</code>，並手動測試確認功能正常（在購物車裡給假的資料 Render 出結帳表單，確保使用該數據送出模擬的 /checkout 請求，並回傳模擬的成功回應，確認畫面上是否正確顯示成功的訊息）</li><li>將<code>使用說明</code>轉換成<code>測試案例</code>，寫進自動化測試</li></ul><h2 id="結論" tabindex="-1"><a class="header-anchor" href="#結論" aria-hidden="true">#</a> 結論</h2>',12),l={href:"https://medium.com/enjoy-life-enjoy-coding/react-unit-test-%E7%82%BA%E5%9F%B7%E8%A1%8C%E7%B4%B0%E7%AF%80%E5%AF%AB%E4%B8%8B%E6%B8%AC%E8%A9%A6-%E7%BF%BB%E8%AD%AF-7bec3bca4ee1",target:"_blank",rel:"noopener noreferrer"};function u(f,_){const d=r("ExternalLinkIcon");return c(),o("div",null,[s,a("p",null,[e("本篇是對"),a("a",l,[e("此篇翻譯文章"),i(d)]),e("閱讀後進行快速總結與理解，對相關深入說明有興趣的也推薦看看原文喔")])])}const m=t(h,[["render",u],["__file","test-implement-details.html.vue"]]);export{m as default};
