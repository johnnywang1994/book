import{_ as t,c,b as s,a as e,d as l,e as p,r as o,o as i}from"./app-DZhdvvpJ.js";const u={};function r(k,n){const a=o("SocialBlock");return i(),c("div",null,[n[0]||(n[0]=s("h1",{id:"從-mock-service-worker-源碼中學習",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#從-mock-service-worker-源碼中學習"},[s("span",null,"從 Mock Service Worker 源碼中學習")])],-1)),e(a,{hashtags:"javascript,typescript,msw,serviceWorker,mock"}),n[1]||(n[1]=l(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>嗨大家好，我是 Johnny，最近閒暇時我在想，到底 msw 是如何做到 web 與 service worker 之間的溝通，一直以為 msw 只是單純發個請求給 service worker 後，service worker 再直接把配對到的內容丟回給 web 這樣，但看完 msw 的源碼後才發現，我還是太嫩了ＱＱ，人家根本不只是這麼單純的丟過去丟回來而已...</p><h2 id="mock-操作種類" tabindex="-1"><a class="header-anchor" href="#mock-操作種類"><span>Mock 操作種類</span></a></h2><p>相信各位前端開發者們，都有用過各種 Mock 服務來進行測試與開發，但其中的原理，根據不同工具其底層的架構跟作法都不太一樣，舉例來說，常見有以下幾種 mock 的原理作法</p><ul><li>套件內部攔截：像是 <code>axios</code> 內建有 Request <code>interceptor</code> 讓開發者在使用 axios 工具實際送出 request 之前就攔截返回預先訂制的 response content，好處是不改動任何原生底層的 api，壞處是除了 axios 以外，無法攔截直接調用原生 api 的場景</li><li>底層替換攔截：這類以 <code>mock.js</code> 為代表，直接替換最底層的 XHR 物件，藉此在不改動第三方套件的情況下攔截所有請求，好處是不論使用何種第三方套件，只要底層是使用 XHR 發出請求就都可以攔截到，但缺點是 XHR 物件在 server 端並不存在，要使用的話必須對 server 端進行相容處理</li><li>獨立 mock server：這類以 <code>mockoon</code> 等為代表（雖然 mockoon 有 serverless 工具，但畢竟還是要部署在一個地方比如 amazon, vercel 等才能使用），或是其他直接啟動一個 server 來回應請求，這種方式比較不算在單純前端 mock 的範圍內，畢竟已經是直接啟動一個 server 了...，那就不單單只是所謂純前端的事了，好處是可以拿到最真實的 api 請求的 request, response 物件，壞處是你要為此多啟動一個 server</li><li>mock service worker：以 <code>msw</code> 為代表，透過啟動一個 <code>service worker</code> 為中間層，攔截所有從當前網頁發出的請求並返回，優點是除了可以模擬到真實 api 請求的 request, response 物件，同時不需要額外多啟動一台 server，缺點是如果網頁本身已經有其他的 service worker 可能會需要想辦法合併兩者，這種作法相對前三者較為新</li></ul><h2 id="msw-2-0" tabindex="-1"><a class="header-anchor" href="#msw-2-0"><span>MSW 2.0</span></a></h2><p>看完以上四種 mock 原理，前面三個相信已經有很多大神們解釋過了，今天我們要來透過瀏覽 <code>msw</code> 的源碼來了解這種相對新的作法究竟如何做到的？</p><p>正式理解源碼前，我們首先來對整個 <code>msw</code> 的使用有個基本概念，撰寫此文時剛好 <code>msw 2.0</code> released 了，就直接看最新的內容</p><h3 id="安裝" tabindex="-1"><a class="header-anchor" href="#安裝"><span>安裝</span></a></h3><p>安裝省略直接看官網...</p><h3 id="產生-msw-的-mockserviceworker-js" tabindex="-1"><a class="header-anchor" href="#產生-msw-的-mockserviceworker-js"><span>產生 msw 的 mockServiceWorker.js</span></a></h3><p>安裝完成後，透過 msw 提供的 cli 指令在指定位置產生 service worker file，產生的這個 sw file 是給 msw 使用，後面會來仔細看裡面究竟寫了啥</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">$ npx msw init ./public <span class="token parameter variable">--save</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="定義-msw-interceptor" tabindex="-1"><a class="header-anchor" href="#定義-msw-interceptor"><span>定義 msw interceptor</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// handler.js</span></span>
<span class="line"><span class="token comment">// 1. Import the &quot;HttpResponse&quot; class from the library.</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> http<span class="token punctuation">,</span> HttpResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;msw&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/resource&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 2. Return a mocked &quot;Response&quot; instance from the handler.</span></span>
<span class="line">    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;Hello world!&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在-browser-端使用" tabindex="-1"><a class="header-anchor" href="#在-browser-端使用"><span>在 Browser 端使用</span></a></h3><p>雖然 msw 也相容直接在 nodejs 端使用，但這邊先以 Browser 端做介紹</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// mock.js</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> setupWorker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;msw/browser&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> handlers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./handlers&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token function">setupWorker</span><span class="token punctuation">(</span><span class="token operator">...</span>handlers<span class="token punctuation">)</span></span>
<span class="line">worker<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 實際可根據環境自由選擇是否引入與執行啟動</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在網頁中啟動" tabindex="-1"><a class="header-anchor" href="#在網頁中啟動"><span>在網頁中啟動</span></a></h3><p>接著在瀏覽器上開啟網頁，如果有看到 data 內容就表示 mock 成功摟</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// main.js(entrypoint of you web app)</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&#39;./mock&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/resource&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mockserviceworker-js" tabindex="-1"><a class="header-anchor" href="#mockserviceworker-js"><span>mockServiceWorker.js</span></a></h2><ul><li><a href="https://github.com/mswjs/msw/blob/main/src/mockServiceWorker.js" target="_blank" rel="noopener noreferrer">File</a></li></ul><p>msw 直接從源碼本身著手會稍微有難度，因為牽涉到 nodejs, browser 端的處理，畢竟這邊主要是想理解 service worker 的部分處理機制，而 service worker 本身只存在於 browser 端，所以這邊單純以瀏覽 browser 相關的 code 為主，以下只是部分節錄</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 用來儲存 active 的 clientId</span></span>
<span class="line"><span class="token keyword">const</span> activeClientIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 定義 service worker 收到 message</span></span>
<span class="line">self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> clientId <span class="token operator">=</span> event<span class="token punctuation">.</span>source<span class="token punctuation">.</span>id</span>
<span class="line">  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> allClients <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;window&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// keepAlive 避免 service worker 休眠去了</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;KEEPALIVE_REQUEST&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">sendToClient</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;KEEPALIVE_RESPONSE&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 當 web 載入 service worker 時添加 active client</span></span>
<span class="line">    <span class="token comment">// （可能同時開很多個 web page 連上同一個 service worker）</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;MOCK_ACTIVATE&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      activeClientIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 通知 web 端載入並紀錄 clientId 完成</span></span>
<span class="line">      <span class="token function">sendToClient</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;MOCKING_ENABLED&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 當 web 端中斷連線時須移除 active clientId</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;CLIENT_CLOSED&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      activeClientIds<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">const</span> remainingClients <span class="token operator">=</span> allClients<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> client<span class="token punctuation">.</span>id <span class="token operator">!==</span> clientId</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// Unregister itself when there are no more clients</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>remainingClients<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        self<span class="token punctuation">.</span>registration<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;fetch&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token operator">=</span> event</span>
<span class="line">  <span class="token comment">// 省略一大段...</span></span>
<span class="line">  <span class="token keyword">const</span> requestId <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  event<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> requestId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveMainClient</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getResponse</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> client<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// 省略一小段...</span></span>
<span class="line">  <span class="token keyword">return</span> response</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 取得主要的 client</span></span>
<span class="line"><span class="token comment">// 發出請求的 client 並不一定就是註冊 worker 的那個 client</span></span>
<span class="line"><span class="token comment">// 在回應請求時應該使用後者（註冊 worker 的那個 client）</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">resolveMainClient</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientId<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token operator">?.</span>frameType <span class="token operator">===</span> <span class="token string">&#39;top-level&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> client</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> allClients <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;window&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> allClients</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> client<span class="token punctuation">.</span>visibilityState <span class="token operator">===</span> <span class="token string">&#39;visible&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> activeClientIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> client<span class="token punctuation">,</span> requestId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token operator">=</span> event</span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 複製 request，因為可能已經被使用</span></span>
<span class="line">  <span class="token comment">// (i.e. 比如 body 可能已經被送到 client）</span></span>
<span class="line">  <span class="token keyword">const</span> requestClone <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">passthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> headers <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>requestClone<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>requestClone<span class="token punctuation">,</span> <span class="token punctuation">{</span> headers <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 省略一大段 passthrough 判斷...</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 通知 main client 端請求已被攔截</span></span>
<span class="line">  <span class="token comment">// 這裡會等到 client 端處理好整個 response 後繼續執行</span></span>
<span class="line">  <span class="token comment">// 主要是透過 sendToClient 中的 MessageChannel 雙向 sync 溝通</span></span>
<span class="line">  <span class="token keyword">const</span> requestBuffer <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> clientMessage <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendToClient</span><span class="token punctuation">(</span></span>
<span class="line">    client<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;REQUEST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">id</span><span class="token operator">:</span> requestId<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">url</span><span class="token operator">:</span> request<span class="token punctuation">.</span>url<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">mode</span><span class="token operator">:</span> request<span class="token punctuation">.</span>mode<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">method</span><span class="token operator">:</span> request<span class="token punctuation">.</span>method<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">headers</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">cache</span><span class="token operator">:</span> request<span class="token punctuation">.</span>cache<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">credentials</span><span class="token operator">:</span> request<span class="token punctuation">.</span>credentials<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">destination</span><span class="token operator">:</span> request<span class="token punctuation">.</span>destination<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">integrity</span><span class="token operator">:</span> request<span class="token punctuation">.</span>integrity<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">redirect</span><span class="token operator">:</span> request<span class="token punctuation">.</span>redirect<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">referrer</span><span class="token operator">:</span> request<span class="token punctuation">.</span>referrer<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">referrerPolicy</span><span class="token operator">:</span> request<span class="token punctuation">.</span>referrerPolicy<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">body</span><span class="token operator">:</span> requestBuffer<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">keepalive</span><span class="token operator">:</span> request<span class="token punctuation">.</span>keepalive<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>requestBuffer<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// 根據 main client 端回傳的 message 決定是 intercept 或 passthrough</span></span>
<span class="line">  <span class="token comment">// respondWithMock 會實際產生一個 HTTP Response object 並丟回給發出請求的 client</span></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>clientMessage<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;MOCK_RESPONSE&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">respondWithMock</span><span class="token punctuation">(</span>clientMessage<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;MOCK_NOT_FOUND&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">passthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">passthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 透過 MessageChannel 與 client 端進行 sync 雙向溝通</span></span>
<span class="line"><span class="token comment">// 把 port2 丟給 client，讓 client 可透過 port2 與 port1(當前 worker) 溝通</span></span>
<span class="line"><span class="token comment">// 透過 MessageChannel 可以藉由 promise 讓 function 等待 client 回傳結果</span></span>
<span class="line"><span class="token comment">// 而不是讓 client 透過 postMessage 回傳，因為 postMessage 無法讓 worker 直接 await 等待結果</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sendToClient</span><span class="token punctuation">(</span><span class="token parameter">client<span class="token punctuation">,</span> message<span class="token punctuation">,</span> transferrables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    channel<span class="token punctuation">.</span>port1<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>error<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">resolve</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    client<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span></span>
<span class="line">      message<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">[</span>channel<span class="token punctuation">.</span>port2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>transferrables<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">respondWithMock</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Setting response status code to 0 is a no-op.</span></span>
<span class="line">  <span class="token comment">// However, when responding with a &quot;Response.error()&quot;, the produced Response</span></span>
<span class="line">  <span class="token comment">// instance will have status code set to 0. Since it&#39;s not possible to create</span></span>
<span class="line">  <span class="token comment">// a Response instance with status code 0, handle that use-case separately.</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">const</span> mockedResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">,</span> response<span class="token punctuation">)</span></span>
<span class="line">  Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>mockedResponse<span class="token punctuation">,</span> <span class="token constant">IS_MOCKED_RESPONSE</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> mockedResponse</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>這個檔案就是在前面透過 msw cli 產生的 service worker，其主要作用是處理整個 service worker 的初始化與後續 message, fetch 請求的攔截，在收到 client 端發來的請求時，透過 MessageChannel 與 main client 溝通獲得對應的 response message content，最後再傳回給 client</p><h2 id="setupworker-ts" tabindex="-1"><a class="header-anchor" href="#setupworker-ts"><span>setupWorker.ts</span></a></h2><ul><li><a href="https://github.com/mswjs/msw/blob/main/src/browser/setupWorker/setupWorker.ts" target="_blank" rel="noopener noreferrer">File</a></li></ul><p>這個檔案是在 client 初始化整個 service worker 的入口，可以找到這個 <code>start</code> method</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SetupWorkerApi</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 省略一大坨...</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token function">createWorkerContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SetupWorkerInternalContext <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> context<span class="token operator">:</span> SetupWorkerInternalContext <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 省略一大坨...</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>startHandler <span class="token operator">=</span> context<span class="token punctuation">.</span>supports<span class="token punctuation">.</span>serviceWorkerApi</span>
<span class="line">      <span class="token operator">?</span> <span class="token function">createFallbackStart</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token function">createStartHandler</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token comment">// 下一個關鍵入口在這～</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> context</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span>options<span class="token operator">:</span> StartOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> StartReturnType <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>startOptions <span class="token operator">=</span> <span class="token function">mergeRight</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token constant">DEFAULT_START_OPTIONS</span><span class="token punctuation">,</span></span>
<span class="line">      options<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token keyword">as</span> SetupWorkerInternalContext<span class="token punctuation">[</span><span class="token string">&#39;startOptions&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>startOptions<span class="token punctuation">,</span> options<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>透過這個 start method，循線找到 <code>createStartHandler</code></p><h3 id="createstarthandler-ts" tabindex="-1"><a class="header-anchor" href="#createstarthandler-ts"><span>createStartHandler.ts</span></a></h3><ul><li><a href="https://github.com/mswjs/msw/blob/main/src/browser/setupWorker/start/createStartHandler.ts" target="_blank" rel="noopener noreferrer">File</a></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> createStartHandler <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">  context<span class="token operator">:</span> SetupWorkerInternalContext<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> StartHandler <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> customOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 處理來自 service worker 名叫 \`REQUEST\` 的 message</span></span>
<span class="line">    <span class="token comment">// 這裡就對應上了上面的 getResponse 裡的 sendToClient &quot;REQUEST&quot;</span></span>
<span class="line">    context<span class="token punctuation">.</span>workerChannel<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token string">&#39;REQUEST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">createRequestListener</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 下一個關鍵入口在這～</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getWorkerInstance</span><span class="token punctuation">(</span></span>
<span class="line">      options<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span>url<span class="token punctuation">,</span></span>
<span class="line">      options<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span>options<span class="token punctuation">,</span></span>
<span class="line">      options<span class="token punctuation">.</span>findWorker<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>worker<span class="token punctuation">,</span> registration<span class="token punctuation">]</span> <span class="token operator">=</span> instance</span>
<span class="line">    context<span class="token punctuation">.</span>worker <span class="token operator">=</span> worker</span>
<span class="line">    context<span class="token punctuation">.</span>registration <span class="token operator">=</span> registration</span>
<span class="line"></span>
<span class="line">    context<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>worker<span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token string">&#39;redundant&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 通知 Service Worker 當前 client 將關閉</span></span>
<span class="line">        context<span class="token punctuation">.</span>workerChannel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;CLIENT_CLOSED&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 確保 keepAlive interval 關閉，避免 memory leaks</span></span>
<span class="line">      window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>keepAliveInterval<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 啟動 keepAlive interval</span></span>
<span class="line">    context<span class="token punctuation">.</span>keepAliveInterval <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span>workerChannel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;KEEPALIVE_REQUEST&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">5000</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>createStartHandler 主要會掛載處理 message <code>REQUEST</code>，並啟動 keepAlive 機制，接著進入到 <code>createRequestListener</code> 看看具體是怎麼處理 request 的吧</p><h3 id="createrequestlistener-ts" tabindex="-1"><a class="header-anchor" href="#createrequestlistener-ts"><span>createRequestListener.ts</span></a></h3><ul><li><a href="https://github.com/mswjs/msw/blob/main/src/browser/setupWorker/start/createRequestListener.ts" target="_blank" rel="noopener noreferrer">File</a></li><li><a href="https://github.com/mswjs/msw/blob/main/src/browser/setupWorker/start/utils/createMessageChannel.ts" target="_blank" rel="noopener noreferrer">class WorkerChannel</a></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createRequestListener</span> <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">  context<span class="token operator">:</span> SetupWorkerInternalContext<span class="token punctuation">,</span></span>
<span class="line">  options<span class="token operator">:</span> RequiredDeep<span class="token operator">&lt;</span>StartOptions<span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span></span>
<span class="line">    event<span class="token operator">:</span> MessageEvent<span class="token punctuation">,</span></span>
<span class="line">    message<span class="token operator">:</span> ServiceWorkerMessage<span class="token operator">&lt;</span></span>
<span class="line">      <span class="token string">&#39;REQUEST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      ServiceWorkerIncomingEventsMap<span class="token punctuation">[</span><span class="token string">&#39;REQUEST&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// WorkerChannel 為 msw 另外定義的一個 class ，傳入一個 port，可透過該 port 傳送 message 給對應的 port（這兩個 ports 是透過 MessageChannel 產生的一對 port）</span></span>
<span class="line">    <span class="token keyword">const</span> messageChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkerChannel</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>ports<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> requestId <span class="token operator">=</span> message<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>id</span>
<span class="line">    <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">parseWorkerRequest</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>payload<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> requestCloneForLogs <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 下一個進階入口在這～處理 request 並產生對應 response 丟回 onMockedResponse</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span></span>
<span class="line">        request<span class="token punctuation">,</span></span>
<span class="line">        requestId<span class="token punctuation">,</span></span>
<span class="line">        context<span class="token punctuation">.</span>requestHandlers<span class="token punctuation">,</span></span>
<span class="line">        options<span class="token punctuation">,</span></span>
<span class="line">        context<span class="token punctuation">.</span>emitter<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">async</span> <span class="token function">onMockedResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token punctuation">{</span> handler<span class="token punctuation">,</span> parsedResult <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 複製 mocked Response 讓 body 可被讀取為 buffer 並傳送給 worker</span></span>
<span class="line">            <span class="token keyword">const</span> responseClone <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">const</span> responseInit <span class="token operator">=</span> <span class="token function">toResponseInit</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token doc-comment comment">/**</span>
<span class="line">             * <span class="token keyword">@note</span> Safari doesn&#39;t support transferring a &quot;ReadableStream&quot;.</span>
<span class="line">             * Check that the browser supports that before sending it to the worker.</span>
<span class="line">             */</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>supports<span class="token punctuation">.</span>readableStreamTransfer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">const</span> responseStream <span class="token operator">=</span> response<span class="token punctuation">.</span>body</span>
<span class="line">              messageChannel<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&#39;MOCK_RESPONSE&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                  <span class="token operator">...</span>responseInit<span class="token punctuation">,</span></span>
<span class="line">                  body<span class="token operator">:</span> responseStream<span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                responseStream <span class="token operator">?</span> <span class="token punctuation">[</span>responseStream<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token comment">// As a fallback, send the response body buffer to the worker.</span></span>
<span class="line">              <span class="token keyword">const</span> responseBuffer <span class="token operator">=</span> <span class="token keyword">await</span> responseClone<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">              messageChannel<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;MOCK_RESPONSE&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token operator">...</span>responseInit<span class="token punctuation">,</span></span>
<span class="line">                body<span class="token operator">:</span> responseBuffer<span class="token punctuation">,</span></span>
<span class="line">              <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 處理任何未知錯誤</span></span>
<span class="line">        messageChannel<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;MOCK_RESPONSE&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">          status<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span></span>
<span class="line">          statusText<span class="token operator">:</span> <span class="token string">&#39;Request Handler Error&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          headers<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">          body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            name<span class="token operator">:</span> error<span class="token punctuation">.</span>name<span class="token punctuation">,</span></span>
<span class="line">            message<span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">,</span></span>
<span class="line">            stack<span class="token operator">:</span> error<span class="token punctuation">.</span>stack<span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>createRequestListener 主要會使用 worker 傳來的 payload 創建一個 Request object，接著透過 <code>handleRequest</code> 把 request 拿去比對取得對應的 response，最後再透過 messageChannel 把 response 傳遞回 worker，到此整個 msw 的 Service Worker 訊息交換機制算是理解完成了</p><h2 id="流程總結" tabindex="-1"><a class="header-anchor" href="#流程總結"><span>流程總結</span></a></h2><p>簡單總結下流程，整個訊息交換過程從 client 端開始</p><ul><li>client 發出 activate 請求，把自己註冊進 service worker 中</li><li>當某個 client 端發出 request 後，service worker 攔截請求並把 request 詳細資料傳回給 main client 同時帶著一個 MessageChannel 的 port2</li><li>main client 收到 service worker 傳送的 message <code>REQUEST</code> 後，在本地查找對應的 response</li><li>不論有無找到，最後 main client 都會將結果透過 MessageChannel 的 port2 把 response 內容傳回 service worker</li><li>service worker 收到 main client 的 response 內容，構建成一個 HTTP Response object 後傳回給發出請求的 client</li></ul>`,42)),e(a,{hashtags:"javascript,typescript,msw,serviceWorker,mock"}),n[2]||(n[2]=s("h2",{id:"感想",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#感想"},[s("span",null,"感想")])],-1)),n[3]||(n[3]=s("p",null,[p("這次心血來潮跑去閱讀 msw 關於 browser side 的 service worker 用法，真的是獲益良多，看完後甚至都可以（已經）直接自幹一個簡易版本的 msw 了...，除了 service worker 的一些特性外，最重要的是之前完全沒聽過 "),s("code",null,"MessageChannel"),p(" 這東西，透過這次學習總算學到了這東西，雖然不知道實際開發中還可以用在哪些地方，後續再來研究看看，能在日後的開發上實際使用上的場景")],-1)),n[4]||(n[4]=s("p",null,"那這次技術分享就到這拉，感謝各位的收看，如果喜歡我的分享文章也歡迎分享給更多人看看摟，下篇見拉，掰掰～=V=",-1))])}const v=t(u,[["render",r]]),m=JSON.parse('{"path":"/articles/js/learn-from-msw-source-code.html","title":"從 Mock Service Worker 源碼中學習","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1748788505000,"contributors":[{"name":"johnnywang","username":"johnnywang","email":"johnnywang@test.com","commits":1,"url":"https://github.com/johnnywang"},{"name":"Lindy Liao","username":"","email":"meiliao1207@gmail.com","commits":1}],"changelog":[{"hash":"f01bfa128b4d33fbeddb8abb1697b5391b273d28","time":1748788505000,"email":"meiliao1207@gmail.com","author":"Lindy Liao","message":"UPD"},{"hash":"c10c9e5bebab4d27b353873b9079afaf0b99a153","time":1698141955000,"email":"johnnywang@test.com","author":"johnnywang","message":"✨ msw source code read","tag":"v1.0.2"}]},"filePathRelative":"articles/js/learn-from-msw-source-code.md"}');export{v as comp,m as data};
