import{_ as s,c as a,d as e,o as t}from"./app-DjGzEHQz.js";const p={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="react-18-concurrent-features-memo" tabindex="-1"><a class="header-anchor" href="#react-18-concurrent-features-memo"><span>React 18 - Concurrent Features Memo</span></a></h1><p>這篇是我在學習 React 18 的 Concurrent Features 過程中一些筆記的紀錄，供日後複習或是快速查看參考用~</p><h2 id="key-features" tabindex="-1"><a class="header-anchor" href="#key-features"><span>Key Features</span></a></h2><h3 id="auto-batching" tabindex="-1"><a class="header-anchor" href="#auto-batching"><span>Auto Batching</span></a></h3><p>批次處理，雖然 v16 時就有相關功能，但對於像 timeouts, promises, native event handlers 等非 React 事件是不會處理的，但在 v18 後不論在哪，都會自動合併(實測發現 v17 時，下面範例就已經有合併了)</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;in&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;out&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Hello World<span class="token punctuation">,</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// after 0</span></span>
<span class="line"><span class="token comment">// out 1</span></span>
<span class="line"><span class="token comment">// in 0</span></span>
<span class="line"><span class="token comment">// out 1</span></span>
<span class="line"><span class="token comment">// in 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>針對特殊場景 v18 後可使用 <code>React.flushSync</code> 進行同步取值，其原理主要就是依靠<code>React事件優先級</code>的設定來調配</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">ReactDOM<span class="token punctuation">.</span><span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> count <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transition" tabindex="-1"><a class="header-anchor" href="#transition"><span>Transition</span></a></h3><p>這個 Transition 要注意不是 Vuejs 裡的那個，而是針對耗時阻塞的結果進行特別處理，讓真正重要緊急的畫面更新優先的一個機制，實現的原理也是進行優先級的定義，在 <code>startTransition</code> 時會將優先級調低，確保其中的任務以較低的優先級更新，而 <code>useTransition</code> 則是以 <code>useState</code>, <code>startTransition</code> 維護一個 <code>isPending</code> 狀態，並以普通、transition 兩種優先級調用 <code>setPending</code>，確保了 isPending 會在 startTransition 內部工作結束後才更新為 false。</p><p>詳細可<a href="https://juejin.cn/post/7095185674151821348#heading-6" target="_blank" rel="noopener noreferrer">參考這篇講解</a></p><h4 id="starttransition" tabindex="-1"><a class="header-anchor" href="#starttransition"><span>startTransition</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> startTransition <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Urgent</span></span>
<span class="line"><span class="token function">setSliderValue</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Mark any state updates inside as transitions</span></span>
<span class="line"><span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Transition: Show the results</span></span>
<span class="line">  <span class="token function">setGraphValue</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="usetransition" tabindex="-1"><a class="header-anchor" href="#usetransition"><span>useTransition</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useTransition <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>isPending<span class="token punctuation">,</span> startTransition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> isPending <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Spinner <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>與傳統 <code>setTimeout / throttle / debounce</code> 優化的區別如下</p><ul><li>執行時機<br><code>setTimout/throttle/debounce</code> 均為異步執行，而transition為<code>同步執行</code>，因此會比他們更早的觸發更新調度，在性能較好時可能在同一幀完成更新，而這種情況在比如throttle中被強制拉大，比如100ms</li><li>交互體驗<br> 不管是延遲還是減頻，當真正觸發更新，如果渲染時間比較久，依然會發生界面卡頓，而通過transition觸發的更新並不會阻塞用戶界面，能夠一直保持響應</li><li>精確控制<br> 需要額外實現loading控制，而且往往不夠精確，現在transition內部會為我們自動維護這個loading狀態，並且足夠精確</li></ul><h4 id="usedeferredvalue" tabindex="-1"><a class="header-anchor" href="#usedeferredvalue"><span>useDeferredValue</span></a></h4><p>透過 <code>useTransition</code> 我們可以標記優先級低的更新動作，但如果具體不確定會怎麼更新狀態，則可以在最一開始定義狀態時就透過 <code>useDeferredValue</code> 標記他</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useDeferredValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">Comp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> graphValue <span class="token operator">=</span> <span class="token function">useDeferredValue</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ...updating depends on graphValue</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="root-api" tabindex="-1"><a class="header-anchor" href="#root-api"><span>Root API</span></a></h3><p>初始化的部分 v18 開始有了改動如下</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOMClient <span class="token keyword">from</span> <span class="token string">&#39;react-dom/client&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a root.</span></span>
<span class="line"><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOMClient<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Initial render: Render an element to the root.</span></span>
<span class="line">root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23)]))}const l=s(p,[["render",o]]),u=JSON.parse('{"path":"/articles/memo/react/react18-concurrent-memo.html","title":"React 18 - Concurrent Features Memo","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1652101704000,"contributors":[{"name":"johnnywang","username":"johnnywang","email":"johnny29621189@kimo.com","commits":1,"url":"https://github.com/johnnywang"}],"changelog":[{"hash":"d4e89fc61a13ed2730ab7af45311e952594cccdf","time":1652101704000,"email":"johnny29621189@kimo.com","author":"johnnywang","message":"UPD: add babel7-decorator-issue"}]},"filePathRelative":"articles/memo/react/react18-concurrent-memo.md"}');export{l as comp,u as data};
