import{_ as e,c as t,b as s,a as p,d as c,o as l,r as o}from"./app-RvPLl2RM.js";const i={};function u(r,n){const a=o("SocialBlock");return l(),t("div",null,[n[0]||(n[0]=s("h1",{id:"es2022-學習筆記",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#es2022-學習筆記"},[s("span",null,"ES2022 學習筆記")])],-1)),p(a,{hashtags:"javascript,es2022"}),n[1]||(n[1]=c(`<p>隨著時間推進，ES 規範也在不斷推陳出新，本篇紀錄 ES2022 的幾個值得使用的新語法～（有些其實去年就已經可以使用了！！）</p><h2 id="introduce" tabindex="-1"><a class="header-anchor" href="#introduce"><span>Introduce</span></a></h2><h3 id="top-level-await" tabindex="-1"><a class="header-anchor" href="#top-level-await"><span>Top-level await</span></a></h3><ul><li><a href="https://github.com/tc39/proposal-top-level-await" target="_blank" rel="noopener noreferrer">Proposal Link</a></li></ul><p>以往在全局環境並不支援使用 await，ES2022 後在瀏覽器端使用 esmodule 時，將可在 top level 使用 await 語法，需要注意使用 top level await 會讓依賴的 module 等待其執行完畢，使用時要特別小心</p><p>下面範例我們在 esmodule 中的 <code>index.js</code> 引入 <code>a.js</code>，並在 <code>import</code> 行為的前後 print</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// a.js</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// top level await</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;done&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// index.js</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start loading moduleA&#39;</span><span class="token punctuation">,</span> moduleA<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> moduleA <span class="token keyword">from</span> <span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;moduleA imported&#39;</span><span class="token punctuation">,</span> moduleA<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最終執行的順序會如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// wait 4 seconds</span></span>
<span class="line"><span class="token comment">// start loading moduleA done</span></span>
<span class="line"><span class="token comment">// moduleA imported done</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>儘管我們在 <code>import</code> 前使用 console 並引用 moduleA 變數，實際執行時，<code>import</code> 動作會優先處理依賴，若引入的模組具有 top level await 時，也導致 <code>index.js</code> 發生執行延遲，這是使用上必須要特別注意的！！</p><p>實測在最新 chrome 已經可以使用，可以看到若不是在 <code>esmodule</code> 使用 top level await 會噴錯： <code>Uncaught SyntaxError: await is only valid in async functions and the top level bodies of modules</code></p><h3 id="array-at" tabindex="-1"><a class="header-anchor" href="#array-at"><span>Array.at()</span></a></h3><ul><li><a href="https://github.com/tc39/proposal-relative-indexing-method" target="_blank" rel="noopener noreferrer">Proposal Link</a></li></ul><p>一直以來在 js 中若要取得最後一個元素我們會使用 <code>arr[arr.length - 1]</code> 這種方式，既不直覺，又不香，常常看著隔壁 python 垂涎，但因為 js 的 <code>[]</code> 語法也同時用在 object keys 檢索上，貼心的團隊便給了一個 <code>at()</code> 方法讓我們也可以香噴噴的拿到最後一個元素了，實測最新 chrome 也已支援</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="object-hasown" tabindex="-1"><a class="header-anchor" href="#object-hasown"><span>Object.hasOwn</span></a></h3><ul><li><a href="https://github.com/tc39/proposal-accessible-object-hasownproperty" target="_blank" rel="noopener noreferrer">Proposal Link</a></li></ul><p><code>Object.prototype.hasOwnProperty</code> 一直以來被人詬病名子太長不好使用，新的語法將可直接從 <code>Object</code> 中使用 <code>hasOwn</code> 調用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="error-cause" tabindex="-1"><a class="header-anchor" href="#error-cause"><span>Error Cause</span></a></h3><ul><li><a href="https://github.com/tc39/proposal-error-cause" target="_blank" rel="noopener noreferrer">Proposal Link</a></li></ul><p>錯誤處理非常重要，但有時我們的客製化錯誤處理會導致資訊傳遞失真而難以排查真實錯誤訊息，常見錯誤處理方式如下</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// x 不存在</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">c</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">myJob</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// throw err; // 真實錯誤</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&#39;something wrong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拋出客製化錯誤</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">myJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我們會在函數中包裹 try catch 處理未知錯誤，並返回客製化的訊息，但這麼做卻會導致原本的錯誤層級失真如下</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 真實的錯誤</span></span>
<span class="line"><span class="token literal-property property">ReferenceError</span><span class="token operator">:</span> x is not defined</span>
<span class="line">  at <span class="token function">a</span> <span class="token punctuation">(</span>xxxx<span class="token punctuation">)</span></span>
<span class="line">  at <span class="token function">b</span> <span class="token punctuation">(</span>xxxx<span class="token punctuation">)</span></span>
<span class="line">  at <span class="token function">c</span> <span class="token punctuation">(</span>xxxx<span class="token punctuation">)</span></span>
<span class="line">  at <span class="token function">myJob</span> <span class="token punctuation">(</span>xxxx<span class="token punctuation">)</span></span>
<span class="line">  at xxxx</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 客製化錯誤</span></span>
<span class="line"><span class="token literal-property property">Error</span><span class="token operator">:</span> something wrong<span class="token operator">!</span></span>
<span class="line">  at <span class="token function">myJob</span> <span class="token punctuation">(</span>xxxx<span class="token punctuation">)</span></span>
<span class="line">  at xxxx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>實際發生錯誤的位置是在 <code>a</code> 方法中，但我們的客製化錯誤導致在他之前的訊息被截斷，從而可能導致排查錯誤困難，也因此我們會實作如下的方式去保留原始錯誤方便除錯</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">myJob</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> myError <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;something wrong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    myError<span class="token punctuation">.</span>cause <span class="token operator">=</span> err<span class="token punctuation">;</span> <span class="token comment">// 保留真實錯誤</span></span>
<span class="line">    <span class="token keyword">throw</span> myError<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">myJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取得客製化錯誤</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取得真實錯誤</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但這麼做還是很多餘，總不能每次處理都要多寫這些，新的提案讓我們能方便快速的做這件事，只需要在 ErrorConstructor 中提供 <code>{ cause: err }</code> 就行，方便又美觀～</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">myJob</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&#39;something wrong!&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">cause</span><span class="token operator">:</span> err <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="class-private-declarations" tabindex="-1"><a class="header-anchor" href="#class-private-declarations"><span>Class Private Declarations</span></a></h3><ul><li><a href="https://github.com/tc39/proposal-private-declarations" target="_blank" rel="noopener noreferrer">Proposal Link</a></li></ul><p>雖然在 Typescript 中已經有 <code>private</code> 語法讓我們能替類別定義私有屬性、方法，在 pure js 當中卻一直沒有一種原生方式做到這件事，但在新的提案中，我們可以透過使用 <code>#</code> 開頭標記我們的私有屬性、方法</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">  #name <span class="token operator">=</span> <span class="token string">&#39;MyClass&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">#init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">#init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;init in private&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 拿來做類型檢查也很方便</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> #name <span class="token keyword">in</span> obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>#name <span class="token operator">===</span> <span class="token string">&#39;MyClass&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> myInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myInstance<span class="token punctuation">.</span>#a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Uncaught SyntaxError: Private field &#39;#a&#39; must be declared in an enclosing class (at xxxx)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myInstance<span class="token punctuation">.</span><span class="token function">#init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Uncaught SyntaxError: Private field &#39;#init&#39; must be declared in an enclosing class (at xxxx)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>myInstance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="class-static-block" tabindex="-1"><a class="header-anchor" href="#class-static-block"><span>Class Static Block</span></a></h3><ul><li><a href="https://github.com/tc39/proposal-class-static-block" target="_blank" rel="noopener noreferrer">Proposal Link</a></li></ul><p>目前的 <code>static</code> 語法僅可用作單一靜態屬性、方法的定義上，若靜態屬性彼此關聯依賴時，必須拉到 class 外部進行定義，如下面這種方式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// without static blocks:</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> x <span class="token operator">=</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">static</span> y<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">static</span> z<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">doSomethingWith</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token constant">C</span><span class="token punctuation">.</span>y <span class="token operator">=</span> obj<span class="token punctuation">.</span>y</span>
<span class="line">  <span class="token constant">C</span><span class="token punctuation">.</span>z <span class="token operator">=</span> obj<span class="token punctuation">.</span>z<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">C</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token constant">C</span><span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用新的提案 <code>static block</code> 靜態區塊的話，我們可以在一個區塊中進行相關操作，這些靜態區塊也同樣只會執行一次</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> x <span class="token operator">=</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">static</span> y<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">static</span> z<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">doSomethingWith</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> obj<span class="token punctuation">.</span>y<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>z <span class="token operator">=</span> obj<span class="token punctuation">.</span>z<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此語法也適用常見的靜態屬性方法獲取私有屬性場景</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">  #count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> obj<span class="token punctuation">.</span>#count<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> myClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span>myClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>這個新語法也讓我們能將上面這種需求改寫如下面這樣</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> getCount<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">  #count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">getCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> obj<span class="token punctuation">.</span>#count<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> myClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getCount</span><span class="token punctuation">(</span>myClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>感謝大家收看，下次再見拉～</p>`,45)),p(a,{hashtags:"javascript,es2022"})])}const k=e(i,[["render",u],["__file","es2022.html.vue"]]),v=JSON.parse('{"path":"/articles/memo/js/es2022.html","title":"ES2022 學習筆記","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"Introduce","slug":"introduce","link":"#introduce","children":[{"level":3,"title":"Top-level await","slug":"top-level-await","link":"#top-level-await","children":[]},{"level":3,"title":"Array.at()","slug":"array-at","link":"#array-at","children":[]},{"level":3,"title":"Object.hasOwn","slug":"object-hasown","link":"#object-hasown","children":[]},{"level":3,"title":"Error Cause","slug":"error-cause","link":"#error-cause","children":[]},{"level":3,"title":"Class Private Declarations","slug":"class-private-declarations","link":"#class-private-declarations","children":[]},{"level":3,"title":"Class Static Block","slug":"class-static-block","link":"#class-static-block","children":[]}]}],"git":{"updatedTime":1659165243000,"contributors":[{"name":"JohnnyWang","email":"johnnywang@test.com","commits":1,"url":"https://github.com/JohnnyWang"}]},"filePathRelative":"articles/memo/js/es2022.md"}');export{k as comp,v as data};
