import{_ as r,r as n,o as l,c as o,d as e,e as t,a,f as s}from"./app-6ffe09b2.js";const d={},h=e("h1",{id:"git-版本控制",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git-版本控制","aria-hidden":"true"},"#"),t(" Git 版本控制")],-1),c=e("p",null,"紀錄學習 git 的筆記跟一些使用想法。",-1),p=e("h2",{id:"推薦學習資源",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#推薦學習資源","aria-hidden":"true"},"#"),t(" 推薦學習資源")],-1),g={href:"https://docs.github.com/en/get-started/getting-started-with-git",target:"_blank",rel:"noopener noreferrer"},u={href:"https://docs.github.com/en/get-started/using-git",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/doggy8088/Learn-Git-in-30-days",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/post/7071780876501123085",target:"_blank",rel:"noopener noreferrer"},m=s('<h2 id="基礎概念-unstaged-staged" tabindex="-1"><a class="header-anchor" href="#基礎概念-unstaged-staged" aria-hidden="true">#</a> 基礎概念 - unstaged, staged</h2><h3 id="git-是什麼" tabindex="-1"><a class="header-anchor" href="#git-是什麼" aria-hidden="true">#</a> Git 是什麼</h3><p>一種非集中式版本控制的工具，Git 記錄檔案快照，而不是差異，大部份的操作皆可在本地端完成，且通常只增加資料。</p><h3 id="三種狀態" tabindex="-1"><a class="header-anchor" href="#三種狀態" aria-hidden="true">#</a> 三種狀態</h3><p>Git 會把你的檔案標記為三種主要的狀態：已提交（committed）、已修改（modified）及已預存（staged）</p><ul><li><p>已提交：代表這檔案己安全地存在你的本地端資料庫。</p></li><li><p>己修改：代表這檔案已被修改但尚未提交到本地端資料庫。</p></li><li><p>已預存：代表這檔案將會被存到下次你提交的快照中。</p></li></ul><h3 id="git-工作流程" tabindex="-1"><a class="header-anchor" href="#git-工作流程" aria-hidden="true">#</a> Git 工作流程</h3><ol><li><p>你在你工作目錄修改檔案。(已修改)</p></li><li><p>預存檔案，將檔案的快照新增到預存區。(add 加入預存，已預存)</p></li><li><p>做提交的動作，這會讓存在預存區的檔案快照永久地儲存在 Git 目錄中。(commit 提交修改，已提交)</p></li></ol><h2 id="相關概念" tabindex="-1"><a class="header-anchor" href="#相關概念" aria-hidden="true">#</a> 相關概念</h2><ol><li>Git分支模型中存在兩個主分支，Master, Develop</li></ol><ul><li><p>master：</p><p>Git 中默認的主分支。在 Git 分支開發模型中，master 分支的 HEAD 節點始終處於“準備好進行生產的狀態”，即 master 分支的 HEAD 節點所指向的版本始終是可以用於生產環境的正式版本。當其他分支的代碼版本合併到 master 分支時（隨後打上版本標籤），通常意味著一個新的正式版本已經發布。</p></li><li><p>develop：</p><p>HEAD 節點總是指向下一個待發布版本的最新變化。 develop 分支的版本變更通常來源於輔助分支的合併，因此 develop 分支也常被稱為“整合分支”。當 develop 分支達到某一穩定點，可進行新版本的發佈時，develop 分支上的所有變更應該被合併到 master 分支並打上tag標籤</p></li></ul><ol start="2"><li><p>多 commit，少 push，push 太頻繁容易造成 conflict，少 merge。</p></li><li><p>推薦使用 Git Flow</p></li><li><p>多使用分支，保持主分支的整潔，</p></li></ol>',12);function G(b,x){const i=n("ExternalLinkIcon");return l(),o("div",null,[h,c,p,e("ul",null,[e("li",null,[e("a",g,[t("GitHub-Getting started with Git"),a(i)])]),e("li",null,[e("a",u,[t("GitHub-Using Git"),a(i)])]),e("li",null,[e("a",_,[t("Learn-Git-in-30-days"),a(i)])]),e("li",null,[e("a",f,[t("Stash-CherryPick"),a(i)])])]),m])}const v=r(d,[["render",G],["__file","what-is-git.html.vue"]]);export{v as default};
