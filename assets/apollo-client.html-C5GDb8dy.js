import{_ as s,c as a,d as e,o as p}from"./app-DSxi0WCQ.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="apollo-client-學習使用筆記" tabindex="-1"><a class="header-anchor" href="#apollo-client-學習使用筆記"><span>Apollo Client 學習使用筆記</span></a></h1><p>本篇是學習基礎 Apollo Client 時的部分筆記，同樣僅記錄特定我覺得很重要的部分，會根據我實際使用狀況持續增補內容，不會把所有基礎內容都紀錄在這</p><ul><li><a href="https://www.apollographql.com/docs/react/" target="_blank" rel="noopener noreferrer">Apollo Client</a></li></ul><h2 id="fetch-policy" tabindex="-1"><a class="header-anchor" href="#fetch-policy"><span>Fetch Policy</span></a></h2><ul><li><a href="https://www.apollographql.com/docs/react/data/queries/#supported-fetch-policies" target="_blank" rel="noopener noreferrer">Supported fetch policies</a> 預設 Query 使用的 cache 政策是 <code>cache-first</code>，當請求時會先檢查本地 cache，如果存在則直接返回，而不進行 network request，也可以使用 <code>nextFetchPolicy</code> 設定第二次後請求的 cache 政策，如下範例總是在第一次時實際進行 network request，並在之後以 cache 返回為主</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token constant">GET_DOGS</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">fetchPolicy</span><span class="token operator">:</span> <span class="token string">&#39;network-only&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Used for first execution</span></span>
<span class="line">  <span class="token literal-property property">nextFetchPolicy</span><span class="token operator">:</span> <span class="token string">&#39;cache-first&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Used for subsequent executions</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>詳細使用可參考<a href="https://www.apollographql.com/docs/react/data/queries#nextfetchpolicy" target="_blank" rel="noopener noreferrer">nextFetchPolicy</a></p><h2 id="update-local-data" tabindex="-1"><a class="header-anchor" href="#update-local-data"><span>Update Local Data</span></a></h2><ul><li><a href="https://www.apollographql.com/docs/react/data/mutations#updating-local-data" target="_blank" rel="noopener noreferrer">Link</a></li></ul><h3 id="refetching-query" tabindex="-1"><a class="header-anchor" href="#refetching-query"><span>refetching query</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Refetches two queries after mutation completes</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>addTodo<span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token constant">ADD_TODO</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">refetchQueries</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token constant">GET_POST</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// DocumentNode object parsed with gql</span></span>
<span class="line">    <span class="token string">&#39;GetComments&#39;</span> <span class="token comment">// Query name</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="updating-cache-directly" tabindex="-1"><a class="header-anchor" href="#updating-cache-directly"><span>updating cache directly</span></a></h3><p>include the result from mutation response, <code>cache</code> object includes <code>readQuery/writeQuery</code>, <code>readFragment/writeFragment</code>, <code>modify</code>, and <code>evict</code> method</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>addTodo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token constant">ADD_TODO</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">cache<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> addTodo <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cache<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">fields</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">todos</span><span class="token punctuation">(</span><span class="token parameter">existingTodos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">const</span> newTodoRef <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">writeFragment</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">data</span><span class="token operator">:</span> addTodo<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">fragment</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">              fragment NewTodo on Todo {</span>
<span class="line">                id</span>
<span class="line">                type</span>
<span class="line">              }</span>
<span class="line">            </span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>existingTodos<span class="token punctuation">,</span> newTodoRef<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fragments" tabindex="-1"><a class="header-anchor" href="#fragments"><span>Fragments</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">fragment NameParts on Person <span class="token punctuation">{</span></span>
<span class="line">  title</span>
<span class="line">  firstName</span>
<span class="line">  middleName</span>
<span class="line">  lastName</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inline-fragments-with-unions-interfaces" tabindex="-1"><a class="header-anchor" href="#inline-fragments-with-unions-interfaces"><span>inline fragments with Unions Interfaces</span></a></h3><p>相關筆記已記錄在 <code>graphql/advance</code> 內</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">query AllCharacters <span class="token punctuation">{</span></span>
<span class="line">  all_characters <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token operator">...</span> on Character <span class="token punctuation">{</span></span>
<span class="line">      name</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token operator">...</span> on Jedi <span class="token punctuation">{</span></span>
<span class="line">      side</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token operator">...</span> on Droid <span class="token punctuation">{</span></span>
<span class="line">      model</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="possibletypes" tabindex="-1"><a class="header-anchor" href="#possibletypes"><span>possibleTypes</span></a></h3><ul><li><p><a href="https://www.apollographql.com/docs/react/data/fragments#defining-possibletypes-manually" target="_blank" rel="noopener noreferrer">Link</a></p></li><li><p>手動定義</p></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">possibleTypes</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">Character</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Jedi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Droid&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">Test</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;PassingTest&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;FailingTest&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SkippedTest&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">Snake</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Viper&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://www.apollographql.com/docs/react/data/fragments#generating-possibletypes-automatically" target="_blank" rel="noopener noreferrer">自動產生</a></li></ul><h2 id="graphql-query-best-practices" tabindex="-1"><a class="header-anchor" href="#graphql-query-best-practices"><span>GraphQL query best practices</span></a></h2><ul><li><p><a href="https://www.apollographql.com/docs/react/data/operation-best-practices" target="_blank" rel="noopener noreferrer">Link</a></p></li><li><p>Name all operations: 命名所有 query, mutation 操作</p></li><li><p>Provide variable as arguments: 提供變數作為參數，推薦使用 <code>$input</code> 包裹所有參數</p></li><li><p>Get data only when/where you need: 只拿你需要用到的資料，發揮 GraphQL 優勢-<a href="https://www.apollographql.com/docs/intro/benefits/#graphql-provides-declarative-efficient-data-fetching" target="_blank" rel="noopener noreferrer">declarative data fetching</a></p></li><li><p>Use fragments: 使用 fragments 封裝相似欄位字段，但避免過度濫用</p></li><li><p>Query separately: 分開 query 全域資料及 user 相關資料，讓 GraphQL 能有效進行獨立 cache 作業，提升效能（千萬別在同一個 query 裡拿一堆不同 type 的東西）</p></li><li><p>Add <code>name</code>, <code>version</code> in client: 在 ApolloClient 初始化時提供 name, version 提升偵錯的效率</p></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">uri</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:4000/graphql&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;MarketingSite&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&#39;1.2&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cache" tabindex="-1"><a class="header-anchor" href="#cache"><span>Cache</span></a></h2><ul><li><a href="https://www.apollographql.com/docs/react/caching/overview" target="_blank" rel="noopener noreferrer">Link</a></li></ul><h3 id="typepolicies" tabindex="-1"><a class="header-anchor" href="#typepolicies"><span>typePolicies</span></a></h3><ul><li><a href="https://www.apollographql.com/docs/react/caching/cache-configuration#customizing-cache-ids" target="_blank" rel="noopener noreferrer">Custom Cache id</a></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> makeVar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@apollo/client&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> doneVar <span class="token operator">=</span> makeVar<span class="token operator">&lt;</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">typePolicies</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">Product</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// In an inventory management system, products might be identified</span></span>
<span class="line">      <span class="token comment">// by their UPC.</span></span>
<span class="line">      <span class="token literal-property property">keyFields</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;upc&quot;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">Todo</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// custom behavior by field name</span></span>
<span class="line">      <span class="token comment">// eg. 可以用客製化的 cache 機制製作 client only 的欄位，並在 query 時標註獲取</span></span>
<span class="line">      <span class="token literal-property property">fields</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">isDone</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">read</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> <span class="token punctuation">{</span> readField <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> objectId <span class="token operator">=</span> <span class="token function">readField</span><span class="token punctuation">(</span><span class="token string">&#39;objectId&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> string<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">const</span> doneList <span class="token operator">=</span> <span class="token function">doneVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> doneList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>objectId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>query 獲取 client only 欄位，詳情可參考 <a href="https://www.apollographql.com/docs/react/local-state/managing-state-with-field-policies/" target="_blank" rel="noopener noreferrer">Local Only Field</a></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> todoItem <span class="token operator">=</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">  fragment TodoItem on Todo {</span>
<span class="line">    objectId</span>
<span class="line">    title</span>
<span class="line">    content</span>
<span class="line">    isDone @client</span>
<span class="line">  }</span>
<span class="line"></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="read-write-interaction" tabindex="-1"><a class="header-anchor" href="#read-write-interaction"><span>Read/Write Interaction</span></a></h3><ul><li><a href="https://www.apollographql.com/docs/react/caching/cache-interaction" target="_blank" rel="noopener noreferrer">Link</a></li></ul><h4 id="read-all-caches" tabindex="-1"><a class="header-anchor" href="#read-all-caches"><span>Read All Caches</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useApolloClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@apollo/client&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">useApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> serializedState <span class="token operator">=</span> client<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>serializedState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="read-write-query-cache" tabindex="-1"><a class="header-anchor" href="#read-write-query-cache"><span>Read/Write Query Cache</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// Fetch the cached to-do item with ID 5</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> todo <span class="token punctuation">}</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">readQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">query</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    query ReadTodo($id: ID!) {</span>
<span class="line">      todo(id: $id) {</span>
<span class="line">        id</span>
<span class="line">        text</span>
<span class="line">        completed</span>
<span class="line">      }</span>
<span class="line">    }</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">variables</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// Provide any required variables here.  Variables of mismatched types will return \`null\`.</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">client<span class="token punctuation">.</span><span class="token function">writeQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">query</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    query WriteTodo($id: Int!) {</span>
<span class="line">      todo(id: $id) {</span>
<span class="line">        id</span>
<span class="line">        text</span>
<span class="line">        completed</span>
<span class="line">      }</span>
<span class="line">    }</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">variables</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// Contains the data to write</span></span>
<span class="line">    <span class="token literal-property property">todo</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">__typename</span><span class="token operator">:</span> <span class="token string">&#39;Todo&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;Buy grapes 🍇&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Apollo Client 會自動 queries 每個物件的 __typename, 即使你沒有提供在 query 請求中，切記 <code>不要直接修改返回的對象</code>，如果有需要更新 cache，請參考<a href="https://www.apollographql.com/docs/react/caching/cache-interaction#combining-reads-and-writes" target="_blank" rel="noopener noreferrer">Combining reads and writes</a></p></blockquote><p>當使用 <code>writeQuery</code> 時，注意以下提示：</p><ul><li>任何使用 <code>writeQuery</code> 對 cache 資料的改動不會同步到 GraphQL server，重新整理後就會消失</li><li>query 的 shape 不需要跟 GraphQL server 的 schema 相同，可以包含不在 schema 中的欄位</li></ul><h4 id="read-write-fragments" tabindex="-1"><a class="header-anchor" href="#read-write-fragments"><span>Read/Write Fragments</span></a></h4><ul><li>id: <code>&lt;__typename&gt;:&lt;id&gt;</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> todo <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">readFragment</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;Todo:5&#39;</span><span class="token punctuation">,</span> <span class="token comment">// The value of the to-do item&#39;s cache ID</span></span>
<span class="line">  <span class="token literal-property property">fragment</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    fragment MyTodo on Todo {</span>
<span class="line">      id</span>
<span class="line">      text</span>
<span class="line">      completed</span>
<span class="line">    }</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">client<span class="token punctuation">.</span><span class="token function">writeFragment</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;Todo:5&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">fragment</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    fragment MyTodo on Todo {</span>
<span class="line">      completed</span>
<span class="line">    }</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="update-query-cache" tabindex="-1"><a class="header-anchor" href="#update-query-cache"><span>Update Query Cache</span></a></h4><ul><li><a href="https://www.apollographql.com/docs/react/caching/cache-interaction#using-updatequery-and-updatefragment" target="_blank" rel="noopener noreferrer">Link</a> use <code>updateQuery</code>, <code>updateFragment</code> to combine usage with <code>read/write</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> query <span class="token operator">=</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">  query MyTodoAppQuery {</span>
<span class="line">    todos {</span>
<span class="line">      id</span>
<span class="line">      text</span>
<span class="line">      completed</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line"></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Set all todos in the cache as completed</span></span>
<span class="line">cache<span class="token punctuation">.</span><span class="token function">updateQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span> query <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">todos</span><span class="token operator">:</span> data<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>todo<span class="token punctuation">,</span> <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48)]))}const o=s(t,[["render",l]]),r=JSON.parse('{"path":"/articles/memo/graphql/apollo-client.html","title":"Apollo Client 學習使用筆記","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1659156892000,"contributors":[{"name":"JohnnyWang","username":"JohnnyWang","email":"johnnywang@test.com","commits":4,"url":"https://github.com/JohnnyWang"}],"changelog":[{"hash":"28b405a579026b66500f99e1b33a7e5dce48deff","time":1659156892000,"email":"johnnywang@test.com","author":"JohnnyWang","message":"UPD"},{"hash":"317e3ba2fcf702d2e69f3f2410d930ac415d7629","time":1658746476000,"email":"johnnywang@test.com","author":"JohnnyWang","message":"UPD: deploy blog"},{"hash":"9f6600a7f4a00cc8e265102e3cdabf396026c30b","time":1657293012000,"email":"johnnywang@test.com","author":"JohnnyWang","message":"UPD: update docs"},{"hash":"1666fd3a807f40bdef49857d879ceab5ac1468e2","time":1656686292000,"email":"johnnywang@test.com","author":"JohnnyWang","message":"UPD: update learning"}]},"filePathRelative":"articles/memo/graphql/apollo-client.md"}');export{o as comp,r as data};
