import{_ as p,r as o,o as c,c as i,d as n,e as s,a as e,f as t}from"./app-6147e6e2.js";const l={},u=t(`<h1 id="parse-javascript-文檔閱讀筆記" tabindex="-1"><a class="header-anchor" href="#parse-javascript-文檔閱讀筆記" aria-hidden="true">#</a> Parse Javascript 文檔閱讀筆記</h1><p>這是一系列閱讀 <code>Parse Javascript</code>, <code>Parse Cloud</code>, <code>Parse Server</code> 的一系列學習筆記，作為學習的紀錄與複習使用，也歡迎有興趣的朋友們看看摟，內容並不會包含所有文檔，主要都是我自己閱讀後認為最重要且必須的部分，剩下的文檔可以實際用到時再深入研究與探索</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> parse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),r={href:"https://docs.parseplatform.org/js/guide",target:"_blank",rel:"noopener noreferrer"},d={href:"http://parseplatform.org/Parse-SDK-JS/api/3.4.2/",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"objects",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#objects","aria-hidden":"true"},"#"),s(" Objects")],-1),v={href:"https://docs.parseplatform.org/js/guide/#saving-objects",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.parseplatform.org/js/guide/#retrieving-objects",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.parseplatform.org/js/guide/#updating-objects",target:"_blank",rel:"noopener noreferrer"},b={href:"https://docs.parseplatform.org/js/guide/#destroying-objects",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.parseplatform.org/js/guide/#one-to-one-and-one-to-many-relationships",target:"_blank",rel:"noopener noreferrer"},y={href:"https://docs.parseplatform.org/js/guide/#data-types",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"querys",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#querys","aria-hidden":"true"},"#"),s(" Querys")],-1),q={href:"https://docs.parseplatform.org/js/guide/#basic-queries",target:"_blank",rel:"noopener noreferrer"},w={href:"https://docs.parseplatform.org/js/guide/#query-constraints",target:"_blank",rel:"noopener noreferrer"},j={href:"https://docs.parseplatform.org/js/guide/#relational-queries",target:"_blank",rel:"noopener noreferrer"},_={href:"https://docs.parseplatform.org/js/guide/#compound-queries",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.parseplatform.org/js/guide/#aggregate",target:"_blank",rel:"noopener noreferrer"},P=t(`<blockquote><p>以下 <code>key</code> 表示 object field name</p></blockquote><h3 id="query-methods-常用部分" tabindex="-1"><a class="header-anchor" href="#query-methods-常用部分" aria-hidden="true">#</a> Query methods(常用部分)</h3><ul><li>get(objectId): Promise</li><li>first(): Promise</li><li>find(): Promise</li><li>count(): Promise</li><li>aggregate(pipeline): Promise</li><li>distinct(key): Promise</li></ul><h3 id="constraints-常用部分" tabindex="-1"><a class="header-anchor" href="#constraints-常用部分" aria-hidden="true">#</a> Constraints(常用部分)</h3><h4 id="compare-比較" tabindex="-1"><a class="header-anchor" href="#compare-比較" aria-hidden="true">#</a> compare 比較</h4><ul><li>equalTo(key, value)</li><li>notEqualTo(key, value)</li><li>greaterThan(key, number)</li><li>greaterThanOrEqualTo(key, number)</li><li>lessThan(key, number)</li><li>lessThanOrEqualTo(key, number)</li><li>matches(key, RegExp)</li></ul><h4 id="count-數量" tabindex="-1"><a class="header-anchor" href="#count-數量" aria-hidden="true">#</a> count 數量</h4><ul><li>limit(number)</li><li>skip([number]): 常用來製作 pagination</li><li>withCount(): query 物件時一併計算總數返回 <code>count</code>，較耗效能，不受 limit 數量限制，常用來製作 pagination，如不需返回物件內容僅需要取得數量，推薦使用 query count 方法</li></ul><h4 id="sort-排序" tabindex="-1"><a class="header-anchor" href="#sort-排序" aria-hidden="true">#</a> sort 排序</h4><ul><li>ascending(key)</li><li>descending(key)</li></ul><h4 id="list-清單" tabindex="-1"><a class="header-anchor" href="#list-清單" aria-hidden="true">#</a> list 清單</h4><ul><li>containedIn(key, value[])</li><li>notContainedIn(key, value[])</li></ul><h4 id="exist-存在值" tabindex="-1"><a class="header-anchor" href="#exist-存在值" aria-hidden="true">#</a> exist 存在值</h4><ul><li>exists(key)</li><li>doesNotExist(key)</li></ul><h4 id="選取排除欄位" tabindex="-1"><a class="header-anchor" href="#選取排除欄位" aria-hidden="true">#</a> 選取排除欄位</h4><ul><li>select(key1, key2, ...keys[])</li><li>exclude(key1, key2, ...keys[])</li><li>include(key or [key1, key2])</li></ul><h4 id="比對-query-keys" tabindex="-1"><a class="header-anchor" href="#比對-query-keys" aria-hidden="true">#</a> 比對 query keys</h4><ul><li>matchesKeyInQuery(): TODO</li><li>doesNotMatchKeyInQuery()</li><li>matchesQuery(key, keyQuery)</li><li>doesNotMatchQuery(key, keyQuery)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 範例：取得未擁有 profile 關聯的 users</span>
<span class="token keyword">const</span> queryUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span>Parse<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> queryProfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&#39;Profile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryUser<span class="token punctuation">.</span><span class="token function">doesNotMatchKeyInQuery</span><span class="token punctuation">(</span><span class="token string">&#39;objectId&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;owner.objectId&#39;</span><span class="token punctuation">,</span> queryProfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> queryUser<span class="token punctuation">.</span><span class="token function">explain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">useMasterKey</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="relations" tabindex="-1"><a class="header-anchor" href="#relations" aria-hidden="true">#</a> Relations</h2>`,20),Q={href:"https://docs.parseplatform.org/js/guide/#one-to-many",target:"_blank",rel:"noopener noreferrer"},C={href:"https://docs.parseplatform.org/js/guide/#many-to-many",target:"_blank",rel:"noopener noreferrer"},O={href:"https://docs.parseplatform.org/js/guide/#one-to-one",target:"_blank",rel:"noopener noreferrer"},T=t(`<h2 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling" aria-hidden="true">#</a> Error Handling</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span>Note<span class="token punctuation">)</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;aBcDeFgH&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 這裡不會執行</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Everything went fine!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 這裡會執行</span>
  <span class="token comment">// error 是一個帶著錯誤資訊的 Parse.Error 實例</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>code <span class="token operator">===</span> Parse<span class="token punctuation">.</span>Error<span class="token punctuation">.</span><span class="token constant">OBJECT_NOT_FOUND</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Uh oh, we couldn&#39;t find the object!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>code <span class="token operator">===</span> Parse<span class="token punctuation">.</span>Error<span class="token punctuation">.</span><span class="token constant">CONNECTION_FAILED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Uh oh, we couldn&#39;t even connect to the Parse Cloud!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or using catch</span>
query<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;aBcDeFgH&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果像是 <code>save</code>, <code>signUp</code> 這種針對特定 object 處理的方法，在 error 函數的第一個參數將會是 object，第二個才是 error object</p>`,3),E={href:"https://docs.parseplatform.org/js/guide/#error-codes",target:"_blank",rel:"noopener noreferrer"},M=n("h2",{id:"security",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#security","aria-hidden":"true"},"#"),s(" Security")],-1),S=n("h3",{id:"parse-options",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#parse-options","aria-hidden":"true"},"#"),s(" Parse options")],-1),I=n("code",null,"false",-1),N={href:"https://github.com/parse-community/parse-server#configuration",target:"_blank",rel:"noopener noreferrer"},U=n("h3",{id:"class-level-permission",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-level-permission","aria-hidden":"true"},"#"),s(" Class Level Permission")],-1),R={href:"https://docs.parseplatform.org/js/guide/#configuring-class-level-permissions",target:"_blank",rel:"noopener noreferrer"},D=t(`<h2 id="memo" tabindex="-1"><a class="header-anchor" href="#memo" aria-hidden="true">#</a> Memo</h2><h3 id="subclass" tabindex="-1"><a class="header-anchor" href="#subclass" aria-hidden="true">#</a> Subclass</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Monster <span class="token operator">=</span> Parse<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string">&quot;Monster&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// Instance methods</span>
  <span class="token function-variable function">hasSuperHumanStrength</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;strength&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// Instance properties go in an initialize method</span>
  <span class="token function-variable function">initialize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">attrs<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sound <span class="token operator">=</span> <span class="token string">&quot;Rawr&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// Class methods</span>
  <span class="token function-variable function">spawn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">strength</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> monster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    monster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;strength&quot;</span><span class="token punctuation">,</span> strength<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> monster<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> monster <span class="token operator">=</span> Monster<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>monster<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;strength&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Displays 200.</span>
<span class="token function">alert</span><span class="token punctuation">(</span>monster<span class="token punctuation">.</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Displays Rawr.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>透過 <code>Parse.Object.extend</code> 製作的 Subclass 可以直接調用相關方法，返回的 instance 也會自動套用延伸功能。</p><p><code>v1.6.0</code> 後也可透過 ES6 Class 對 <code>Parse.Object</code> 進行 <code>extends</code> 創建 Subclass，但必須在註冊後透過 <code>registerSubclass</code> 才能在 query 後返回繼續使用 Subclass 中的屬性、方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyMonster</span> <span class="token keyword">extends</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Object</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 繼承原 Monster Class</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;Monster&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// All other initialization</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sound <span class="token operator">=</span> <span class="token string">&#39;Rawr&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">hasSuperHumanStrength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;strength&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token parameter">strength</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> monster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMonster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    monster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;strength&#39;</span><span class="token punctuation">,</span> strength<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> monster<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 對原 Monster 註冊其 Subclass &quot;MyMonster&quot;</span>
Parse<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">registerSubclass</span><span class="token punctuation">(</span><span class="token string">&#39;Monster&#39;</span><span class="token punctuation">,</span> MyMonster<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="query-on-array" tabindex="-1"><a class="header-anchor" href="#query-on-array" aria-hidden="true">#</a> Query on Array</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;arrayKey&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="query-on-string" tabindex="-1"><a class="header-anchor" href="#query-on-string" aria-hidden="true">#</a> Query on String</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>query<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;someKey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;match value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">fullText</span><span class="token punctuation">(</span><span class="token string">&quot;someKey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;match fullText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// case insensitive</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="query-with-regexp" tabindex="-1"><a class="header-anchor" href="#query-with-regexp" aria-hidden="true">#</a> Query with RegExp</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1234</span><span class="token punctuation">,</span> <span class="token number">4321</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&#39;someKey&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>numbers<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)$</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will match ~34, ~21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="relational-queries" tabindex="-1"><a class="header-anchor" href="#relational-queries" aria-hidden="true">#</a> Relational Queries</h3><ul><li>matchesQuery 取得所有含有 <code>image</code> 的 Post 物件中的 Comments</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Post <span class="token operator">=</span> Parse<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string">&quot;Post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Comment <span class="token operator">=</span> Parse<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string">&quot;Comment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> innerQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">;</span>
innerQuery<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span>Comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">matchesQuery</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> innerQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// comments now contains the comments for posts with images.</span>
<span class="token keyword">const</span> comments <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>objectId <code>equalTo</code> by relational query</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
post<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&quot;1zEcyElZ80&quot;</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> post<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>include</code> to join in other Object</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span>Comment<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Retrieve the most recent ones</span>
query<span class="token punctuation">.</span><span class="token function">descending</span><span class="token punctuation">(</span><span class="token string">&quot;createdAt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Only retrieve the last ten</span>
query<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Include the post data with each comment</span>
query<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="compound-query" tabindex="-1"><a class="header-anchor" href="#compound-query" aria-hidden="true">#</a> Compound Query</h3><ul><li><code>or</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> lotsOfWins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;Player&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lotsOfWins<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span><span class="token string">&quot;wins&quot;</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fewWins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;Player&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fewWins<span class="token punctuation">.</span><span class="token function">lessThan</span><span class="token punctuation">(</span><span class="token string">&quot;wins&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mainQuery <span class="token operator">=</span> Parse<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>lotsOfWins<span class="token punctuation">,</span> fewWins<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>complex <code>and</code>(query itself will act as basic and)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> age16Query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
age16Query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> age18Query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
age18Query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> friends0Query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
friends0Query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;friends&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> friends2Query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
friends2Query<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span><span class="token string">&quot;friends&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mainQuery <span class="token operator">=</span> Parse<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>
  Parse<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>age16Query<span class="token punctuation">,</span> age18Query<span class="token punctuation">)</span><span class="token punctuation">,</span>
  Parse<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>friends0Query<span class="token punctuation">,</span> friends2Query<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aggregate" tabindex="-1"><a class="header-anchor" href="#aggregate" aria-hidden="true">#</a> Aggregate</h3><ul><li>group pipeline Grouping by <code>name</code> field, <code>$</code> before field name will tell Parse Server its a field name</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">group</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">objectId</span><span class="token operator">:</span> <span class="token string">&#39;$score&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>project pipeline(<code>keys</code>, <code>select</code>)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">project</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>match pipeline(<code>equalTo</code>)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">match</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;BBQ&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="passing-context-on-save" tabindex="-1"><a class="header-anchor" href="#passing-context-on-save" aria-hidden="true">#</a> Passing context on save</h3>`,32),A={href:"https://github.com/parse-community/parse-server/issues/6459",target:"_blank",rel:"noopener noreferrer"},B=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>object<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">myArg</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">beforeSave</span><span class="token punctuation">(</span><span class="token string">&#39;MyClass&#39;</span><span class="token punctuation">,</span> <span class="token parameter">req</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> myArg <span class="token operator">=</span> req<span class="token punctuation">.</span>context<span class="token punctuation">.</span>myArg<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function K(W,J){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("Parse Javascript Guide"),e(a)])]),n("li",null,[n("a",d,[s("Parse Javascript API Docs"),e(a)])])]),k,n("ul",null,[n("li",null,[n("a",v,[s("Saving Object"),e(a)])]),n("li",null,[n("a",m,[s("Retrieving Object"),e(a)])]),n("li",null,[n("a",h,[s("Updaing Object"),e(a)])]),n("li",null,[n("a",b,[s("Destroying Object"),e(a)])]),n("li",null,[n("a",g,[s("Relational Object"),e(a)])]),n("li",null,[n("a",y,[s("Data Types"),e(a)])])]),f,n("ul",null,[n("li",null,[n("a",q,[s("Basic"),e(a)])]),n("li",null,[n("a",w,[s("Constraints"),e(a)])]),n("li",null,[n("a",j,[s("Relational Queries"),e(a)])]),n("li",null,[n("a",_,[s("Compound Queries"),e(a)])]),n("li",null,[n("a",x,[s("Aggregate"),e(a)])])]),P,n("ul",null,[n("li",null,[n("a",Q,[s("1 to many"),e(a)])]),n("li",null,[n("a",C,[s("many to many"),e(a)])]),n("li",null,[n("a",O,[s("1 to 1"),e(a)])])]),T,n("p",null,[s("詳細錯誤清單請在"),n("a",E,[s("Error Codes 這裡查詢"),e(a)])]),M,S,n("ul",null,[n("li",null,[s("allowClientClassCreation: "),I,s(" 限制 client 端無法 create class，詳情可參考 "),n("a",N,[s("Parse Server Configuration"),e(a)])])]),U,n("ul",null,[n("li",null,[n("a",R,[s("Link"),e(a)])])]),D,n("ul",null,[n("li",null,[n("a",A,[s("Link"),e(a)])])]),B])}const H=p(l,[["render",K],["__file","index.html.vue"]]);export{H as default};
