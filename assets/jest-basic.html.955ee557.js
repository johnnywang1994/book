import{_ as c,r as o,o as i,c as l,a,b as n,d as s,e as t}from"./app.e90a952f.js";const u={},r=n("h1",{id:"jest-\u6E2C\u8A66\u5DE5\u5177-\u57FA\u790E\u7BC7",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jest-\u6E2C\u8A66\u5DE5\u5177-\u57FA\u790E\u7BC7","aria-hidden":"true"},"#"),s(" Jest \u6E2C\u8A66\u5DE5\u5177 - \u57FA\u790E\u7BC7")],-1),k=t(`<p>Hello \u6211\u662F Johnny\uFF0CJest \u662F\u4E00\u6B3E\u5F88\u8B9A\u7684\u6E2C\u8A66\u5DE5\u5177\uFF0C\u8A31\u591A framework \u4E5F\u90FD\u6709\u4F7F\u7528 jest \u5EFA\u7ACB\u76F8\u95DC\u5B98\u65B9\u7684\u6E2C\u8A66\u5DE5\u5177\uFF0C\u672C\u6587\u64B0\u5BEB\u6642 jest \u7248\u672C\u70BA <code>v28.0</code>\uFF0C\u672C\u7BC7\u662F\u500B\u4EBA\u5B78\u7FD2\u6587\u6A94\u6642\u7684\u96A8\u624B\u7B46\u8A18\uFF0C\u6B64\u7BC7\u4E3B\u8981\u7D00\u9304\u57FA\u790E\u4F7F\u7528\uFF0CMock \u90E8\u5206\u6703\u5728\u53E6\u4E00\u7BC7\u9032\u884C\u4ECB\u7D39</p><h2 id="\u5B89\u88DD" tabindex="-1"><a class="header-anchor" href="#\u5B89\u88DD" aria-hidden="true">#</a> \u5B89\u88DD</h2><p>\u53EF\u4EE5\u9078\u64C7\u5168\u5C40\u5B89\u88DD\u6216\u662F\u672C\u5730\u5B89\u88DD</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> --save-dev jest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="\u914D\u7F6E" tabindex="-1"><a class="header-anchor" href="#\u914D\u7F6E" aria-hidden="true">#</a> \u914D\u7F6E</h2>`,5),d={href:"https://jestjs.io/docs/configuration",target:"_blank",rel:"noopener noreferrer"},v=s("\u914D\u7F6E\u5B98\u65B9\u6587\u4EF6"),b=t(`<h2 id="\u4F7F\u7528\u7BC4\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u7BC4\u4F8B" aria-hidden="true">#</a> \u4F7F\u7528\u7BC4\u4F8B</h2><p>\u4E00\u500B\u6E2C\u8A66\u6700\u91CD\u8981\u5C31\u5E7E\u500B\u6771\u897F\u9700\u6E96\u5099</p><ul><li>\u6E2C\u8A66\u5C0D\u8C61(sum.js)</li><li>\u6E2C\u8A66\u5167\u5BB9(sum.test.js)</li><li>\u6307\u4EE4\u57F7\u884C(package.json)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// sum.js</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> sum<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// sum.test.js</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./sum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;adds 1 + 2 to equal 3&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jest&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cli-options" tabindex="-1"><a class="header-anchor" href="#cli-options" aria-hidden="true">#</a> Cli options</h3>`,7),m=s("Cli \u6307\u4EE4\u5DE5\u5177\u53EF\u4EE5\u53C3\u8003 "),h={href:"https://jestjs.io/docs/cli",target:"_blank",rel:"noopener noreferrer"},g=s("jest command line"),f=t(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ jest --init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ jest my-test --notify --config<span class="token operator">=</span>config.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="babel" tabindex="-1"><a class="header-anchor" href="#babel" aria-hidden="true">#</a> Babel</h3><p>Babel \u7684\u7406\u60F3\u914D\u7F6E\u5C07\u53D6\u6C7A\u65BC\u60A8\u7684\u9805\u76EE\uFF0C\u82E5\u9805\u76EE\u672C\u8EAB\u6C92\u6709 babel \u914D\u7F6E\uFF0C\u5247\u9700\u8981\u624B\u52D5\u5B89\u88DD\u5982\u4E0B</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> --save-dev babel-jest @babel/core @babel/preset-env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// babel.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token string">&#39;current&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u6307\u5B9A\u6E2C\u8A66\u74B0\u5883-babel" tabindex="-1"><a class="header-anchor" href="#\u6307\u5B9A\u6E2C\u8A66\u74B0\u5883-babel" aria-hidden="true">#</a> \u6307\u5B9A\u6E2C\u8A66\u74B0\u5883 Babel</h3>`,7),x=s("\u82E5\u9805\u76EE\u4E2D\u5DF2\u7D93\u6709\u914D\u7F6E\uFF0C\u5247\u53EF\u4EE5\u904B\u7528\u4E0B\u65B9\u65B9\u5F0F\u9032\u884C\u8ABF\u6574\uFF0C\u5340\u5206\u4E0D\u540C\u74B0\u5883\u4E0B\u7684\u914D\u7F6E\uFF0C\u8A73\u60C5\u53EF\u53C3\u8003"),j={href:"https://babeljs.io/docs/en/",target:"_blank",rel:"noopener noreferrer"},_=s("\u5B98\u65B9\u8AAA\u660E"),y=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// babel.config.js</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">api</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isTest <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// You can use isTest to determine what presets and plugins to use.</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>babel-jest \u5728\u5B89\u88DD Jest \u6642\u6703\u81EA\u52D5\u5B89\u88DD\uFF0C\u5982\u679C\u9805\u76EE\u4E2D\u5B58\u5728 babel \u914D\u7F6E\uFF0C\u5B83\u6703\u81EA\u52D5\u8F49\u63DB\u6587\u4EF6\u3002 \u70BA\u907F\u514D\u6B64\u884C\u70BA\uFF0C\u60A8\u53EF\u4EE5\u986F\u5F0F\u91CD\u7F6E\u8F49\u63DB\u914D\u7F6E\u9078\u9805\uFF1A</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// jest.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="matchers" tabindex="-1"><a class="header-anchor" href="#matchers" aria-hidden="true">#</a> Matchers</h2>`,4),w=s("\u672C\u7BC7\u4ECB\u7D39\u5E7E\u7A2E\u5E38\u898B\u7684 matcher\uFF0C\u8A73\u7D30\u53EF\u53C3\u8003"),B={href:"https://jestjs.io/docs/expect",target:"_blank",rel:"noopener noreferrer"},E=s("\u5B98\u65B9\u6587\u4EF6 matcher \u6E05\u55AE"),A=t(`<h3 id="common-matchers" tabindex="-1"><a class="header-anchor" href="#common-matchers" aria-hidden="true">#</a> Common Matchers</h3><ul><li>.toBe(): \u56B4\u683C\u76F8\u7B49</li><li>.toEqual(): \u7269\u4EF6\u503C\u76F8\u7B49</li><li>.not.xxx(): \u53CD\u5411 matcher</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// toBe and toEqual are equivalent for numbers</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// opposite</span>
<span class="token function">expect</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="truthiness" tabindex="-1"><a class="header-anchor" href="#truthiness" aria-hidden="true">#</a> Truthiness</h3><ul><li>.toBeNull()</li><li>.toBeDefined()</li><li>.toBeUndefined()</li><li>.toBeTruthy(): \u6AA2\u9A57\u662F\u5426\u901A\u904E if \u689D\u4EF6</li><li>.toBeFalsy()</li></ul><h3 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h3><ul><li>.toBeGreaterThan(number)</li><li>.toBeGreaterThanOrEqual(number)</li><li>.toBeLessThan(number)</li><li>.toBeLessThanOrEqual(number)</li><li>.toBeCloseTo(number): \u8DA8\u8FD1\u65BC</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span>
<span class="token comment">//expect(value).toBe(0.3);           This won&#39;t work because of rounding error</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCloseTo</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This works.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="strings" tabindex="-1"><a class="header-anchor" href="#strings" aria-hidden="true">#</a> Strings</h3><ul><li>.toMatch(regexp)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;Christoph&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">stop</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h3><ul><li>.toContain()</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> shoppingList <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;diapers&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;kleenex&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;trash bags&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;paper towels&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;milk&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span>shoppingList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;milk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exceptions" tabindex="-1"><a class="header-anchor" href="#exceptions" aria-hidden="true">#</a> Exceptions</h3><ul><li>.toThrow()</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compileAndroidCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;you are using the wrong JDK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">compileAndroidCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u62CB\u51FA\u7570\u5E38\u7684\u51FD\u6578\u9700\u8981\u5728\u5305\u88DD\u51FD\u6578\u4E2D\u8ABF\u7528\uFF0C\u5426\u5247 toThrow \u65B7\u8A00\u5C07\u5931\u6557</p></blockquote><h2 id="test-asynchronous" tabindex="-1"><a class="header-anchor" href="#test-asynchronous" aria-hidden="true">#</a> Test Asynchronous</h2><p>\u975E\u540C\u6B65\u7684\u6E2C\u8A66\u662F\u4E00\u500B\u5F88\u91CD\u8981\u7684\u74B0\u7BC0\uFF0C\u5177\u9AD4\u53EF\u5206\u6210\u4E09\u7A2E\u65B9\u5F0F\u5BE6\u8E10\uFF0C\u63A8\u85A6\u4F7F\u7528 <code>async</code>, <code>await</code></p><ul><li>promise</li><li>async, await</li><li>callback(\u4E0D\u63A8\u85A6)</li></ul><h3 id="promises" tabindex="-1"><a class="header-anchor" href="#promises" aria-hidden="true">#</a> Promises</h3><p>test function \u56DE\u50B3 promise\uFF0C\u82E5 promise rejected \u5247 test case \u5C07\u5931\u6557</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;the data is peanut butter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;peanut butter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await" aria-hidden="true">#</a> Async/Await</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;the fetch fails with an error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;the data is peanut butter&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolves<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;peanut butter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;the fetch fails with an error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rejects<span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="callback" tabindex="-1"><a class="header-anchor" href="#callback" aria-hidden="true">#</a> Callback</h3>`,27),q=s("\u4E0D \u63A8 \u85A6\uFF0C\u8ACB\u53C3\u8003"),T={href:"https://jestjs.io/docs/asynchronous#callbacks",target:"_blank",rel:"noopener noreferrer"},C=s("\u5B98\u65B9\u6587\u4EF6"),S=t(`<h2 id="setup-and-teardown" tabindex="-1"><a class="header-anchor" href="#setup-and-teardown" aria-hidden="true">#</a> Setup and Teardown</h2><p>\u901A\u5E38\u5728\u7DE8\u5BEB\u6E2C\u8A66\u6642\uFF0C\u9700\u8981\u5728\u6E2C\u8A66\u904B\u884C\u4E4B\u524D\u9032\u884C\u4E00\u4E9B\u914D\u7F6E\u5DE5\u4F5C\uFF0C\u4E26\u4E14\u5728\u6E2C\u8A66\u904B\u884C\u4E4B\u5F8C\u9700\u8981\u9032\u884C\u4E00\u4E9B\u6574\u7406\u5DE5\u4F5C</p><h3 id="repeat" tabindex="-1"><a class="header-anchor" href="#repeat" aria-hidden="true">#</a> Repeat</h3><ul><li>beforeEach(fn)</li><li>afterEach(fn)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">initializeCityDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">clearCityDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;city database has Vienna&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isCity</span><span class="token punctuation">(</span><span class="token string">&#39;Vienna&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;city database has San Juan&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isCity</span><span class="token punctuation">(</span><span class="token string">&#39;San Juan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="one-time" tabindex="-1"><a class="header-anchor" href="#one-time" aria-hidden="true">#</a> One Time</h3><ul><li>beforeAll(fn)</li><li>afterAll(fn)</li></ul><h3 id="scoping" tabindex="-1"><a class="header-anchor" href="#scoping" aria-hidden="true">#</a> Scoping</h3><ul><li>describe(): \u5206\u985E\u6E2C\u8A66 case</li></ul><p><code>describe</code> \u5167\u7684 <code>beforeAll</code>, <code>afterAll</code> \u7B49\u7B49\u50C5\u5957\u7528\u5728\u8A72 scoped \u5167\u7684 test\uFF0C\u4E0D\u5F71\u97FF\u5916\u90E8\uFF0C\u4F46\u5916\u5C64\u6703\u5F71\u97FF describe \u5167\u7684 test</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1 - beforeAll&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">afterAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1 - afterAll&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1 - beforeEach&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1 - afterEach&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1 - test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;Scoped / Nested block&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2 - beforeAll&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">afterAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2 - afterAll&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2 - beforeEach&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2 - afterEach&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2 - test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 1 - beforeAll</span>
<span class="token comment">// 1 - beforeEach</span>
<span class="token comment">// 1 - test</span>
<span class="token comment">// 1 - afterEach</span>
<span class="token comment">// 2 - beforeAll</span>
<span class="token comment">// 1 - beforeEach</span>
<span class="token comment">// 2 - beforeEach</span>
<span class="token comment">// 2 - test</span>
<span class="token comment">// 2 - afterEach</span>
<span class="token comment">// 1 - afterEach</span>
<span class="token comment">// 2 - afterAll</span>
<span class="token comment">// 1 - afterAll</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="describe-and-test-order" tabindex="-1"><a class="header-anchor" href="#describe-and-test-order" aria-hidden="true">#</a> describe and test order</h3><p>\u591A\u5C64 nested \u7684 describe \u8207 test \u57F7\u884C\u9806\u5E8F\u662F describe \u512A\u5148\uFF0Ctest \u7D71\u4E00\u5728\u6240\u6709 describe \u7D50\u675F\u5F8C\u8ABF\u7528</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;outer&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;describe outer-a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;describe inner 1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;describe inner 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;test 1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test for describe inner 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;describe outer-b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;test 1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test for describe outer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;describe inner 2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;describe inner 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;test for describe inner 2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test for describe inner 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;describe outer-c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// describe outer-a</span>
<span class="token comment">// describe inner 1</span>
<span class="token comment">// describe outer-b</span>
<span class="token comment">// describe inner 2</span>
<span class="token comment">// describe outer-c</span>
<span class="token comment">// test for describe inner 1</span>
<span class="token comment">// test for describe outer</span>
<span class="token comment">// test for describe inner 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="only" tabindex="-1"><a class="header-anchor" href="#only" aria-hidden="true">#</a> Only</h3><p>\u7576\u6709\u6E2C\u8A66 case \u5931\u6557\u6642\uFF0C\u53EF\u4EE5\u4F7F\u7528 <code>test.only</code> \u9032\u884C\u7CBE\u6E96\u8ABF\u6574\uFF0C\u50C5\u57F7\u884C\u8A72 test case \u85C9\u6B64\u78BA\u8A8D\u554F\u984C\u539F\u56E0</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>test<span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span><span class="token string">&#39;this will be the only test that runs&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;this test will not run&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),D=n("h2",{id:"\u7D50\u8AD6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u7D50\u8AD6","aria-hidden":"true"},"#"),s(" \u7D50\u8AD6")],-1),J=n("p",null,"\u57FA\u790E\u5927\u6982\u5148\u5230\u9019\u908A\uFF0C\u82E5\u6709\u8208\u8DA3\u7E7C\u7E8C\u5B78\u7FD2 mock \u76F8\u95DC\u77E5\u8B58\uFF0C\u6B61\u8FCE\u524D\u5F80\u4E0B\u4E00\u7BC7 - \u9032\u968E\u7BC7",-1);function M(N,L){const p=o("SocialBlock"),e=o("ExternalLinkIcon");return i(),l("div",null,[r,a(p,{hashtags:"javascript,test,jest"}),k,n("p",null,[n("a",d,[v,a(e)])]),b,n("p",null,[m,n("a",h,[g,a(e)])]),f,n("p",null,[x,n("a",j,[_,a(e)])]),y,n("p",null,[w,n("a",B,[E,a(e)])]),A,n("p",null,[q,n("a",T,[C,a(e)])]),S,a(p,{hashtags:"javascript,test,jest"}),D,J])}var O=c(u,[["render",M],["__file","jest-basic.html.vue"]]);export{O as default};
