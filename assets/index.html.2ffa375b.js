import{_ as p,o,a as c,d as n,b as e,F as l,f as t,e as s,r}from"./app.41f96392.js";const u={},i=t(`<h1 id="parse-javascript-\u6587\u6A94\u95B1\u8B80\u7B46\u8A18" tabindex="-1"><a class="header-anchor" href="#parse-javascript-\u6587\u6A94\u95B1\u8B80\u7B46\u8A18" aria-hidden="true">#</a> Parse Javascript \u6587\u6A94\u95B1\u8B80\u7B46\u8A18</h1><p>\u9019\u662F\u4E00\u7CFB\u5217\u95B1\u8B80 <code>Parse Javascript</code>, <code>Parse Cloud</code>, <code>Parse Server</code> \u7684\u4E00\u7CFB\u5217\u5B78\u7FD2\u7B46\u8A18\uFF0C\u4F5C\u70BA\u5B78\u7FD2\u7684\u7D00\u9304\u8207\u8907\u7FD2\u4F7F\u7528\uFF0C\u4E5F\u6B61\u8FCE\u6709\u8208\u8DA3\u7684\u670B\u53CB\u5011\u770B\u770B\u645F\uFF0C\u5167\u5BB9\u4E26\u4E0D\u6703\u5305\u542B\u6240\u6709\u6587\u6A94\uFF0C\u4E3B\u8981\u90FD\u662F\u6211\u81EA\u5DF1\u95B1\u8B80\u5F8C\u8A8D\u70BA\u6700\u91CD\u8981\u4E14\u5FC5\u9808\u7684\u90E8\u5206\uFF0C\u5269\u4E0B\u7684\u6587\u6A94\u53EF\u4EE5\u5BE6\u969B\u7528\u5230\u6642\u518D\u6DF1\u5165\u7814\u7A76\u8207\u63A2\u7D22</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> parse
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,3),k={href:"https://docs.parseplatform.org/js/guide",target:"_blank",rel:"noopener noreferrer"},d=s("Parse Javascript Guide"),b={href:"http://parseplatform.org/Parse-SDK-JS/api/3.4.2/",target:"_blank",rel:"noopener noreferrer"},m=s("Parse Javascript API Docs"),h=n("h2",{id:"objects",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#objects","aria-hidden":"true"},"#"),s(" Objects")],-1),g={href:"https://docs.parseplatform.org/js/guide/#saving-objects",target:"_blank",rel:"noopener noreferrer"},y=s("Saving Object"),f={href:"https://docs.parseplatform.org/js/guide/#retrieving-objects",target:"_blank",rel:"noopener noreferrer"},_=s("Retrieving Object"),v={href:"https://docs.parseplatform.org/js/guide/#updating-objects",target:"_blank",rel:"noopener noreferrer"},q=s("Updaing Object"),w={href:"https://docs.parseplatform.org/js/guide/#destroying-objects",target:"_blank",rel:"noopener noreferrer"},j=s("Destroying Object"),x={href:"https://docs.parseplatform.org/js/guide/#one-to-one-and-one-to-many-relationships",target:"_blank",rel:"noopener noreferrer"},P=s("Relational Object"),Q={href:"https://docs.parseplatform.org/js/guide/#data-types",target:"_blank",rel:"noopener noreferrer"},C=s("Data Types"),O=n("h2",{id:"querys",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#querys","aria-hidden":"true"},"#"),s(" Querys")],-1),T={href:"https://docs.parseplatform.org/js/guide/#basic-queries",target:"_blank",rel:"noopener noreferrer"},E=s("Basic"),S={href:"https://docs.parseplatform.org/js/guide/#query-constraints",target:"_blank",rel:"noopener noreferrer"},M=s("Constraints"),I={href:"https://docs.parseplatform.org/js/guide/#relational-queries",target:"_blank",rel:"noopener noreferrer"},N=s("Relational Queries"),R={href:"https://docs.parseplatform.org/js/guide/#compound-queries",target:"_blank",rel:"noopener noreferrer"},D=s("Compound Queries"),A={href:"https://docs.parseplatform.org/js/guide/#aggregate",target:"_blank",rel:"noopener noreferrer"},U=s("Aggregate"),B=t('<blockquote><p>\u4EE5\u4E0B <code>key</code> \u8868\u793A object field name</p></blockquote><h3 id="query-methods-\u5E38\u7528\u90E8\u5206" tabindex="-1"><a class="header-anchor" href="#query-methods-\u5E38\u7528\u90E8\u5206" aria-hidden="true">#</a> Query methods(\u5E38\u7528\u90E8\u5206)</h3><ul><li>get(objectId): Promise</li><li>first(): Promise</li><li>find(): Promise</li><li>count(): Promise</li><li>aggregate(pipeline): Promise</li><li>distinct(key): Promise</li></ul><h3 id="constraints-\u5E38\u7528\u90E8\u5206" tabindex="-1"><a class="header-anchor" href="#constraints-\u5E38\u7528\u90E8\u5206" aria-hidden="true">#</a> Constraints(\u5E38\u7528\u90E8\u5206)</h3><h4 id="compare-\u6BD4\u8F03" tabindex="-1"><a class="header-anchor" href="#compare-\u6BD4\u8F03" aria-hidden="true">#</a> compare \u6BD4\u8F03</h4><ul><li>equalTo(key, value)</li><li>notEqualTo(key, value)</li><li>greaterThan(key, number)</li><li>greaterThanOrEqualTo(key, number)</li><li>lessThan(key, number)</li><li>lessThanOrEqualTo(key, number)</li><li>matches(key, RegExp)</li></ul><h4 id="count-\u6578\u91CF" tabindex="-1"><a class="header-anchor" href="#count-\u6578\u91CF" aria-hidden="true">#</a> count \u6578\u91CF</h4><ul><li>limit(number)</li><li>skip([number]): \u5E38\u7528\u4F86\u88FD\u4F5C pagination</li><li>withCount(): query \u7269\u4EF6\u6642\u4E00\u4F75\u8A08\u7B97\u7E3D\u6578\u8FD4\u56DE <code>count</code>\uFF0C\u8F03\u8017\u6548\u80FD\uFF0C\u4E0D\u53D7 limit \u6578\u91CF\u9650\u5236\uFF0C\u5E38\u7528\u4F86\u88FD\u4F5C pagination\uFF0C\u5982\u4E0D\u9700\u8FD4\u56DE\u7269\u4EF6\u5167\u5BB9\u50C5\u9700\u8981\u53D6\u5F97\u6578\u91CF\uFF0C\u63A8\u85A6\u4F7F\u7528 query count \u65B9\u6CD5</li></ul><h4 id="sort-\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#sort-\u6392\u5E8F" aria-hidden="true">#</a> sort \u6392\u5E8F</h4><ul><li>ascending(key)</li><li>descending(key)</li></ul><h4 id="list-\u6E05\u55AE" tabindex="-1"><a class="header-anchor" href="#list-\u6E05\u55AE" aria-hidden="true">#</a> list \u6E05\u55AE</h4><ul><li>containedIn(key, value[])</li><li>notContainedIn(key, value[])</li></ul><h4 id="exist-\u5B58\u5728\u503C" tabindex="-1"><a class="header-anchor" href="#exist-\u5B58\u5728\u503C" aria-hidden="true">#</a> exist \u5B58\u5728\u503C</h4><ul><li>exists(key)</li><li>doesNotExist(key)</li></ul><h4 id="\u9078\u53D6\u6392\u9664\u6B04\u4F4D" tabindex="-1"><a class="header-anchor" href="#\u9078\u53D6\u6392\u9664\u6B04\u4F4D" aria-hidden="true">#</a> \u9078\u53D6\u6392\u9664\u6B04\u4F4D</h4><ul><li>select(key1, key2, ...keys[])</li><li>exclude(key1, key2, ...keys[])</li><li>include(key or [key1, key2])</li></ul><h4 id="\u6BD4\u5C0D-query-keys" tabindex="-1"><a class="header-anchor" href="#\u6BD4\u5C0D-query-keys" aria-hidden="true">#</a> \u6BD4\u5C0D query keys</h4><ul><li>matchesKeyInQuery(): TODO</li><li>doesNotMatchKeyInQuery()</li><li>matchesQuery(key, keyQuery)</li><li>doesNotMatchQuery(key, keyQuery)</li></ul><h2 id="relations" tabindex="-1"><a class="header-anchor" href="#relations" aria-hidden="true">#</a> Relations</h2>',19),K={href:"https://docs.parseplatform.org/js/guide/#one-to-many",target:"_blank",rel:"noopener noreferrer"},W=s("1 to many"),F={href:"https://docs.parseplatform.org/js/guide/#many-to-many",target:"_blank",rel:"noopener noreferrer"},J=s("many to many"),L={href:"https://docs.parseplatform.org/js/guide/#one-to-one",target:"_blank",rel:"noopener noreferrer"},H=s("1 to 1"),$=t(`<h2 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling" aria-hidden="true">#</a> Error Handling</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span>Note<span class="token punctuation">)</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;aBcDeFgH&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u9019\u88E1\u4E0D\u6703\u57F7\u884C</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Everything went fine!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u9019\u88E1\u6703\u57F7\u884C</span>
  <span class="token comment">// error \u662F\u4E00\u500B\u5E36\u8457\u932F\u8AA4\u8CC7\u8A0A\u7684 Parse.Error \u5BE6\u4F8B</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>code <span class="token operator">===</span> Parse<span class="token punctuation">.</span>Error<span class="token punctuation">.</span><span class="token constant">OBJECT_NOT_FOUND</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Uh oh, we couldn&#39;t find the object!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>code <span class="token operator">===</span> Parse<span class="token punctuation">.</span>Error<span class="token punctuation">.</span><span class="token constant">CONNECTION_FAILED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Uh oh, we couldn&#39;t even connect to the Parse Cloud!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// or using catch</span>
query<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;aBcDeFgH&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>\u5982\u679C\u50CF\u662F <code>save</code>, <code>signUp</code> \u9019\u7A2E\u91DD\u5C0D\u7279\u5B9A object \u8655\u7406\u7684\u65B9\u6CD5\uFF0C\u5728 error \u51FD\u6578\u7684\u7B2C\u4E00\u500B\u53C3\u6578\u5C07\u6703\u662F object\uFF0C\u7B2C\u4E8C\u500B\u624D\u662F error object</p>`,3),z=s("\u8A73\u7D30\u932F\u8AA4\u6E05\u55AE\u8ACB\u5728"),V={href:"https://docs.parseplatform.org/js/guide/#error-codes",target:"_blank",rel:"noopener noreferrer"},G=s("Error Codes \u9019\u88E1\u67E5\u8A62"),Z=n("h2",{id:"security",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#security","aria-hidden":"true"},"#"),s(" Security")],-1),X=n("h3",{id:"parse-options",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#parse-options","aria-hidden":"true"},"#"),s(" Parse options")],-1),Y=s("allowClientClassCreation: "),nn=n("code",null,"false",-1),sn=s(" \u9650\u5236 client \u7AEF\u7121\u6CD5 create class\uFF0C\u8A73\u60C5\u53EF\u53C3\u8003 "),an={href:"https://github.com/parse-community/parse-server#configuration",target:"_blank",rel:"noopener noreferrer"},en=s("Parse Server Configuration"),tn=n("h3",{id:"class-level-permission",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-level-permission","aria-hidden":"true"},"#"),s(" Class Level Permission")],-1),pn={href:"https://docs.parseplatform.org/js/guide/#configuring-class-level-permissions",target:"_blank",rel:"noopener noreferrer"},on=s("Link"),cn=t(`<h2 id="memo" tabindex="-1"><a class="header-anchor" href="#memo" aria-hidden="true">#</a> Memo</h2><h3 id="subclass" tabindex="-1"><a class="header-anchor" href="#subclass" aria-hidden="true">#</a> Subclass</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Monster <span class="token operator">=</span> Parse<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string">&quot;Monster&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// Instance methods</span>
  <span class="token function-variable function">hasSuperHumanStrength</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;strength&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// Instance properties go in an initialize method</span>
  <span class="token function-variable function">initialize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">attrs<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sound <span class="token operator">=</span> <span class="token string">&quot;Rawr&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// Class methods</span>
  <span class="token function-variable function">spawn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">strength</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> monster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    monster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;strength&quot;</span><span class="token punctuation">,</span> strength<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> monster<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> monster <span class="token operator">=</span> Monster<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>monster<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;strength&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Displays 200.</span>
<span class="token function">alert</span><span class="token punctuation">(</span>monster<span class="token punctuation">.</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Displays Rawr.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>\u900F\u904E <code>Parse.Object.extend</code> \u88FD\u4F5C\u7684 Subclass \u53EF\u4EE5\u76F4\u63A5\u8ABF\u7528\u76F8\u95DC\u65B9\u6CD5\uFF0C\u8FD4\u56DE\u7684 instance \u4E5F\u6703\u81EA\u52D5\u5957\u7528\u5EF6\u4F38\u529F\u80FD\u3002</p><p><code>v1.6.0</code> \u5F8C\u4E5F\u53EF\u900F\u904E ES6 Class \u5C0D <code>Parse.Object</code> \u9032\u884C <code>extends</code> \u5275\u5EFA Subclass\uFF0C\u4F46\u5FC5\u9808\u5728\u8A3B\u518A\u5F8C\u900F\u904E <code>registerSubclass</code> \u624D\u80FD\u5728 query \u5F8C\u8FD4\u56DE\u7E7C\u7E8C\u4F7F\u7528 Subclass \u4E2D\u7684\u5C6C\u6027\u3001\u65B9\u6CD5\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyMonster</span> <span class="token keyword">extends</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Object</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7E7C\u627F\u539F Monster Class</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;Monster&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// All other initialization</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sound <span class="token operator">=</span> <span class="token string">&#39;Rawr&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">hasSuperHumanStrength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;strength&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token parameter">strength</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> monster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMonster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    monster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;strength&#39;</span><span class="token punctuation">,</span> strength<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> monster<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5C0D\u539F Monster \u8A3B\u518A\u5176 Subclass &quot;MyMonster&quot;</span>
Parse<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">registerSubclass</span><span class="token punctuation">(</span><span class="token string">&#39;Monster&#39;</span><span class="token punctuation">,</span> MyMonster<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="query-on-array" tabindex="-1"><a class="header-anchor" href="#query-on-array" aria-hidden="true">#</a> Query on Array</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;arrayKey&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="query-on-string" tabindex="-1"><a class="header-anchor" href="#query-on-string" aria-hidden="true">#</a> Query on String</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>query<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;someKey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;match value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">fullText</span><span class="token punctuation">(</span><span class="token string">&quot;someKey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;match fullText&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// case insensitive</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="query-with-regexp" tabindex="-1"><a class="header-anchor" href="#query-with-regexp" aria-hidden="true">#</a> Query with RegExp</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1234</span><span class="token punctuation">,</span> <span class="token number">4321</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&#39;someKey&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>numbers<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)$</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will match ~34, ~21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="relational-queries" tabindex="-1"><a class="header-anchor" href="#relational-queries" aria-hidden="true">#</a> Relational Queries</h3><ul><li>matchesQuery \u53D6\u5F97\u6240\u6709\u542B\u6709 <code>image</code> \u7684 Post \u7269\u4EF6\u4E2D\u7684 Comments</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Post <span class="token operator">=</span> Parse<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string">&quot;Post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Comment <span class="token operator">=</span> Parse<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string">&quot;Comment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> innerQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span>Post<span class="token punctuation">)</span><span class="token punctuation">;</span>
innerQuery<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span>Comment<span class="token punctuation">)</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">matchesQuery</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> innerQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// comments now contains the comments for posts with images.</span>
<span class="token keyword">const</span> comments <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>objectId <code>equalTo</code> by relational query</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
post<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&quot;1zEcyElZ80&quot;</span><span class="token punctuation">;</span>
query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> post<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>include</code> to join in other Object</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span>Comment<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Retrieve the most recent ones</span>
query<span class="token punctuation">.</span><span class="token function">descending</span><span class="token punctuation">(</span><span class="token string">&quot;createdAt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Only retrieve the last ten</span>
query<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Include the post data with each comment</span>
query<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="compound-query" tabindex="-1"><a class="header-anchor" href="#compound-query" aria-hidden="true">#</a> Compound Query</h3><ul><li><code>or</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> lotsOfWins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;Player&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lotsOfWins<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span><span class="token string">&quot;wins&quot;</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fewWins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;Player&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fewWins<span class="token punctuation">.</span><span class="token function">lessThan</span><span class="token punctuation">(</span><span class="token string">&quot;wins&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mainQuery <span class="token operator">=</span> Parse<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>lotsOfWins<span class="token punctuation">,</span> fewWins<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>complex <code>and</code>(query itself will act as basic and)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> age16Query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
age16Query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> age18Query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
age18Query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> friends0Query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
friends0Query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;friends&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> friends2Query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
friends2Query<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span><span class="token string">&quot;friends&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mainQuery <span class="token operator">=</span> Parse<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>
  Parse<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>age16Query<span class="token punctuation">,</span> age18Query<span class="token punctuation">)</span><span class="token punctuation">,</span>
  Parse<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>friends0Query<span class="token punctuation">,</span> friends2Query<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="aggregate" tabindex="-1"><a class="header-anchor" href="#aggregate" aria-hidden="true">#</a> Aggregate</h3><ul><li>group pipeline Grouping by <code>name</code> field, <code>$</code> before field name will tell Parse Server its a field name</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">group</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">objectId</span><span class="token operator">:</span> <span class="token string">&#39;$score&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>project pipeline(<code>keys</code>, <code>select</code>)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">project</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>match pipeline(<code>equalTo</code>)</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">match</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;BBQ&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="passing-context-on-save" tabindex="-1"><a class="header-anchor" href="#passing-context-on-save" aria-hidden="true">#</a> Passing context on save</h3>`,32),ln={href:"https://github.com/parse-community/parse-server/issues/6459",target:"_blank",rel:"noopener noreferrer"},rn=s("Link"),un=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>object<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">myArg</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">beforeSave</span><span class="token punctuation">(</span><span class="token string">&#39;MyClass&#39;</span><span class="token punctuation">,</span> <span class="token parameter">req</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> myArg <span class="token operator">=</span> req<span class="token punctuation">.</span>context<span class="token punctuation">.</span>myArg<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,1);function kn(dn,bn){const a=r("ExternalLinkIcon");return o(),c(l,null,[i,n("ul",null,[n("li",null,[n("a",k,[d,e(a)])]),n("li",null,[n("a",b,[m,e(a)])])]),h,n("ul",null,[n("li",null,[n("a",g,[y,e(a)])]),n("li",null,[n("a",f,[_,e(a)])]),n("li",null,[n("a",v,[q,e(a)])]),n("li",null,[n("a",w,[j,e(a)])]),n("li",null,[n("a",x,[P,e(a)])]),n("li",null,[n("a",Q,[C,e(a)])])]),O,n("ul",null,[n("li",null,[n("a",T,[E,e(a)])]),n("li",null,[n("a",S,[M,e(a)])]),n("li",null,[n("a",I,[N,e(a)])]),n("li",null,[n("a",R,[D,e(a)])]),n("li",null,[n("a",A,[U,e(a)])])]),B,n("ul",null,[n("li",null,[n("a",K,[W,e(a)])]),n("li",null,[n("a",F,[J,e(a)])]),n("li",null,[n("a",L,[H,e(a)])])]),$,n("p",null,[z,n("a",V,[G,e(a)])]),Z,X,n("ul",null,[n("li",null,[Y,nn,sn,n("a",an,[en,e(a)])])]),tn,n("ul",null,[n("li",null,[n("a",pn,[on,e(a)])])]),cn,n("ul",null,[n("li",null,[n("a",ln,[rn,e(a)])])]),un],64)}var hn=p(u,[["render",kn],["__file","index.html.vue"]]);export{hn as default};
