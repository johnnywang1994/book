import{_ as t,c as l,b as s,a as e,d as p,r as o,o as c}from"./app-CD0kgWCL.js";const i={};function r(u,n){const a=o("SocialBlock");return c(),l("div",null,[n[0]||(n[0]=s("h1",{id:"temporal-typescript-sdk-學習筆記",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#temporal-typescript-sdk-學習筆記"},[s("span",null,"Temporal Typescript SDK 學習筆記")])],-1)),e(a,{hashtags:"javascript,typescript,temporal,message quene,nodejs"}),n[1]||(n[1]=p(`<p>Hi 大家好，這篇是紀錄學習基礎 Temporal Typescript SDK 的介紹與筆記(Temporal 支援多種語言使用)，旨在快速學習與上手理解，雖然整理完文章還是很長 XDDDDD（學到崩潰</p><p>詳細介紹建議查看官方文件會更清楚喔，本篇是個人閱讀與前輩指點整理而成，感謝前輩指點迷津帶我飛～</p><h2 id="temporal-是什麼" tabindex="-1"><a class="header-anchor" href="#temporal-是什麼"><span>Temporal 是什麼？</span></a></h2><p>Temporal 是一個分布式、易擴展、持久且高度可用的工作編排引擎（<code>workflow engine</code>），用統一的 API 替許多日常的定時工作、排期工作進行編排自動化的長時間運行業務邏輯（比如訂閱扣款、爬蟲資料刷新等等）。</p><p>其中以五個概念為核心： <code>Task</code>, <code>Activity</code>, <code>Workflow</code>, <code>Worker</code>, <code>Client</code></p><h2 id="task" tabindex="-1"><a class="header-anchor" href="#task"><span>Task</span></a></h2><p>temporal 中的 taskQuene 中包含兩個 quene，<code>workflowTaskQuene</code>, <code>activityTaskQuene</code>，兩者分別存放對應的 task，所以 task 也分為 <code>workflowTask</code>, <code>activityTask</code>，兩者的區別後續會提到，這邊可以先大概有個概念，詳細可參考官方的圖如下</p><ul><li><a href="https://docs.temporal.io/tasks/" target="_blank" rel="noopener noreferrer">Temporal Task</a><img src="https://docs.temporal.io/assets/images/task-queue-3ae3eb770a166dbd709455a8a2dd6748.svg" alt=""></li></ul><h2 id="activity" tabindex="-1"><a class="header-anchor" href="#activity"><span>Activity</span></a></h2><p>一個包含程式執行環境的<code>活動</code>功能，通常為實際執行程式邏輯，處理的動作比起 workflow 較為單一，activity 在實際被 workflow 使用時會透過 <code>proxyActivities</code> 包裹，才會真正被定義 taskQuene</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="workflow" tabindex="-1"><a class="header-anchor" href="#workflow"><span>Workflow</span></a></h2><p>一個 Workflow 是由開發者定義的 Temporal 內部最小執行單元，包含一段無副作用的執行過程，每個 <code>workflow execution</code> 都擁有一個本地狀態，並獨佔訪問權，其他 workflow 無法直接訪問，workflow 彼此間以 <code>並行</code> 的方式執行，互不影響，若 workflow 彼此需要溝通可以透過 <code>傳遞 signal</code> 的方式進行</p><p>workflow 是一個可重入的過程，包含可恢復、反應式，不論設定多久，或是系統故障，將會自動重啟並重試</p><ul><li><code>可恢復</code>：指 process 在因執行失敗，或者因執行等待而暫停後，可以繼續執行的能力</li><li><code>反應式</code>：指 process 可以對外部事件作出反應的能力</li></ul><h3 id="在-workflow-中取得-workflowinfo" tabindex="-1"><a class="header-anchor" href="#在-workflow-中取得-workflowinfo"><span>在 workflow 中取得 workflowInfo</span></a></h3><p>呼叫 <code>workflowInfo</code> 可以取得當前 workflow 的資訊，比如 workflowId</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> workflowInfo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/workflow&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> workflowId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">workflowInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在-workflow-中呼叫-activity" tabindex="-1"><a class="header-anchor" href="#在-workflow-中呼叫-activity"><span>在 workflow 中呼叫 activity</span></a></h3><p>在 workflow 中的環境不是程式環境(此為nodejs)，而是一個特殊執行環境，故 activity 方法需透過 <code>proxyActivities</code> 解構之後才能使用，名稱與原來的方法相同</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// workflows.ts</span></span>
<span class="line"><span class="token comment">// 此為 temporal workflow 執行環境</span></span>
<span class="line"><span class="token comment">// 執行流程看似一般程式，但其實背後 temporal 會將不同 task 分發出去給 workers 執行</span></span>
<span class="line"><span class="token comment">// 這裏僅算是一個 workflow 工作流程的定義區</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> proxyActivities <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/workflow&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token operator">*</span> <span class="token keyword">as</span> activities <span class="token keyword">from</span> <span class="token string">&#39;./activities&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> greet <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">proxyActivities</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> activities<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  startToCloseTimeout<span class="token operator">:</span> <span class="token string">&#39;30s&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// 這邊可以定義被 proxy 的 activity 實際會觸發什麼 taskQuene</span></span>
<span class="line">  <span class="token comment">// 讓對應監聽的 worker 去處理這個 activiyTask</span></span>
<span class="line">  <span class="token comment">// 預設情況下會觸發 \`default\` worker</span></span>
<span class="line">  <span class="token comment">// taskQuene: &#39;default&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/** A workflow that simply calls an activity */</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在-workflow-中呼叫-child-workflow" tabindex="-1"><a class="header-anchor" href="#在-workflow-中呼叫-child-workflow"><span>在 workflow 中呼叫 child workflow</span></a></h3><p>如果需要在當前 workflow 中調用另一個子 workflow，可以使用兩個方法</p><ul><li><code>executeChild</code>: 可回傳 promise await 等子 workflowTask 執行完（推薦）</li><li><code>startChild</code>: 丟一個 child workflowTask 執行出去後就不管他</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// workflows.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> executeChild<span class="token punctuation">,</span> proxyActivities <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/workflow&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token operator">*</span> <span class="token keyword">as</span> activities <span class="token keyword">from</span> <span class="token string">&#39;./activities&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> greet <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">proxyActivities</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> activities<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  startToCloseTimeout<span class="token operator">:</span> <span class="token string">&#39;30s&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">childExample</span><span class="token punctuation">(</span><span class="token punctuation">{</span> msg <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Johnny is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">executeChild</span><span class="token punctuation">(</span>childExample<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> msg<span class="token operator">:</span> <span class="token string">&#39;very well&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    workflowId<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">child-example-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// taskQueue: &#39;default&#39;, // 這裡也可以指定 taskQuene</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="worker" tabindex="-1"><a class="header-anchor" href="#worker"><span>Worker</span></a></h2><p>worker 是 temporal 裡面實際執行 task 的 <code>工作者</code>，每個 worker 會指定監聽的 taskQuene 目標，每當監聽的 quene 新增 task 時就會主動去 <code>poll</code> task 來執行</p><h3 id="建立-worker" tabindex="-1"><a class="header-anchor" href="#建立-worker"><span>建立 Worker</span></a></h3><p>建立時綁定每個 worker 對應可以使用的 <code>activities</code>, <code>workflowsPath</code>，但 worker 不一定要綁定 workflow，可以只綁定 activities，並在其他 workflow 中呼叫時透過 <code>taskQuene</code> 指定讓某個特定處理 activities 的 worker 處理</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Worker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/worker&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> activities <span class="token keyword">from</span> <span class="token string">&#39;./activities&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> workers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">await</span> Worker<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">workflowsPath</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;./workflows&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    activities<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">taskQueue</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  workers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> activitiesWorker <span class="token operator">=</span> <span class="token keyword">await</span> Worker<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    activities<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">taskQuene</span><span class="token operator">:</span> <span class="token string">&#39;hello-world&#39;</span> <span class="token comment">// proxyActivities 時指定為 hello-world，這個 worker 就會去處理～</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  workers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>workers<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  workers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> w<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="client" tabindex="-1"><a class="header-anchor" href="#client"><span>Client</span></a></h2><p>client 是提供用戶端開發時進行調用 workflow task 的主要途徑，也可以透過 command line 進行調用</p><blockquote><p>前提是你的 temporal server 已經啟動就緒</p></blockquote><h3 id="programming" tabindex="-1"><a class="header-anchor" href="#programming"><span>Programming</span></a></h3><p>建立新的 temporal workflow client 實例</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// client.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Workflow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/workflow&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Connection<span class="token punctuation">,</span> WorkflowClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/client&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> <span class="token literal-property property">client</span><span class="token operator">:</span> WorkflowClient<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> Connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Connect to localhost with default ConnectionOptions.</span></span>
<span class="line">      <span class="token comment">// In production, pass options to the Connection constructor to configure TLS and other settings:</span></span>
<span class="line">      <span class="token comment">// address: &#39;foo.bar.tmprl.cloud&#39;, // as provisioned</span></span>
<span class="line">      <span class="token comment">// tls: {} // as provisioned</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkflowClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      connection<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">namespace</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> <span class="token comment">// change if you have a different namespace</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> client<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>透過 <code>client</code> 物件調用執行 workflow</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./client&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> example <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./workflows&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>example<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Temporal&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 參數傳遞給 example workflow</span></span>
<span class="line">    <span class="token literal-property property">taskQueue</span><span class="token operator">:</span> <span class="token string">&#39;hello-world&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 加入的 taskQuene 名稱，對應 worker 必須能處理此 workflow</span></span>
<span class="line">    <span class="token literal-property property">workflowId</span><span class="token operator">:</span> <span class="token string">&#39;example-workflow-id&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// workflow id reuse policy 參考結尾列表</span></span>
<span class="line">    <span class="token literal-property property">workflowIdReusePolicy</span><span class="token operator">:</span> WorkflowIdReusePolicy<span class="token punctuation">.</span><span class="token constant">WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// retry policy</span></span>
<span class="line">    <span class="token literal-property property">retry</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">maximumAttempts</span><span class="token operator">:</span> <span class="token number">20</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> handle<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="command-line" tabindex="-1"><a class="header-anchor" href="#command-line"><span>Command line</span></a></h3><ul><li><a href="https://docs.temporal.io/tctl/how-to-use-tctl/" target="_blank" rel="noopener noreferrer">How to use tctl?</a><br> 可以透過 command line 進行調用 temporal workflow</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 環境變數設為預設（local）</span></span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">TEMPORAL_CLI_ADDRESS</span><span class="token operator">=</span></span>
<span class="line"><span class="token comment"># 執行 workflow</span></span>
<span class="line">tctl wf start <span class="token parameter variable">--tq</span> default <span class="token parameter variable">-i</span> <span class="token string">&#39;[workflow-args]&#39;</span> <span class="token parameter variable">-w</span> <span class="token punctuation">[</span>workflow-id<span class="token punctuation">]</span> <span class="token parameter variable">--wt</span> <span class="token punctuation">[</span>workflow-type<span class="token punctuation">]</span></span>
<span class="line"><span class="token comment"># 取消 workflow</span></span>
<span class="line">tctl wf cancel <span class="token parameter variable">-w</span> <span class="token punctuation">[</span>workflow-id<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="signals-querys" tabindex="-1"><a class="header-anchor" href="#signals-querys"><span>Signals &amp; Querys</span></a></h2><p>這兩者都是用在與 <code>workflow</code> 進行溝通傳遞訊息用，但有些微區別</p><ul><li><a href="https://docs.temporal.io/workflows/#signals" target="_blank" rel="noopener noreferrer">Signals</a><br> setHandle 僅可以在 workflow 執行特定動作，無法返回狀態</li><li><a href="https://docs.temporal.io/workflows/#queries" target="_blank" rel="noopener noreferrer">Querys</a><br> setHandle 可以返回 workflow 內部狀態</li></ul><h3 id="signals-範例" tabindex="-1"><a class="header-anchor" href="#signals-範例"><span>Signals 範例</span></a></h3><p>以下範例為一個訂閱機制 workflow</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// workflows.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineSignal<span class="token punctuation">,</span> setHandler<span class="token punctuation">,</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/worker&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> cancelSubscription <span class="token operator">=</span> <span class="token function">defineSignal</span><span class="token punctuation">(</span><span class="token string">&#39;cancelSignal&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">SubscriptionWorkflow</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token parameter"><span class="token literal-property property">email</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">trialPeriod</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> isCanceled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// internal variable to track cancel state</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">setHandler</span><span class="token punctuation">(</span>cancelSubscription<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">(</span>isCanceled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">await</span> acts<span class="token punctuation">.</span><span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span>trialPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sleep will wait a fixed time</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>isCanceled<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> acts<span class="token punctuation">.</span><span class="token function">sendCancellationEmailDuringTrialPeriod</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> acts<span class="token punctuation">.</span><span class="token function">sendSubscriptionOverEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="invoke-by-client" tabindex="-1"><a class="header-anchor" href="#invoke-by-client"><span>- Invoke by Client</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// other-client.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> cancelSubscription <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./workflows&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> client <span class="token keyword">from</span> <span class="token string">&#39;./client&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">signalWorkflow</span><span class="token punctuation">(</span><span class="token parameter">workflowId<span class="token punctuation">,</span> signalName<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> handle <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span>workflowId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">await</span> handle<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span>signalName<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">signalWorkflow</span><span class="token punctuation">(</span><span class="token string">&#39;my-workflow-id&#39;</span><span class="token punctuation">,</span> cancelSubscription<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="using-condition-with-timeouts" tabindex="-1"><a class="header-anchor" href="#using-condition-with-timeouts"><span>- Using <code>condition</code> with timeouts</span></a></h4><p><code>sleep(ms)</code> 將執行延遲固定時間，<code>condition</code> 將執行無限期延遲，直到給定的條件函數判斷返回 <code>true</code>，假設有個檢查函數，我們要判斷檢查是否完全執行完畢可以寫成這樣</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// workflows.ts</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> childCompletedSignal <span class="token operator">=</span> <span class="token function">defineSignal</span><span class="token punctuation">(</span>childCompletedSignal<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">checkDataWorkflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> completedChildWorkflows <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> totalChildWorkflows <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">setHandler</span><span class="token punctuation">(</span>childCompletedSignal<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    completedChildWorkflows <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> workflowId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">workflowInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> dataList <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getChildData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// activity to call rest api to get childData</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> childHandles <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">startChild</span><span class="token punctuation">(</span>checkPartialData<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">parentWorkflowId</span><span class="token operator">:</span> workflowId<span class="token punctuation">,</span></span>
<span class="line">        data</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">workflowId</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">check-child-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  totalChildWorkflows <span class="token operator">=</span> childHandles<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 這邊其實可以用 executeChild 搭配 Promise.all 更直覺，但這只是一個示範</span></span>
<span class="line">  <span class="token comment">// wait until all child complete</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">condition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> completedChildWorkflows <span class="token operator">===</span> totalChildWorkflows<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">checkPartialData</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span></span>
<span class="line">  parentWorkflowId<span class="token punctuation">,</span></span>
<span class="line">  data</span>
<span class="line"><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// check data...</span></span>
<span class="line">  <span class="token comment">// send signal to parent by parentWorkflowId</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">signalWorkflow</span><span class="token punctuation">(</span>parentWorkflowId<span class="token punctuation">,</span> childCompletedSignal<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>甚至還有 <code>inlineSignal</code>，詳情可見<a href="https://docs.temporal.io/typescript/how-to-use-signals-in-typescript/#declare-your-signals-dynamically" target="_blank" rel="noopener noreferrer">Signals官網說明</a></p></blockquote><h3 id="querys-範例" tabindex="-1"><a class="header-anchor" href="#querys-範例"><span>Querys 範例</span></a></h3><p>透過 query 取得更新資料 workflow 的更新狀態</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> userInfoStatusQuery <span class="token operator">=</span> <span class="token function">defineQuery</span><span class="token punctuation">(</span><span class="token string">&#39;userInfoStatusQuery&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">updateUserInfoWorkflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> completedAt <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// return workflow status when being queried</span></span>
<span class="line">  <span class="token function">setHandle</span><span class="token punctuation">(</span>userInfoStatusQuery<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>completedAt<span class="token punctuation">,</span></span>
<span class="line">    completedAt<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">updateUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// activity to update user info</span></span>
<span class="line"></span>
<span class="line">  completedAt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 即使 workflow completed 後，query 此 workflowId 仍然能取得他的狀態</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="query-by-client" tabindex="-1"><a class="header-anchor" href="#query-by-client"><span>Query by Client</span></a></h3><p>跟 Signals 的處理幾乎相同，差別在可以返回狀態</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// other-client.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> userInfoStatusQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./workflows&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> client <span class="token keyword">from</span> <span class="token string">&#39;./client&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">queryWorkflow</span><span class="token punctuation">(</span><span class="token parameter">workflowId<span class="token punctuation">,</span> signalName<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> handle <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span>workflowId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">await</span> handle<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>signalName<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">queryWorkflow</span><span class="token punctuation">(</span><span class="token string">&#39;my-workflow-id&#39;</span><span class="token punctuation">,</span> userInfoStatusQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>completedAt<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="custom-usestate-function" tabindex="-1"><a class="header-anchor" href="#custom-usestate-function"><span>custom useState function</span></a></h3><ul><li><a href="https://docs.temporal.io/typescript/workflows#signals-and-queries-design-patterns" target="_blank" rel="noopener noreferrer">Link</a></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> wf <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/workflow&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> initialValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> signal <span class="token operator">=</span> wf<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">defineSignal</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> query <span class="token operator">=</span> wf<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">defineQuery</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> state<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=</span> initialValue<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    signal<span class="token punctuation">,</span></span>
<span class="line">    query<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// need to use closure because function doesn&#39;t rerun unlike React Hooks</span></span>
<span class="line">      <span class="token keyword">return</span> state<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span>newVal<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      state <span class="token operator">=</span> newVal<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// usage in Workflow file</span></span>
<span class="line"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;your-store&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">YourWorkflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  wf<span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>signal<span class="token punctuation">,</span> <span class="token punctuation">(</span>newValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// console.log(&#39;updating&#39;, newValue) // optional but useful for debugging</span></span>
<span class="line">    store<span class="token punctuation">.</span>value <span class="token operator">=</span> newValue<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  wf<span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>query<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sleeping for &#39;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    wf<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>value<span class="token operator">++</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// you can mutate the value as well</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// usage in Client file</span></span>
<span class="line"><span class="token keyword">await</span> handle<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>signal<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> storeState <span class="token operator">=</span> handle<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">query</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="continue-as-new" tabindex="-1"><a class="header-anchor" href="#continue-as-new"><span>Continue as New</span></a></h2><ul><li><a href="https://docs.temporal.io/workflows/#continue-as-new" target="_blank" rel="noopener noreferrer">continue-as-new</a></li><li><a href="https://docs.temporal.io/java/workflows/#large-event-histories" target="_blank" rel="noopener noreferrer">large-event-histories</a><br> 打開 Temporal Web UI 可以看到每個 worker 執行 task 時，左側的編號就是 event 編號，預設最大單一 worker 能夠執行的 events 數量為 50000，超過就必須 renew，建議可以如下面方式以分頁的形式 1000 筆執行一個 <code>partialWorkflow</code>，並透過 while loop 判定是否還有剩餘需執行的內容，避免效能崩潰</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// workflows.ts</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchAllData</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span></span>
<span class="line">  startPage<span class="token punctuation">,</span></span>
<span class="line">  pageSize</span>
<span class="line"><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> hasNextPage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> page <span class="token operator">=</span> startPage<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>hasNextPage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    hasNextPage <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">executeChild</span><span class="token punctuation">(</span>fetchPartialData<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">workflowId</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">fetch-partial-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>page<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    page <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchPartialData</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token parameter">page <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  pageSize <span class="token operator">=</span> <span class="token number">1000</span></span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// getUsers could be your activity to call rest api to get users</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> userIds<span class="token punctuation">,</span> pageInfo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUsers</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span></span>
<span class="line">    userIds<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">executeChild</span><span class="token punctuation">(</span>fetchData<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">workflowId</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">fetch-user-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> pageInfo<span class="token punctuation">.</span>hasNextPage</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do something with userId</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="install-example" tabindex="-1"><a class="header-anchor" href="#install-example"><span>Install Example</span></a></h2><p>Temporal 官方提供了快速搭建整套環境的 example，只需要使用 <code>npx</code> 快速就可以快速下載試用</p><h3 id="下載-example" tabindex="-1"><a class="header-anchor" href="#下載-example"><span>下載 example</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ npx @temporalio/create@latest ./myfolder</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="下載-docker-compose-環境配置" tabindex="-1"><a class="header-anchor" href="#下載-docker-compose-環境配置"><span>下載 docker-compose 環境配置</span></a></h3><p>獲取最新的 temporal docker-compose 配置檔案，包含不同環境的設定，下載後啟動即可</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> clone https://github.com/temporalio/docker-compose.git temporal-server</span>
<span class="line">$ <span class="token builtin class-name">cd</span> temporal-server</span>
<span class="line">$ <span class="token function">docker-compose</span> up</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="temporal-web-ui" tabindex="-1"><a class="header-anchor" href="#temporal-web-ui"><span>Temporal Web UI</span></a></h3><p>Temporal 現在提供兩個 version 的 Web UI，就依照喜好選擇你要看哪個摟～，預設配置裡兩個會同時啟動（未來不知道會不會把 v1 移除）</p><ul><li><a href="http://localhost:8088/" target="_blank" rel="noopener noreferrer">Temporal Web UI v1</a>: port 8088</li><li><a href="http://localhost:8080/" target="_blank" rel="noopener noreferrer">Temporal Web UI v2</a>: port 8080</li></ul><h2 id="其他範例" tabindex="-1"><a class="header-anchor" href="#其他範例"><span>其他範例</span></a></h2><h3 id="製作-timeout-效果" tabindex="-1"><a class="header-anchor" href="#製作-timeout-效果"><span>製作 timeout 效果</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">wrapTimeout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">targetHandle<span class="token punctuation">,</span> maxWaitSeconds <span class="token operator">=</span> <span class="token number">30</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    targetHandle<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> maxWaitSeconds <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">runWorkflow</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> wfHandle <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>myWorkflow<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">workflowId</span><span class="token operator">:</span> <span class="token string">&#39;my-workflow-id&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// workflow 跑超過 30s 就直接往後不等，避免卡住</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">wrapTimeout</span><span class="token punctuation">(</span>wfHandle<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token keyword">await</span> wfHandle<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>checkStatusQuery<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> status<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="獲取-workflow-狀態" tabindex="-1"><a class="header-anchor" href="#獲取-workflow-狀態"><span>獲取 workflow 狀態</span></a></h3><p>Temporal 在 workflow handle 物件中有提供以下方法可以獲得當前指定 workflow 的相關資訊狀態</p><ul><li><a href="https://docs.temporal.io/typescript/clients/#workflow-handle-apis" target="_blank" rel="noopener noreferrer">Workflow Handle API methods</a></li><li><a href="https://typescript.temporal.io/api/enums/proto.temporal.api.enums.v1.workflowexecutionstatus/" target="_blank" rel="noopener noreferrer">WorkflowExecutionStatus</a> 使用這個變數會需要先下載 <code>@temporalio/proto</code> 這個擴充包喔</li></ul><p>下面範例是如何在當前 workflow 中取消自己的範例，例如結束 cronSchedule 的情況，因為 workflow 環境無法使用 client 工具，必須拉出來到 activity 中使用</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// my-activities.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> temporal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/proto&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> getClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./client&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> WorkflowExecutionStatus <span class="token punctuation">}</span> <span class="token operator">=</span> temporal<span class="token punctuation">.</span>api<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>v1<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">terminateWorkflow</span><span class="token punctuation">(</span>workflowId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> wfHandle <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span>workflowId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 取得 workflow handle 的當前狀態</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> status <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> wfHandle<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 判斷 code 狀態是否處在 running</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span>code <span class="token operator">===</span> WorkflowExecutionStatus<span class="token punctuation">.</span><span class="token constant">WORKFLOW_EXECUTION_STATUS_RUNNING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 終止 cronSchedule，若使用 cancel 只會停止當前的 workflow</span></span>
<span class="line">    <span class="token comment">// https://docs.temporal.io/concepts/what-is-a-temporal-cron-job/#how-to-stop-a-temporal-cron-job</span></span>
<span class="line">    <span class="token keyword">await</span> wfHandle<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// workflow.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> proxyActivities<span class="token punctuation">,</span> workflowInfo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/workflow&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myActivities <span class="token keyword">from</span> <span class="token string">&#39;./myActivities&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> terminateWorkflow <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">proxyActivities</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> myActivities<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  startToCloseTimeout<span class="token operator">:</span> <span class="token string">&#39;30s&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">TestWorkflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> workflowId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">workflowInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">terminateWorkflow</span><span class="token punctuation">(</span>workflowId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>今天就介紹到這拉，後續如果有其他新的想法也會持續更新紀錄在這，感謝收看，下次再見 =V=</p>`,85)),e(a,{hashtags:"javascript,typescript,temporal,message quene,nodejs"}),n[2]||(n[2]=p('<h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ul><li><a href="https://www.youtube.com/watch?v=66zQ8nrW-mA" target="_blank" rel="noopener noreferrer">Intro to Temporal with TypeScript SDK + Q&amp;A</a></li><li><a href="https://docs.temporal.io/" target="_blank" rel="noopener noreferrer">Temporal Docs</a></li><li><a href="https://typescript.temporal.io/" target="_blank" rel="noopener noreferrer">Temporal Typescript Reference</a></li><li><a href="https://docs.temporal.io/concepts/what-is-a-signal/" target="_blank" rel="noopener noreferrer">What is a Signal</a></li><li><a href="https://typescript.temporal.io/api/enums/client.WorkflowIdReusePolicy" target="_blank" rel="noopener noreferrer">WorkflowIdReusePolicy</a></li><li><a href="https://typescript.temporal.io/api/interfaces/client.workflowoptions/#retry" target="_blank" rel="noopener noreferrer">RetryPolicy</a></li></ul>',2))])}const d=t(i,[["render",r],["__file","temporal-typescript-sdk.html.vue"]]),m=JSON.parse('{"path":"/articles/js/temporal-typescript-sdk.html","title":"Temporal Typescript SDK 學習筆記","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"Temporal 是什麼？","slug":"temporal-是什麼","link":"#temporal-是什麼","children":[]},{"level":2,"title":"Task","slug":"task","link":"#task","children":[]},{"level":2,"title":"Activity","slug":"activity","link":"#activity","children":[]},{"level":2,"title":"Workflow","slug":"workflow","link":"#workflow","children":[{"level":3,"title":"在 workflow 中取得 workflowInfo","slug":"在-workflow-中取得-workflowinfo","link":"#在-workflow-中取得-workflowinfo","children":[]},{"level":3,"title":"在 workflow 中呼叫 activity","slug":"在-workflow-中呼叫-activity","link":"#在-workflow-中呼叫-activity","children":[]},{"level":3,"title":"在 workflow 中呼叫 child workflow","slug":"在-workflow-中呼叫-child-workflow","link":"#在-workflow-中呼叫-child-workflow","children":[]}]},{"level":2,"title":"Worker","slug":"worker","link":"#worker","children":[{"level":3,"title":"建立 Worker","slug":"建立-worker","link":"#建立-worker","children":[]}]},{"level":2,"title":"Client","slug":"client","link":"#client","children":[{"level":3,"title":"Programming","slug":"programming","link":"#programming","children":[]},{"level":3,"title":"Command line","slug":"command-line","link":"#command-line","children":[]}]},{"level":2,"title":"Signals & Querys","slug":"signals-querys","link":"#signals-querys","children":[{"level":3,"title":"Signals 範例","slug":"signals-範例","link":"#signals-範例","children":[]},{"level":3,"title":"Querys 範例","slug":"querys-範例","link":"#querys-範例","children":[]},{"level":3,"title":"Query by Client","slug":"query-by-client","link":"#query-by-client","children":[]},{"level":3,"title":"custom useState function","slug":"custom-usestate-function","link":"#custom-usestate-function","children":[]}]},{"level":2,"title":"Continue as New","slug":"continue-as-new","link":"#continue-as-new","children":[]},{"level":2,"title":"Install Example","slug":"install-example","link":"#install-example","children":[{"level":3,"title":"下載 example","slug":"下載-example","link":"#下載-example","children":[]},{"level":3,"title":"下載 docker-compose 環境配置","slug":"下載-docker-compose-環境配置","link":"#下載-docker-compose-環境配置","children":[]},{"level":3,"title":"Temporal Web UI","slug":"temporal-web-ui","link":"#temporal-web-ui","children":[]}]},{"level":2,"title":"其他範例","slug":"其他範例","link":"#其他範例","children":[{"level":3,"title":"製作 timeout 效果","slug":"製作-timeout-效果","link":"#製作-timeout-效果","children":[]},{"level":3,"title":"獲取 workflow 狀態","slug":"獲取-workflow-狀態","link":"#獲取-workflow-狀態","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1662431468000,"contributors":[{"name":"JohnnyWang","username":"JohnnyWang","email":"johnnywang@test.com","commits":4,"url":"https://github.com/JohnnyWang"}]},"filePathRelative":"articles/js/temporal-typescript-sdk.md"}');export{d as comp,m as data};
