import{_ as c,r as p,o as l,c as i,a,d as n,e as s,f as t}from"./app-6ffe09b2.js";const r={},u=n("h1",{id:"快速上手-nextjs-v13-基礎觀念-approuter-篇",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#快速上手-nextjs-v13-基礎觀念-approuter-篇","aria-hidden":"true"},"#"),s(" 快速上手 NextJS v13 - 基礎觀念 AppRouter 篇")],-1),d=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>Hi 大家好，我是 Johnny，這陣子公司同事開始接觸到 Next13 相關的開發，覺得我也是時候來研究下，索性花了幾個小時快速體驗了一下，並將一些我覺得比較重要的特點記錄下來，這篇是我速讀 Next13 官方文件後整理的一個隨性筆記！主要包含 <code>基礎觀念</code>, <code>AppRouter</code> 的規則等等，<code>Data Fetching</code> 會再出一篇介紹，本篇主要專注在 Next13 的新功能、觀念上面。</p><blockquote><p>筆者撰寫文章時 NextJS 版本為 <code>v13.4.4</code></p></blockquote><h2 id="首先-nextjs-v13-究竟做了啥" tabindex="-1"><a class="header-anchor" href="#首先-nextjs-v13-究竟做了啥" aria-hidden="true">#</a> 首先 NextJS v13 究竟做了啥？</h2><p>先簡單總結幾個最大的特點</p><ul><li><code>初始化 0 配置</code>，讓新手也能專注在理解 NextJS 的資料夾結構、概念，而不是浪費時間在一堆非必要的初始設定、配置</li><li>新的 <code>App Router 模式</code>，提供高度客製化 Routing 的能力</li><li><code>Server Component 模式</code>及相關好用 API，提供開發前端程式時的資料處理安全性、SEO 優化能力、以及盡可能地減少 client side 消耗的處理效能</li><li><code>Server-Centric routing</code> 快速反應路由切換，Router 內建 <code>in-memory client-side cache</code> 機制，避免不必要的頁面內容 reload 影響效能</li></ul><p>以上是我目前對於 NextJS v13 的一點理解，下面就來實際看看程式碼吧！</p><h2 id="初始化-0-配置" tabindex="-1"><a class="header-anchor" href="#初始化-0-配置" aria-hidden="true">#</a> 初始化 0 配置</h2><p>透過 <code>yarn create next-app</code> 快速建立新的 NextApp，點開 <code>next.config.js</code> 只有下面這樣，對於新用戶來說可以完全忽略這個 config 設定部分！雖然後期開發一定會需要調整，但在初期建立專案或新手來說非常方便。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;next&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>NextConfig<span class="token punctuation">}</span></span> */</span>
<span class="token keyword">const</span> nextConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> nextConfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="server-component-vs-client-component" tabindex="-1"><a class="header-anchor" href="#server-component-vs-client-component" aria-hidden="true">#</a> Server Component VS Client Component</h2><p>預設為 <code>Server Component</code>，可透過在檔案最上方定義 <code>use client</code>, <code>use server</code> 明確設定</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 預設其實就是 use server，除了 error handling component</span>
<span class="token string">&#39;use server&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> Image <span class="token keyword">from</span> <span class="token string">&#39;next/image&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello Home</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在 server component 中使用像是 <code>useEffect</code>, <code>useState</code> 等 client side only 的 hook 將會報錯</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ReactServerComponentsError:
You&#39;re importing a component that needs useState. It only works in a Client Component but none of its parents are marked with &quot;use client&quot;, so they&#39;re Server Components by default.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>想要像原本 <code>Pages Router</code> 方式撰寫 client side component 可以這樣寫</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token string">&#39;use client&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> Image <span class="token keyword">from</span> <span class="token string">&#39;next/image&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 下面就是 Pages Router 方式的原本寫法，這裡省略 =V=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="when-to-use-server-and-client-components" tabindex="-1"><a class="header-anchor" href="#when-to-use-server-and-client-components" aria-hidden="true">#</a> When to use Server and Client Components?</h3>`,18),k={href:"https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns#when-to-use-server-and-client-components",target:"_blank",rel:"noopener noreferrer"},v=t('<p>底下是一個根據官網資訊製作的簡單對照表格，僅供參考</p><table><thead><tr><th>What do you need to do?</th><th>Server Component</th><th>Client Component</th></tr></thead><tbody><tr><td>Fetch data</td><td>✅</td><td>❌</td></tr><tr><td>Access backend resources (directly)</td><td>✅</td><td>❌</td></tr><tr><td>Keep sensitive information on the server (access tokens, API keys, etc)</td><td>✅</td><td>❌</td></tr><tr><td>Keep large dependencies on the server / Reduce client-side JavaScript</td><td>✅</td><td>❌</td></tr><tr><td>Add interactivity and event listeners (onClick(), onChange(), etc)</td><td>❌</td><td>✅</td></tr><tr><td>Use State and Lifecycle Effects (useState(), useReducer(), useEffect(), etc)</td><td>❌</td><td>✅</td></tr><tr><td>Use browser-only APIs</td><td>❌</td><td>✅</td></tr><tr><td>Use custom hooks that depend on state, effects, or browser-only APIs</td><td>❌</td><td>✅</td></tr><tr><td>Use React Class components</td><td>❌</td><td>✅</td></tr></tbody></table><h2 id="什麼是-app-router" tabindex="-1"><a class="header-anchor" href="#什麼是-app-router" aria-hidden="true">#</a> 什麼是 App Router？</h2><p><code>App Router</code> 是 v13 新介紹的一種 routing 方式，與之相對過去的方式被稱作 <code>Pages Router</code>，可以在官方網站左側按鈕切換兩種路由模式的 Documentation</p><blockquote><p>為求說明方便，底下內容皆以 Typescript 進行說明，<code>App Router</code>簡稱<code>A.R</code>，<code>Pages Router</code>簡稱<code>P.R</code></p></blockquote><p>首先了解一下一個概念，比較好理解後面提到的東西：</p><ul><li><code>P.R</code>: 以 <code>File</code> 為單位定義頁面，該頁面相關設定必須放在外部管理、引入，較難客製化</li><li><code>A.R</code>: 以 <code>Folder</code> 為單位定義頁面，該頁面所有相關設定可直接放在 folder 層級中，可高度客製化</li></ul><h3 id="app-資料夾裡都裝什麼" tabindex="-1"><a class="header-anchor" href="#app-資料夾裡都裝什麼" aria-hidden="true">#</a> app 資料夾裡都裝什麼？</h3><p><code>A.R</code> 方式在 <code>app</code> 資料夾中主要可以使用以下幾種 NextJS 會進行處理的文件</p><ul><li><code>page.tsx</code>: 定義當前層級頁面(與 <code>route.tsx</code> 不可同時存在同一層中) <ul><li><code>route.tsx</code>: 定義當前層級 route handler(類似<code>P.R</code>方式時的<code>pages/api/xxx.tsx</code>)</li></ul></li><li><code>layout.tsx</code>: 定義當前層級與子層共享的 UI 版型(若父層有 layout，會被父層 layout 包裹起來) <ul><li><code>template.tsx</code>: 與 <code>layout</code> 類似，但在路由切換時會 remount 新的 instance（<code>layout</code> 若路由切換前後一樣，則相同部分不會被 remount 新 instance）</li></ul></li><li><code>loading.tsx</code>: 定義當前層級頁面與子層的 loading UI</li><li><code>error.tsx</code>: 定義當前層級頁面與子層的 error UI（不會 catch 同一層的 <code>layout.tsx</code> 錯誤，需要 catch <code>layout.tsx</code> 錯誤需要在上一層級的 <code>error.tsx</code> 中處理，若為 <code>rootLayout</code>，則請在 <code>global-error.tsx</code> 中處理） <ul><li><code>global-error.tsx</code>: 與 <code>error.tsx</code> 基本相同，但主要用來定義處理 <code>rootLayout</code> 的錯誤</li></ul></li><li><code>not-found.tsx</code>: 定義當 component 中呼叫 <code>notFound</code> 方法或是匹配不到任何頁面時的 UI</li></ul>',10),m={href:"https://nextjs.org/docs/getting-started/project-structure#app-routing-conventions",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"page-定義基本頁面",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#page-定義基本頁面","aria-hidden":"true"},"#"),s(" Page 定義基本頁面")],-1),h=n("code",null,"/",-1),b=n("code",null,"/about",-1),x={href:"https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes",target:"_blank",rel:"noopener noreferrer"},y=t('<ul><li><code>P.R</code>: <code>pages/index.tsx</code>, <code>pages/about.tsx</code></li><li><code>A.R</code>: <code>app/page.tsx</code>, <code>app/about/page.tsx</code></li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// `app/page.tsx` is the UI for the `/` URL</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, Home page!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>下圖是 Nested Routing 範例</strong><img src="https://nextjs.org/_next/image?url=%2Fdocs%2Fdark%2Fdefining-routes.png&amp;w=3840&amp;q=75" alt=""></p><h3 id="page-的特點" tabindex="-1"><a class="header-anchor" href="#page-的特點" aria-hidden="true">#</a> Page 的特點</h3>',4),f=n("li",null,[s("page 永遠是路由 Tree 的最末端葉片部分 "),n("img",{src:"https://nextjs.org/_next/image?url=%2Fdocs%2Fdark%2Fterminology-component-tree.png&w=3840&q=75",alt:""})],-1),_=n("li",null,"如果要讓該層路由可被 public 訪問，必須建立 page",-1),w=n("li",null,[s("page 預設為 "),n("code",null,"Server Component"),s("，但可以手動設定為 "),n("code",null,"Client Component")],-1),j={href:"https://nextjs.org/docs/app/building-your-application/data-fetching",target:"_blank",rel:"noopener noreferrer"},R=t(`<h2 id="layout-定義共享版型" tabindex="-1"><a class="header-anchor" href="#layout-定義共享版型" aria-hidden="true">#</a> Layout 定義共享版型</h2><p>以下兩種模式分別建立路徑 <code>/</code>, <code>/about</code> 頁面的 layout，其中 <code>/</code> 的 layout 會將 <code>/about</code> 的 layout 包裹在其中</p><ul><li><code>P.R</code>: 沒有內建，需手動處理完成需求</li><li><code>A.R</code>: <code>app/layout.tsx</code>, <code>app/about/layout.tsx</code></li></ul><blockquote><p>Layout 必須明確接收 prop <code>children</code>，並將其返回</p></blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">DashboardLayout</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  children<span class="token punctuation">,</span> <span class="token comment">// will be a page or nested layout</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">

      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>下圖是 Nested Layout 範例</strong><img src="https://nextjs.org/_next/image?url=%2Fdocs%2Fdark%2Ffile-conventions-component-hierarchy.png&amp;w=3840&amp;q=75" alt=""><img src="https://nextjs.org/_next/image?url=%2Fdocs%2Fdark%2Fnested-file-conventions-component-hierarchy.png&amp;w=3840&amp;q=75" alt=""></p><h3 id="layout-的特點" tabindex="-1"><a class="header-anchor" href="#layout-的特點" aria-hidden="true">#</a> Layout 的特點</h3>`,7),C=n("li",null,[n("code",null,"app"),s(" 資料夾中，最上層的 "),n("code",null,"layout.tsx"),s(" 被稱為 "),n("code",null,"RootLayout")],-1),S=n("li",null,[s("路由中的 "),n("code",null,"layout"),s(" 可以 nested，透過 "),n("code",null,"children"),s(" 層層包裹")],-1),q={href:"https://nextjs.org/docs/app/building-your-application/routing/route-groups",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"Route Groups",-1),L=n("li",null,[n("code",null,"layout"),s(" 預設為 "),n("code",null,"Server Component"),s("，除了 "),n("code",null,"RootLayout"),s(" 外，可以手動設為 "),n("code",null,"Client Component")],-1),F=n("h3",{id:"關於-rootlayout",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#關於-rootlayout","aria-hidden":"true"},"#"),s(" 關於 RootLayout")],-1),N=n("p",null,[s("基本上是用來取代 "),n("code",null,"P.R"),s(" 方式中的 "),n("code",null,"_app"),s(", "),n("code",null,"_document")],-1),I=n("li",null,[s("必須存在且為 "),n("code",null,"Server Component"),s("，將套用到整個應用程式頁面當中")],-1),P=n("li",null,[s("必須在其中包含 "),n("code",null,"<html> and <body>"),s(" tag，因為 NextJS 並沒有為用戶定義")],-1),E={href:"https://nextjs.org/docs/app/building-your-application/routing/route-groups",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"Route Groups",-1),T=n("code",null,"multiple root layout",-1),J={href:"https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config",target:"_blank",rel:"noopener noreferrer"},H=n("h2",{id:"head-頭-去哪了",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#head-頭-去哪了","aria-hidden":"true"},"#"),s(" Head（頭?）去哪了？")],-1),G=n("code",null,"<Head>",-1),D={href:"https://nextjs.org/docs/app/api-reference/functions/generate-metadata#the-metadata-object",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"metadata object",-1),V={href:"https://nextjs.org/docs/app/api-reference/functions/generate-metadata#generatemetadata-function",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"generateMetadata function",-1),z=t(`<div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Metadata <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> metadata<span class="token operator">:</span> Metadata <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&#39;Next.js&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>官方良心建議</strong>：盡量使用 <code>Metadata API</code>，不要手動在 <code>RootLayout</code> 使用 <code>&lt;head&gt;</code> 加入 <code>&lt;title&gt;</code>, <code>&lt;meta&gt;</code>等，前者會自動處理套用 <code>streaming</code>, <code>de-duplicating</code> <code>&lt;head&gt;</code> 標籤的功能</p></blockquote><h2 id="連結、路由切換-linking-and-navigating" tabindex="-1"><a class="header-anchor" href="#連結、路由切換-linking-and-navigating" aria-hidden="true">#</a> 連結、路由切換 - Linking and Navigating</h2><h3 id="link" tabindex="-1"><a class="header-anchor" href="#link" aria-hidden="true">#</a> Link</h3>`,4),K=n("code",null,"<Link>",-1),O={href:"https://nextjs.org/docs/app/api-reference/components/link",target:"_blank",rel:"noopener noreferrer"},W=t('<h3 id="navigating-流程機制" tabindex="-1"><a class="header-anchor" href="#navigating-流程機制" aria-hidden="true">#</a> Navigating 流程機制</h3><ul><li>route transition 被 <code>&lt;Link&gt;</code> or <code>router.push()</code> 觸發</li><li>router 更新 browser 網址列 URL</li><li>router 透過重複利用未改變的 <code>client-side cache</code>(e.g. shared layouts) 避免不必要的更新工作，也稱作 <code>partial rendering</code></li><li>如果符合 <code>soft navigate</code> 條件，則直接從 cache 返回內容，不會再去 server 拿一次，不符合則進行 <code>hard navigate</code> 從 server 獲取 <code>Server Component payload</code></li><li>created 後，當從 server 獲取 payload 時顯示 Loading UI</li><li>router 將 cache 或更新的 payload 渲染在 client</li></ul>',2),Y=n("code",null,"client-side cache",-1),X={href:"https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#client-side-caching-of-rendered-server-components",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"soft/hard navigate",-1),Q={href:"https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#soft-navigation",target:"_blank",rel:"noopener noreferrer"},Z=t('<h2 id="路由群組-route-group" tabindex="-1"><a class="header-anchor" href="#路由群組-route-group" aria-hidden="true">#</a> 路由群組 - Route Group</h2><p>簡單來說，route group 就是一種讓我們在 <code>A.R</code> 方式的 <code>app</code> 資料夾下，將 routes 分門別類拆分開來，卻又不影響原來 route 的解析流程的一種技術</p><p>啥意思勒？看圖看圖～ <img src="https://nextjs.org/_next/image?url=%2Fdocs%2Fdark%2Froute-group-organisation.png&amp;w=3840&amp;q=75" alt=""></p><p>透過 <code>(group-name)</code> 的方式，我們將屬於同一類型的頁面集中放在其中，命名為 <code>(marketing)</code>，透過這方式我們可以很輕易的把 route 進行分類管理，大幅提升開發體驗</p><h3 id="同層級-multiple-layout" tabindex="-1"><a class="header-anchor" href="#同層級-multiple-layout" aria-hidden="true">#</a> 同層級 Multiple Layout</h3><p>另一個 route group 的好用之處在於，我們可以在不同 group 中定義只屬於該 group 的 layout，且不影響其外部的其他頁面 <img src="https://nextjs.org/_next/image?url=%2Fdocs%2Fdark%2Froute-group-opt-in-layouts.png&amp;w=3840&amp;q=75" alt=""></p><h3 id="multiple-root-layout" tabindex="-1"><a class="header-anchor" href="#multiple-root-layout" aria-hidden="true">#</a> Multiple Root Layout</h3><p>如果把最上層的 <code>app/layout.tsx</code> 刪掉，並在其中的 group 中各自定義 <code>layout.tsx</code>，就可以讓同一應用程式套用完全兩套獨立的 <code>Root Layout</code>，對於需要在同一系統中顯示完全不互相影響的 layout 進行開發非常有幫助 <img src="https://nextjs.org/_next/image?url=%2Fdocs%2Fdark%2Froute-group-multiple-root-layouts.png&amp;w=3840&amp;q=75" alt=""></p><h3 id="route-group-的特點" tabindex="-1"><a class="header-anchor" href="#route-group-的特點" aria-hidden="true">#</a> Route Group 的特點</h3><ul><li>group 的命名完全不影響 route 解析</li><li>請勿在 group 中重複使用相同的 URL path，將會報錯(<code>(marketing)/about/page.js</code>, <code>(shop)/about/page.js</code> 兩者會衝突)</li><li>在 multiple root layouts 頁面間切換路由將觸發 <code>full page load</code> 整頁刷新（相對於原本的 client-side load）</li></ul><h2 id="載入畫面-loading-ui" tabindex="-1"><a class="header-anchor" href="#載入畫面-loading-ui" aria-hidden="true">#</a> 載入畫面 - Loading UI</h2>',11),nn=n("code",null,"loading.tsx",-1),sn=n("code",null,"Suspense",-1),an={href:"https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming",target:"_blank",rel:"noopener noreferrer"},en=n("img",{src:"https://nextjs.org/_next/image?url=%2Fdocs%2Fdark%2Floading-overview.png&w=3840&q=75",alt:""},null,-1),tn=t(`<div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Loading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// You can add any UI inside Loading, including a Skeleton.</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LoadingSkeleton</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="not-found-畫面" tabindex="-1"><a class="header-anchor" href="#not-found-畫面" aria-hidden="true">#</a> Not Found 畫面</h2><p><code>not-found.tsx</code> 的簡單範例如下：</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/* app/blog/not-found.tsx */</span>
<span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&#39;next/link&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Not Found</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Could not find requested resource</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Return Home</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意點：root 的 <code>not-found.tsx</code> (<code>app/not-found.tsx</code>) 除了處理已知的 notFound error之外，也會一併匹配處理所有未知路徑錯誤</p></blockquote><p><code>not-found</code> 作為一個 server component 同樣能進行 data fetching</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&#39;next/link&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> headers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/headers&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> headersList <span class="token operator">=</span> <span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> domain <span class="token operator">=</span> headersList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;host&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSiteData</span><span class="token punctuation">(</span>domain<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Not Found: </span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Could not find requested resource</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        View </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/blog<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">all posts</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="錯誤處理-error-handling" tabindex="-1"><a class="header-anchor" href="#錯誤處理-error-handling" aria-hidden="true">#</a> 錯誤處理 - Error Handling</h2>`,8),on=n("code",null,"error.tsx",-1),pn=n("code",null,"ErrorBoundary",-1),cn={href:"https://nextjs.org/docs/app/building-your-application/routing/error-handling",target:"_blank",rel:"noopener noreferrer"},ln=n("img",{src:"https://nextjs.org/_next/image?url=%2Fdocs%2Fdark%2Ferror-overview.png&w=3840&q=75",alt:""},null,-1),rn=t(`<div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// Error components 必須為 Client Components</span>
<span class="token string">&#39;use client&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  error<span class="token punctuation">,</span>
  reset<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  error<span class="token operator">:</span> Error<span class="token punctuation">;</span>
  <span class="token function-variable function">reset</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Log the error to an error reporting service</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// 嘗試透過 re-render 恢復 segment</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Something went wrong!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        Try again
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="錯誤恢復機制-recovering-from-errors" tabindex="-1"><a class="header-anchor" href="#錯誤恢復機制-recovering-from-errors" aria-hidden="true">#</a> 錯誤恢復機制 - Recovering From Errors</h3>`,2),un=n("code",null,"error.tsx",-1),dn=n("code",null,"reset",-1),kn={href:"https://nextjs.org/docs/app/building-your-application/routing/error-handling#recovering-from-errors",target:"_blank",rel:"noopener noreferrer"},vn=t(`<blockquote><p><strong>注意</strong>：<code>error.tsx</code> 並不 catch 同層 layout 中的 error，若要 catch layout 請在上一層中的 <code>error.tsx</code> 或是 root 的 <code>global-error.tsx</code>處理。</p></blockquote><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token string">&#39;use client&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">GlobalError</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  error<span class="token punctuation">,</span>
  reset<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  error<span class="token operator">:</span> Error<span class="token punctuation">;</span>
  <span class="token function-variable function">reset</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Something went wrong!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Try again</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由處理-route-handler" tabindex="-1"><a class="header-anchor" href="#路由處理-route-handler" aria-hidden="true">#</a> 路由處理 - Route Handler</h2><p><code>route.tsx</code> 讓開發者能透過 web api <code>request</code>, <code>response</code> 對請求進行處理（API...），與 <code>layout.tsx</code>一樣可以在 app 的任意子層中出現，但不可與 <code>page.tsx</code> 出現在同一層中，將會報錯</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// app/my-api/route.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> NextResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/server&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">GET</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>equest<span class="token operator">:</span> Request<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    msg<span class="token operator">:</span> <span class="token string">&#39;Johnny Good Good&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="behaviors" tabindex="-1"><a class="header-anchor" href="#behaviors" aria-hidden="true">#</a> Behaviors</h3>`,6),mn=n("li",null,[s("靜態路由處理：預設 "),n("code",null,"GET"),s(" 為靜態處理")],-1),gn=n("li",null,[s("在 "),n("code",null,"GET"),s(" 中使用到 "),n("code",null,"Request"),s(" object")],-1),hn=n("li",null,[s("使用到任何 "),n("code",null,"GET"),s(" 以外的 HTTP methods")],-1),bn=n("code",null,"cookies",-1),xn=n("code",null,"headers",-1),yn={href:"https://nextjs.org/docs/app/building-your-application/routing/router-handlers#dynamic-functions",target:"_blank",rel:"noopener noreferrer"},fn=n("li",null,[s("手動設定 "),n("code",null,"Segment Config Options"),s(" 為 dynamic mode")],-1),_n=t(`<div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// app/my-api/products/route.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> NextResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/server&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">GET</span><span class="token punctuation">(</span>request<span class="token operator">:</span> Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> searchParams <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://data.mongodb-api.com/product/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;API-Key&#39;</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DATA_API_KEY</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> product <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),wn={id:"server-action-v14-0-0-更新為預設支援",tabindex:"-1"},jn=n("a",{class:"header-anchor",href:"#server-action-v14-0-0-更新為預設支援","aria-hidden":"true"},"#",-1),Rn={href:"https://github.com/vercel/next.js/releases/tag/v14.0.0",target:"_blank",rel:"noopener noreferrer"},Cn=t(`<p>在 v13 時 <code>Server Action</code> 處於 experiment 狀態，到了 v14 後移除了 experiment 開關，可以直接在 v14 中使用了</p><p>可以在兩個地方定義 <code>Server Action</code></p><ol><li>在需要使用的 Server Component 中直接定義並使用（無法在 Client Component 中定義）</li><li>在獨立的檔案中定義，並在 Client/Server Component 中引入使用</li></ol><ul><li>Server Component 使用 定義一個 async function，並在其中標記 <code>use server</code>，確保該 function 只在 server 環境被調用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// app/page.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ServerComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;use server&#39;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Client Component 使用 在 client 中有 <code>import</code>, <code>props</code> 兩種方式可以使用 <strong>Import</strong> 在獨立檔案開頭定義 <code>use server</code>，則在該檔案中 export 的 function 都會被視為 <code>Server Action</code>，也因此可以在一個檔案中定義多個 <code>Server Action</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// app/actions.js</span>
<span class="token string">&#39;use server&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接著在 Client Component 中引入使用即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// app/my-client-component.js</span>
<span class="token string">&#39;use client&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> myAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./actions&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ClientComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token punctuation">{</span>myAction<span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">&quot;submit&quot;</span><span class="token operator">&gt;</span>Add to Cart<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Props</strong> 也可以把 <code>Server Action</code> 作為 props 傳遞給 client component 使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>ClientComponent updateItem<span class="token operator">=</span><span class="token punctuation">{</span>updateItem<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use client&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ClientComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> myAction <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token punctuation">{</span>myAction<span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> name<span class="token operator">=</span><span class="token string">&quot;name&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">&quot;submit&quot;</span><span class="token operator">&gt;</span>Update Item<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="binding-arguments" tabindex="-1"><a class="header-anchor" href="#binding-arguments" aria-hidden="true">#</a> Binding Arguments</h3><p>可以透過 <code>bind</code> 把參數掛到 <code>Server Action</code> 上，提升靈活性，Client、Server Component 都可以這樣操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use client&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> updateUser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./actions&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">UserProfile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> userId <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 綁定 userId 到 updateUser 參數中</span>
  <span class="token keyword">const</span> updateUserWithId <span class="token operator">=</span> <span class="token function">updateUser</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token punctuation">{</span>updateUserWithId<span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> name<span class="token operator">=</span><span class="token string">&quot;name&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">&quot;submit&quot;</span><span class="token operator">&gt;</span>Update User Name<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>這樣在我們的 Server Action 中就可以額外拿到 <code>userId</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use server&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token parameter">userId<span class="token punctuation">,</span> formData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="invocation-調用觸發時機" tabindex="-1"><a class="header-anchor" href="#invocation-調用觸發時機" aria-hidden="true">#</a> Invocation 調用觸發時機</h3><p>可以在以下場景調用 Server Action</p><ul><li>使用 form <code>action</code>, <code>formAction</code></li><li>使用 <code>startTransition</code>，這個方式會 disable <code>Progressive Enhancement</code></li></ul><h3 id="progressive-enhancement" tabindex="-1"><a class="header-anchor" href="#progressive-enhancement" aria-hidden="true">#</a> Progressive Enhancement</h3><p>Server Action 的 <code>Progressive Enhancement</code> 機制能夠讓 <code>&lt;form&gt;</code> 元素在具備 Javascript 執行環境下依然能夠正常運作</p><h3 id="size-limit" tabindex="-1"><a class="header-anchor" href="#size-limit" aria-hidden="true">#</a> Size Limit</h3><p>預設情況下，Server Action 可傳遞的 request body 為 1MB，如果需要調整可透過如下方式在 <code>next.config.js</code> 進行修改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">experimental</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">serverActions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">bodySizeLimit</span><span class="token operator">:</span> <span class="token string">&#39;2mb&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="結論" tabindex="-1"><a class="header-anchor" href="#結論" aria-hidden="true">#</a> 結論</h2><p>這篇不知不覺又打了有點長，但這次 v13 真的很多新觀念，篇幅上稍微變得很長還請大家諒解，不過其實這樣還沒講完 XD，還有 <code>Data Fetching</code> 的部分就留待下一篇紀錄拉～</p><p>對我來說，對於 v13 的第一印象是「這是啥！？」，沒錯ＸＤ，相信有寫過 NextJS 一段時間的讀者應該都是差不多這感覺，不過細細看完 Documentation 後發覺，確實這次 v13 很多改版的內容解決了許多之前遇到的痛點，比如 layout 客製化彈性、server side 與 client side 互動模式、loading UI 套用等等在之前的版本都需要相當的精力去自己實作，雖然也很好玩能學到東西，但有些地方確實有重複造輪子的感覺，v13 更多的是在架構層面上引入了 Server Component 的理念，並將其真正融入到了原有的開發體驗中，相信之後 Next 的團隊還會再推出更多讓人耳目一新的概念與想法，推動社群繼續成長！</p><p>今天就先記錄到這邊拉，如果覺得文章對你有幫助的話，歡迎幫我分享給更多人看看喔～謝謝大家 =V=~~ 掰掰～</p>`,29);function Sn(qn,An){const o=p("SocialBlock"),e=p("ExternalLinkIcon");return l(),i("div",null,[u,a(o,{hashtags:"javascript,react,Next.js,AppRouter"}),d,n("p",null,[s("具體何時該使用 server component, client component 可參考"),n("a",k,[s("官方網站"),a(e)])]),v,n("blockquote",null,[n("p",null,[s("以上檔案在各層中會反覆出現，並不是只有一層喔！～除了以上基本的檔案名稱外，可以"),n("a",m,[s("參考這邊"),a(e)]),s("查看其他會被 NextJS 處理的檔案名稱，除了這些檔案名稱外的檔案可以安心放在裡面自由運用")])]),g,n("p",null,[s("以下兩種模式分別建立路徑 "),h,s(", "),b,s(" 的頁面，Dynamic Routing 機制可"),n("a",x,[s("參考這邊"),a(e)])]),y,n("ul",null,[f,_,w,n("li",null,[s("page 可以進行 Fetch Data 操作，"),n("a",j,[s("詳情請見這裡"),a(e)])])]),R,n("ul",null,[C,S,n("li",null,[s("透過 "),n("a",q,[A,a(e)]),s(" 可以選擇性讓路由套用不同的 layout")]),L]),F,N,n("ul",null,[I,P,n("li",null,[s("透過 "),n("a",E,[U,a(e)]),s(" 可以建立 "),T])]),n("blockquote",null,[n("p",null,[s("Route(Page, Layout, Route Handler) 可以設定 "),n("a",J,[s("Route Segment Config Option"),a(e)]),s(" 對路由進行設定調整")])]),H,n("p",null,[s("過去我們常用 "),G,s(" component 幫助我們在頁面中客製化 SEO meta，現在我們可以直接透過 "),n("a",D,[B,a(e)]),s(" 或 "),n("a",V,[M,a(e)]),s(" 定義")]),z,n("p",null,[s("連結切換同樣使用 NextJS 提供的 "),K,s(" 就行～詳細文件可以"),n("a",O,[s("參考這邊"),a(e)])]),W,n("blockquote",null,[n("p",null,[s("關於 "),Y,s(" 的"),n("a",X,[s("詳細解釋請看這裡"),a(e)])])]),n("blockquote",null,[n("p",null,[s("關於 "),$,s(" 的"),n("a",Q,[s("詳細解釋請看這裡"),a(e)])])]),Z,n("p",null,[nn,s(" 基本上是以下圖結構的方式，將頁面內容包裹在 "),sn,s(" 當中，詳細可"),n("a",an,[s("參考這裡"),a(e)]),en]),tn,n("p",null,[on,s(" 基本上是以下圖結構的方式，將頁面內容包裹在 "),pn,s(" 當中，詳細可"),n("a",cn,[s("參考這裡"),a(e)]),ln]),rn,n("p",null,[un,s(" 提供一套錯誤恢復機制，透過呼叫 "),dn,s(" function，可以讓 page 重新進行嘗試載入，詳細可"),n("a",kn,[s("參考這裡"),a(e)])]),vn,n("ul",null,[mn,n("li",null,[s("動態路由處理：符合以下條件將為動態處理 "),n("ul",null,[gn,hn,n("li",null,[s("使用到任何 dynamic function，比如 "),bn,s(", "),xn,s("，詳細可"),n("a",yn,[s("參考這裡"),a(e)])]),fn])])]),_n,a(o,{hashtags:"javascript,react,Next.js,AppRouter"}),n("h2",wn,[jn,s(" Server Action("),n("a",Rn,[s("v14.0.0"),a(e)]),s(" 更新為預設支援)")]),Cn])}const Fn=c(r,[["render",Sn],["__file","next13-intro-approuter.html.vue"]]);export{Fn as default};
