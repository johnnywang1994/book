import{_ as p,c as t,b as n,a as e,d as i,r as c,o as l}from"./app-D_QMa3Pm.js";const o={};function r(d,a){const s=c("SocialBlock");return l(),t("div",null,[a[0]||(a[0]=n("h1",{id:"clean-code-javascript-學習",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#clean-code-javascript-學習"},[n("span",null,"Clean Code Javascript 學習")])],-1)),e(s,{hashtags:"javascript"}),a[1]||(a[1]=i(`<p>本篇記錄學習 clean code 的一些注意要點，屬於我個人需要注意的地方，本身已經會使用的寫法就不另外贅述。</p><h2 id="注意要點" tabindex="-1"><a class="header-anchor" href="#注意要點"><span>注意要點</span></a></h2><h3 id="變量" tabindex="-1"><a class="header-anchor" href="#變量"><span>變量</span></a></h3><h4 id="以具意義變數名取代魔術常量" tabindex="-1"><a class="header-anchor" href="#以具意義變數名取代魔術常量"><span>以具意義變數名取代魔術常量</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// bad</span></span>
<span class="line"><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token number">86400000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// good</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">MILLISECONDS_IN_A_DAY</span> <span class="token operator">=</span> <span class="token number">86400000</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token constant">MILLISECONDS_IN_A_DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用解釋性變量" tabindex="-1"><a class="header-anchor" href="#使用解釋性變量"><span>使用解釋性變量</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// bad</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// good</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>apple<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="減少物件中屬性變量重複名稱" tabindex="-1"><a class="header-anchor" href="#減少物件中屬性變量重複名稱"><span>減少物件中屬性變量重複名稱</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// bad</span></span>
<span class="line"><span class="token keyword">const</span> Car <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">carName</span><span class="token operator">:</span> <span class="token string">&#39;Toyoda&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">carWeight</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// good</span></span>
<span class="line"><span class="token keyword">const</span> Car <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">weight</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函數" tabindex="-1"><a class="header-anchor" href="#函數"><span>函數</span></a></h3><h4 id="單一函數參數量-2-個以下" tabindex="-1"><a class="header-anchor" href="#單一函數參數量-2-個以下"><span>單一函數參數量 2 個以下</span></a></h4><p>避免排列組合爆炸，若需要多個，可考慮統一為一個整體傳入。</p><h4 id="單一職責-很重要" tabindex="-1"><a class="header-anchor" href="#單一職責-很重要"><span>單一職責（很重要）</span></a></h4><p>一個函數<strong>只做一件事！！</strong>，隔離每個函數的職責，可以大幅提升可讀性，且更易於重構。</p><h4 id="函數名應當說明其做什麼" tabindex="-1"><a class="header-anchor" href="#函數名應當說明其做什麼"><span>函數名應當說明其做什麼</span></a></h4><p>與其額外使用註解說明，直接將函數名以其內部做什麼命名最為簡潔</p><h4 id="參數不應包含標記位" tabindex="-1"><a class="header-anchor" href="#參數不應包含標記位"><span>參數不應包含標記位</span></a></h4><p>標記位是告訴使用者此函數做不只一件事，如果函數內部代碼因為一個參數而不出多個不同路徑，請拆分他們為個別的獨立函數</p><h4 id="functional-programming-first" tabindex="-1"><a class="header-anchor" href="#functional-programming-first"><span>Functional Programming First</span></a></h4><h4 id="減少負面條件" tabindex="-1"><a class="header-anchor" href="#減少負面條件"><span>減少負面條件</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// bad</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// good</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>inValid<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="物件與資料結構" tabindex="-1"><a class="header-anchor" href="#物件與資料結構"><span>物件與資料結構</span></a></h3><h4 id="使用-getter-setter" tabindex="-1"><a class="header-anchor" href="#使用-getter-setter"><span>使用 getter / setter</span></a></h4><p>使用 getter / setter 來訪問物件中的屬性物件中的屬性比直接查找好的多，當你需要在每次訪問數據時做事，可不必在每次訪問都重複一次代碼，且繼承類後可重寫默認功能。</p><h4 id="使用方法鏈" tabindex="-1"><a class="header-anchor" href="#使用方法鏈"><span>使用方法鏈</span></a></h4><p>如同知名的 JQuery 或 lodash 等等方法庫，使用方法鏈提升代碼簡潔性。</p><h4 id="組合優先繼承" tabindex="-1"><a class="header-anchor" href="#組合優先繼承"><span>組合優先繼承</span></a></h4><h3 id="solid" tabindex="-1"><a class="header-anchor" href="#solid"><span>SOLID</span></a></h3><ol><li>單一職責原則(SRP)</li></ol><p>每個類、每個函數只負責單一業務，避免讓一個類裡面包含太多功能，如此會造成太多需要修改類的理由。</p><ol start="2"><li>開閉原則(OCP)</li></ol><p>類、模組、函數應該為擴展開放，修改封閉，允許使用者擴展功能，而不必修改既有代碼。</p><ol start="3"><li>接口隔離原則(ISP)</li></ol><p>讓大部分的設置成為可選的，簡化客戶端的配置。</p><h3 id="開發" tabindex="-1"><a class="header-anchor" href="#開發"><span>開發</span></a></h3><h4 id="使用-promise-取代回調" tabindex="-1"><a class="header-anchor" href="#使用-promise-取代回調"><span>使用 Promise 取代回調</span></a></h4><h4 id="async-await-比-promise-更簡潔" tabindex="-1"><a class="header-anchor" href="#async-await-比-promise-更簡潔"><span>Async/Await 比 Promise 更簡潔</span></a></h4><h4 id="只對包含複雜業務邏輯的代碼進行註釋" tabindex="-1"><a class="header-anchor" href="#只對包含複雜業務邏輯的代碼進行註釋"><span>只對包含複雜業務邏輯的代碼進行註釋</span></a></h4><p>好的代碼本身就是註釋</p><h3 id="錯誤處理" tabindex="-1"><a class="header-anchor" href="#錯誤處理"><span>錯誤處理</span></a></h3><h4 id="不要忽略捕捉到的錯誤" tabindex="-1"><a class="header-anchor" href="#不要忽略捕捉到的錯誤"><span>不要忽略捕捉到的錯誤</span></a></h4><h2 id="參考文章" tabindex="-1"><a class="header-anchor" href="#參考文章"><span>參考文章</span></a></h2><p><a href="https://github.com/beginor/clean-code-javascript" target="_blank" rel="noopener noreferrer">代碼整潔的 Javascript</a></p>`,43)),e(s,{hashtags:"javascript"})])}const u=p(o,[["render",r]]),m=JSON.parse('{"path":"/articles/memo/js/clean-code.html","title":"Clean Code Javascript 學習","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1748788505000,"contributors":[{"name":"Johnny Wang","username":"","email":"wangj@garena.com","commits":1},{"name":"johnnywang1994","username":"johnnywang1994","email":"johnny29621189@kimo.com","commits":2,"url":"https://github.com/johnnywang1994"},{"name":"johnnywang","username":"johnnywang","email":"johnny29621189@kimo.com","commits":1,"url":"https://github.com/johnnywang"},{"name":"Lindy Liao","username":"","email":"meiliao1207@gmail.com","commits":1}],"changelog":[{"hash":"f01bfa128b4d33fbeddb8abb1697b5391b273d28","time":1748788505000,"email":"meiliao1207@gmail.com","author":"Lindy Liao","message":"UPD"},{"hash":"f93d96fcdc391e63c4dd78deb53e0bb15506213c","time":1649601399000,"email":"johnny29621189@kimo.com","author":"johnnywang","message":"UPD: add vuetify-learn"},{"hash":"71ccb7693345c8ddc2f554e00f8a0ce73af2b783","time":1648521821000,"email":"johnny29621189@kimo.com","author":"johnnywang1994","message":"UPD: upgrade to v2"},{"hash":"da1521dcf805739a83e5efa4e52581013a51dcad","time":1638541816000,"email":"johnny29621189@kimo.com","author":"johnnywang1994","message":"UPD: update sociallinks"},{"hash":"51e618d93d4f837fbce25a1e1f0a9783cbc46b6a","time":1624012650000,"email":"wangj@garena.com","author":"Johnny Wang","message":"INIT"}]},"filePathRelative":"articles/memo/js/clean-code.md"}');export{u as comp,m as data};
