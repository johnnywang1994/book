import{_ as c,r as p,o as i,c as l,a as n,d as a,e as s,f as o}from"./app-6147e6e2.js";const r={},d=a("h1",{id:"正則表達式",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#正則表達式","aria-hidden":"true"},"#"),s(" 正則表達式")],-1),u=o(`<p>這篇主要用來記錄我在網路上學習正則的過程中學習的一些筆記跟方法～</p><p>內容不包含全部正則的基礎介紹，僅針對個人認為較為重要、特殊、神奇的部分進行記錄</p><h2 id="重要概念" tabindex="-1"><a class="header-anchor" href="#重要概念" aria-hidden="true">#</a> 重要概念</h2><p>正則表達式是 <code>匹配模式</code>，要馬<code>匹配字符</code>，要馬<code>匹配位置</code></p><h2 id="匹配位置" tabindex="-1"><a class="header-anchor" href="#匹配位置" aria-hidden="true">#</a> 匹配位置</h2><p>舉個例子，數字千位數<code>,</code>分割就是匹配位置</p><p>常見的匹配位置語法有：<br> ^、$、\\b、\\B、?=p、(?!p)、(?&lt;=p)、(?&lt;!p)</p><h3 id="匹配開頭" tabindex="-1"><a class="header-anchor" href="#匹配開頭" aria-hidden="true">#</a> ^ - 匹配開頭</h3><h3 id="匹配結尾" tabindex="-1"><a class="header-anchor" href="#匹配結尾" aria-hidden="true">#</a> $ - 匹配結尾</h3><h3 id="b-匹配-block" tabindex="-1"><a class="header-anchor" href="#b-匹配-block" aria-hidden="true">#</a> \\b - 匹配 block</h3><p>匹配下列三種位置：</p><ol><li>\\w 和 \\W 之間</li><li>^ 和 \\w 之間</li><li>\\w 和 $ 之間</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;file.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;❤️&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ❤️file❤️.❤️mp4❤️</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="p-匹配符合-p-格式之前方位置" tabindex="-1"><a class="header-anchor" href="#p-匹配符合-p-格式之前方位置" aria-hidden="true">#</a> (?=p) - 匹配符合 p 格式之前方位置</h3><p>也稱<code>正向先行斷言</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;Good Movie&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=Good)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;❤️&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ❤️Good Movie</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="p-匹配符合-p-以外的位置" tabindex="-1"><a class="header-anchor" href="#p-匹配符合-p-以外的位置" aria-hidden="true">#</a> (?!p) - 匹配符合 (?=p) 以外的位置</h3><p>也稱<code>負向先行斷言</code></p><h3 id="p-匹配符合-p-格式之後方位置" tabindex="-1"><a class="header-anchor" href="#p-匹配符合-p-格式之後方位置" aria-hidden="true">#</a> (?&lt;=p) - 匹配符合 p 格式之後方位置</h3><h3 id="p-匹配-p-以外的位置" tabindex="-1"><a class="header-anchor" href="#p-匹配-p-以外的位置" aria-hidden="true">#</a> (?&lt;!p) - 匹配 (?&lt;=p) 以外的位置</h3><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h4><ol><li>數字千分位分割 匹配每 3 個數字的前方位置，除了開頭以外</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;123456789&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^)(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 123,456,789</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>密碼驗證<br> 需滿足三個條件</li></ol><ul><li>長度介於 6-12 位</li><li>由數字、小寫、大寫字母組成</li><li>須至少包含兩種字符（數字+小寫, 數字+大寫...）</li></ul><h5 id="驗證長度" tabindex="-1"><a class="header-anchor" href="#驗證長度" aria-hidden="true">#</a> 驗證長度</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> regLength <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z\\d]{6,12}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="驗證字符種類" tabindex="-1"><a class="header-anchor" href="#驗證字符種類" aria-hidden="true">#</a> 驗證字符種類</h5><p>有4種排列組合，第四種包含在前三種內可忽略</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 數字+(小寫or大寫)</span>
<span class="token keyword">let</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?=.*\\d)((?=.*[a-z])|(?=.*[A-Z])))</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 小寫+大寫</span>
<span class="token keyword">let</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[a-z])(?=.*[A-Z])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 結合上面兩者</span>
<span class="token keyword">let</span> reg3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?=.*\\d)((?=.*[a-z])|(?=.*[A-Z])))|(?=.*[a-z])(?=.*[A-Z])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 加上長度驗證</span>
<span class="token keyword">let</span> regResult <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?=.*\\d)((?=.*[a-z])|(?=.*[A-Z])))|(?=.*[a-z])(?=.*[A-Z])^[a-zA-Z\\d]{6,12}$</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="匹配字符" tabindex="-1"><a class="header-anchor" href="#匹配字符" aria-hidden="true">#</a> 匹配字符</h2><h3 id="模糊匹配" tabindex="-1"><a class="header-anchor" href="#模糊匹配" aria-hidden="true">#</a> 模糊匹配</h3><p>分為橫向、縱向匹配兩種</p><h4 id="橫向匹配" tabindex="-1"><a class="header-anchor" href="#橫向匹配" aria-hidden="true">#</a> 橫向匹配</h4><p>包含量詞 ?, +, *, {m,n} 等幾種實現方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab{2,5}c</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;abc abbc abbbc abbbbc abbbbbc abbbbbbc&#39;</span><span class="token punctuation">;</span>

str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [ &#39;abbc&#39;, &#39;abbbc&#39;, &#39;abbbbc&#39;, &#39;abbbbbc&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="縱向匹配" tabindex="-1"><a class="header-anchor" href="#縱向匹配" aria-hidden="true">#</a> 縱向匹配</h3><p>透過 <code>字符組</code> 的方式配對</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a[123]b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;a0b a1b a2b a3b a4b&#39;</span>

str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [ &#39;a1b&#39;, &#39;a2b&#39;, &#39;a3b&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="範圍表示法" tabindex="-1"><a class="header-anchor" href="#範圍表示法" aria-hidden="true">#</a> 範圍表示法</h3><p><code>[123456abcdefABCDEF] =&gt; [1-6a-fA-F]</code></p><h3 id="排除字符組" tabindex="-1"><a class="header-anchor" href="#排除字符組" aria-hidden="true">#</a> 排除字符組</h3><p>與原字符組意義相法，將指定字符組作為反向不存在的驗證 <code>[^abc]</code></p><h3 id="簡寫字符" tabindex="-1"><a class="header-anchor" href="#簡寫字符" aria-hidden="true">#</a> 簡寫字符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\\d <span class="token comment">// number</span>
\\<span class="token constant">D</span> <span class="token comment">// not number</span>
\\w <span class="token comment">// [0-9a-zA-Z_]</span>
\\<span class="token constant">W</span> <span class="token comment">// [^0-9a-zA-Z_]</span>
\\s <span class="token comment">// [\\t\\v\\n\\r\\f]</span>
\\<span class="token constant">S</span> <span class="token comment">// [^\\t\\v\\n\\r\\f]</span>
<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="量詞" tabindex="-1"><a class="header-anchor" href="#量詞" aria-hidden="true">#</a> 量詞</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span> <span class="token punctuation">{</span>m<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token comment">// least m times</span>
<span class="token number">2.</span> <span class="token punctuation">{</span>m<span class="token punctuation">}</span> <span class="token comment">// m times</span>
<span class="token number">3.</span> <span class="token operator">?</span> <span class="token comment">// 0 or 1</span>
<span class="token number">4.</span> <span class="token operator">+</span> <span class="token comment">// least 1</span>
<span class="token number">5.</span> <span class="token operator">*</span> <span class="token comment">// least 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="貪婪匹配-惰性匹配" tabindex="-1"><a class="header-anchor" href="#貪婪匹配-惰性匹配" aria-hidden="true">#</a> 貪婪匹配, 惰性匹配</h3><p>正則預設行為<code>貪婪匹配</code>，會盡可能多的匹配內容，在量詞後接上一個 <code>?</code> 即變化為<code>惰性匹配</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{2,5}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;123 1234 12345 123456&#39;</span>
<span class="token comment">// 貪婪匹配</span>
string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [ 123, 1234, 12345, 12345 ]</span>

<span class="token comment">// 惰性匹配</span>
<span class="token keyword">let</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{2,5}?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [ 12, 12, 34, 12, 34, 12, 34, 56  ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>多選分支匹配為<code>惰性匹配</code>，當前面匹配成功時即停止，不會將後續分支也匹配</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">good|nice</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;good idea, nice try.&#39;</span><span class="token punctuation">;</span>

string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [ &#39;good&#39;, &#39;nice&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">good|goodbye</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;goodbye~&#39;</span><span class="token punctuation">;</span>

string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&#39;good&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="案例-1" tabindex="-1"><a class="header-anchor" href="#案例-1" aria-hidden="true">#</a> 案例</h4><ol><li>HTML string id 匹配 若沒有加上 <code>?</code> 惰性匹配，會連後面的 class 一起取出</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id=&quot;.*?&quot;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;&lt;div id=&quot;container&quot; class=&quot;main&quot;&gt;&lt;/div&gt;&#39;</span><span class="token punctuation">;</span>

string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&#39;id=&quot;container&quot;&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="括號" tabindex="-1"><a class="header-anchor" href="#括號" aria-hidden="true">#</a> 括號</h2><p>括號幫助我們對匹配到的東西進行分組，以便後續進行引用、使用</p><h3 id="分組-capturing-parentheses" tabindex="-1"><a class="header-anchor" href="#分組-capturing-parentheses" aria-hidden="true">#</a> 分組(Capturing Parentheses)</h3><p>量詞作用於整體</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;ababa abbb ababab&#39;</span><span class="token punctuation">;</span>

string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&quot;abab&quot;, &quot;ab&quot;, &quot;ababab&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分支結構" tabindex="-1"><a class="header-anchor" href="#分支結構" aria-hidden="true">#</a> 分支結構</h3><p>類似使用 || 的概念</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">I love (Mama|Dada)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="match-分組引用" tabindex="-1"><a class="header-anchor" href="#match-分組引用" aria-hidden="true">#</a> match 分組引用</h3><p>這是括號最強大的功能之一，可以提取匹配的資料進行使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token string">&#39;2021-08-14&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&quot;2021-08-14&quot;, &quot;2021&quot;, &quot;08&quot;, &quot;14&quot;, ...]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replace-資料替換" tabindex="-1"><a class="header-anchor" href="#replace-資料替換" aria-hidden="true">#</a> replace 資料替換</h3><p>運用 <code>$1,$2,...</code> 的方式對匹配到的資料進行替代</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.</span>
<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span>
<span class="token string">&#39;2021-08-14&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;$2/$3/$1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.</span>
<span class="token string">&#39;2021-08-14&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$0<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> $2<span class="token punctuation">,</span> $3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> $2 <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> $3 <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> $1<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 08/14/2021</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非捕獲性括號-non-capturing-parentheses" tabindex="-1"><a class="header-anchor" href="#非捕獲性括號-non-capturing-parentheses" aria-hidden="true">#</a> 非捕獲性括號(Non-Capturing Parentheses)</h3><p>找出匹配的格式，但不進行記憶</p>`,72),k={href:"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-capturing-parentheses",target:"_blank",rel:"noopener noreferrer"},g=a("h2",{id:"references",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#references","aria-hidden":"true"},"#"),s(" References")],-1),v=a("p",null,"本篇文章主要為閱讀此篇文章學習的筆記，也歡迎前往看看原文章喔～",-1),m={href:"https://juejin.cn/post/7021672733213720613",target:"_blank",rel:"noopener noreferrer"};function h(b,x){const e=p("SocialBlock"),t=p("ExternalLinkIcon");return i(),l("div",null,[d,n(e,{hashtags:"javascript,regexp"}),u,a("p",null,[s("詳情範例請見"),a("a",k,[s("MDN-Non-Capturing Parentheses"),n(t)])]),g,v,a("ul",null,[a("li",null,[a("a",m,[s('就因为这三个知识点，我彻底学废了"正则表达式"'),n(t)])])]),n(e,{hashtags:"javascript,regexp"})])}const j=c(r,[["render",h],["__file","regexp.html.vue"]]);export{j as default};
