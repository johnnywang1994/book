import{_ as c,r as o,o as i,c as l,a,d as n,e as s,f as t}from"./app.7cfa1fb3.js";const u={},r=n("h1",{id:"\u5F9E-mock-service-worker-\u6E90\u78BC\u4E2D\u5B78\u7FD2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u5F9E-mock-service-worker-\u6E90\u78BC\u4E2D\u5B78\u7FD2","aria-hidden":"true"},"#"),s(" \u5F9E Mock Service Worker \u6E90\u78BC\u4E2D\u5B78\u7FD2")],-1),k=t(`<h2 id="\u524D\u8A00" tabindex="-1"><a class="header-anchor" href="#\u524D\u8A00" aria-hidden="true">#</a> \u524D\u8A00</h2><p>\u55E8\u5927\u5BB6\u597D\uFF0C\u6211\u662F Johnny\uFF0C\u6700\u8FD1\u9592\u6687\u6642\u6211\u5728\u60F3\uFF0C\u5230\u5E95 msw \u662F\u5982\u4F55\u505A\u5230 web \u8207 service worker \u4E4B\u9593\u7684\u6E9D\u901A\uFF0C\u4E00\u76F4\u4EE5\u70BA msw \u53EA\u662F\u55AE\u7D14\u767C\u500B\u8ACB\u6C42\u7D66 service worker \u5F8C\uFF0Cservice worker \u518D\u76F4\u63A5\u628A\u914D\u5C0D\u5230\u7684\u5167\u5BB9\u4E1F\u56DE\u7D66 web \u9019\u6A23\uFF0C\u4F46\u770B\u5B8C msw \u7684\u6E90\u78BC\u5F8C\u624D\u767C\u73FE\uFF0C\u6211\u9084\u662F\u592A\u5AE9\u4E86\uFF31\uFF31\uFF0C\u4EBA\u5BB6\u6839\u672C\u4E0D\u53EA\u662F\u9019\u9EBC\u55AE\u7D14\u7684\u4E1F\u904E\u53BB\u4E1F\u56DE\u4F86\u800C\u5DF2...</p><h2 id="mock-\u64CD\u4F5C\u7A2E\u985E" tabindex="-1"><a class="header-anchor" href="#mock-\u64CD\u4F5C\u7A2E\u985E" aria-hidden="true">#</a> Mock \u64CD\u4F5C\u7A2E\u985E</h2><p>\u76F8\u4FE1\u5404\u4F4D\u524D\u7AEF\u958B\u767C\u8005\u5011\uFF0C\u90FD\u6709\u7528\u904E\u5404\u7A2E Mock \u670D\u52D9\u4F86\u9032\u884C\u6E2C\u8A66\u8207\u958B\u767C\uFF0C\u4F46\u5176\u4E2D\u7684\u539F\u7406\uFF0C\u6839\u64DA\u4E0D\u540C\u5DE5\u5177\u5176\u5E95\u5C64\u7684\u67B6\u69CB\u8DDF\u4F5C\u6CD5\u90FD\u4E0D\u592A\u4E00\u6A23\uFF0C\u8209\u4F8B\u4F86\u8AAA\uFF0C\u5E38\u898B\u6709\u4EE5\u4E0B\u5E7E\u7A2E mock \u7684\u539F\u7406\u4F5C\u6CD5</p><ul><li>\u5957\u4EF6\u5167\u90E8\u6514\u622A\uFF1A\u50CF\u662F <code>axios</code> \u5167\u5EFA\u6709 Request <code>interceptor</code> \u8B93\u958B\u767C\u8005\u5728\u4F7F\u7528 axios \u5DE5\u5177\u5BE6\u969B\u9001\u51FA request \u4E4B\u524D\u5C31\u6514\u622A\u8FD4\u56DE\u9810\u5148\u8A02\u5236\u7684 response content\uFF0C\u597D\u8655\u662F\u4E0D\u6539\u52D5\u4EFB\u4F55\u539F\u751F\u5E95\u5C64\u7684 api\uFF0C\u58DE\u8655\u662F\u9664\u4E86 axios \u4EE5\u5916\uFF0C\u7121\u6CD5\u6514\u622A\u76F4\u63A5\u8ABF\u7528\u539F\u751F api \u7684\u5834\u666F</li><li>\u5E95\u5C64\u66FF\u63DB\u6514\u622A\uFF1A\u9019\u985E\u4EE5 <code>mock.js</code> \u70BA\u4EE3\u8868\uFF0C\u76F4\u63A5\u66FF\u63DB\u6700\u5E95\u5C64\u7684 XHR \u7269\u4EF6\uFF0C\u85C9\u6B64\u5728\u4E0D\u6539\u52D5\u7B2C\u4E09\u65B9\u5957\u4EF6\u7684\u60C5\u6CC1\u4E0B\u6514\u622A\u6240\u6709\u8ACB\u6C42\uFF0C\u597D\u8655\u662F\u4E0D\u8AD6\u4F7F\u7528\u4F55\u7A2E\u7B2C\u4E09\u65B9\u5957\u4EF6\uFF0C\u53EA\u8981\u5E95\u5C64\u662F\u4F7F\u7528 XHR \u767C\u51FA\u8ACB\u6C42\u5C31\u90FD\u53EF\u4EE5\u6514\u622A\u5230\uFF0C\u4F46\u7F3A\u9EDE\u662F XHR \u7269\u4EF6\u5728 server \u7AEF\u4E26\u4E0D\u5B58\u5728\uFF0C\u8981\u4F7F\u7528\u7684\u8A71\u5FC5\u9808\u5C0D server \u7AEF\u9032\u884C\u76F8\u5BB9\u8655\u7406</li><li>\u7368\u7ACB mock server\uFF1A\u9019\u985E\u4EE5 <code>mockoon</code> \u7B49\u70BA\u4EE3\u8868\uFF08\u96D6\u7136 mockoon \u6709 serverless \u5DE5\u5177\uFF0C\u4F46\u7562\u7ADF\u9084\u662F\u8981\u90E8\u7F72\u5728\u4E00\u500B\u5730\u65B9\u6BD4\u5982 amazon, vercel \u7B49\u624D\u80FD\u4F7F\u7528\uFF09\uFF0C\u6216\u662F\u5176\u4ED6\u76F4\u63A5\u555F\u52D5\u4E00\u500B server \u4F86\u56DE\u61C9\u8ACB\u6C42\uFF0C\u9019\u7A2E\u65B9\u5F0F\u6BD4\u8F03\u4E0D\u7B97\u5728\u55AE\u7D14\u524D\u7AEF mock \u7684\u7BC4\u570D\u5167\uFF0C\u7562\u7ADF\u5DF2\u7D93\u662F\u76F4\u63A5\u555F\u52D5\u4E00\u500B server \u4E86...\uFF0C\u90A3\u5C31\u4E0D\u55AE\u55AE\u53EA\u662F\u6240\u8B02\u7D14\u524D\u7AEF\u7684\u4E8B\u4E86\uFF0C\u597D\u8655\u662F\u53EF\u4EE5\u62FF\u5230\u6700\u771F\u5BE6\u7684 api \u8ACB\u6C42\u7684 request, response \u7269\u4EF6\uFF0C\u58DE\u8655\u662F\u4F60\u8981\u70BA\u6B64\u591A\u555F\u52D5\u4E00\u500B server</li><li>mock service worker\uFF1A\u4EE5 <code>msw</code> \u70BA\u4EE3\u8868\uFF0C\u900F\u904E\u555F\u52D5\u4E00\u500B <code>service worker</code> \u70BA\u4E2D\u9593\u5C64\uFF0C\u6514\u622A\u6240\u6709\u5F9E\u7576\u524D\u7DB2\u9801\u767C\u51FA\u7684\u8ACB\u6C42\u4E26\u8FD4\u56DE\uFF0C\u512A\u9EDE\u662F\u9664\u4E86\u53EF\u4EE5\u6A21\u64EC\u5230\u771F\u5BE6 api \u8ACB\u6C42\u7684 request, response \u7269\u4EF6\uFF0C\u540C\u6642\u4E0D\u9700\u8981\u984D\u5916\u591A\u555F\u52D5\u4E00\u53F0 server\uFF0C\u7F3A\u9EDE\u662F\u5982\u679C\u7DB2\u9801\u672C\u8EAB\u5DF2\u7D93\u6709\u5176\u4ED6\u7684 service worker \u53EF\u80FD\u6703\u9700\u8981\u60F3\u8FA6\u6CD5\u5408\u4F75\u5169\u8005\uFF0C\u9019\u7A2E\u4F5C\u6CD5\u76F8\u5C0D\u524D\u4E09\u8005\u8F03\u70BA\u65B0</li></ul><h2 id="msw-2-0" tabindex="-1"><a class="header-anchor" href="#msw-2-0" aria-hidden="true">#</a> MSW 2.0</h2><p>\u770B\u5B8C\u4EE5\u4E0A\u56DB\u7A2E mock \u539F\u7406\uFF0C\u524D\u9762\u4E09\u500B\u76F8\u4FE1\u5DF2\u7D93\u6709\u5F88\u591A\u5927\u795E\u5011\u89E3\u91CB\u904E\u4E86\uFF0C\u4ECA\u5929\u6211\u5011\u8981\u4F86\u900F\u904E\u700F\u89BD <code>msw</code> \u7684\u6E90\u78BC\u4F86\u4E86\u89E3\u9019\u7A2E\u76F8\u5C0D\u65B0\u7684\u4F5C\u6CD5\u7A76\u7ADF\u5982\u4F55\u505A\u5230\u7684\uFF1F</p><p>\u6B63\u5F0F\u7406\u89E3\u6E90\u78BC\u524D\uFF0C\u6211\u5011\u9996\u5148\u4F86\u5C0D\u6574\u500B <code>msw</code> \u7684\u4F7F\u7528\u6709\u500B\u57FA\u672C\u6982\u5FF5\uFF0C\u64B0\u5BEB\u6B64\u6587\u6642\u525B\u597D <code>msw 2.0</code> released \u4E86\uFF0C\u5C31\u76F4\u63A5\u770B\u6700\u65B0\u7684\u5167\u5BB9</p><h3 id="\u5B89\u88DD" tabindex="-1"><a class="header-anchor" href="#\u5B89\u88DD" aria-hidden="true">#</a> \u5B89\u88DD</h3><p>\u5B89\u88DD\u7701\u7565\u76F4\u63A5\u770B\u5B98\u7DB2...</p><h3 id="\u7522\u751F-msw-\u7684-mockserviceworker-js" tabindex="-1"><a class="header-anchor" href="#\u7522\u751F-msw-\u7684-mockserviceworker-js" aria-hidden="true">#</a> \u7522\u751F msw \u7684 mockServiceWorker.js</h3><p>\u5B89\u88DD\u5B8C\u6210\u5F8C\uFF0C\u900F\u904E msw \u63D0\u4F9B\u7684 cli \u6307\u4EE4\u5728\u6307\u5B9A\u4F4D\u7F6E\u7522\u751F service worker file\uFF0C\u7522\u751F\u7684\u9019\u500B sw file \u662F\u7D66 msw \u4F7F\u7528\uFF0C\u5F8C\u9762\u6703\u4F86\u4ED4\u7D30\u770B\u88E1\u9762\u7A76\u7ADF\u5BEB\u4E86\u5565</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ npx msw init ./public <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="\u5B9A\u7FA9-msw-interceptor" tabindex="-1"><a class="header-anchor" href="#\u5B9A\u7FA9-msw-interceptor" aria-hidden="true">#</a> \u5B9A\u7FA9 msw interceptor</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// handler.js</span>
<span class="token comment">// 1. Import the &quot;HttpResponse&quot; class from the library.</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> http<span class="token punctuation">,</span> HttpResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;msw&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token punctuation">[</span>
  http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/resource&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2. Return a mocked &quot;Response&quot; instance from the handler.</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;Hello world!&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5728-browser-\u7AEF\u4F7F\u7528" tabindex="-1"><a class="header-anchor" href="#\u5728-browser-\u7AEF\u4F7F\u7528" aria-hidden="true">#</a> \u5728 Browser \u7AEF\u4F7F\u7528</h3><p>\u96D6\u7136 msw \u4E5F\u76F8\u5BB9\u76F4\u63A5\u5728 nodejs \u7AEF\u4F7F\u7528\uFF0C\u4F46\u9019\u908A\u5148\u4EE5 Browser \u7AEF\u505A\u4ECB\u7D39</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// mock.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setupWorker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;msw/browser&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> handlers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./handlers&#39;</span>

<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token function">setupWorker</span><span class="token punctuation">(</span><span class="token operator">...</span>handlers<span class="token punctuation">)</span>
worker<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \u5BE6\u969B\u53EF\u6839\u64DA\u74B0\u5883\u81EA\u7531\u9078\u64C7\u662F\u5426\u5F15\u5165\u8207\u57F7\u884C\u555F\u52D5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5728\u7DB2\u9801\u4E2D\u555F\u52D5" tabindex="-1"><a class="header-anchor" href="#\u5728\u7DB2\u9801\u4E2D\u555F\u52D5" aria-hidden="true">#</a> \u5728\u7DB2\u9801\u4E2D\u555F\u52D5</h3><p>\u63A5\u8457\u5728\u700F\u89BD\u5668\u4E0A\u958B\u555F\u7DB2\u9801\uFF0C\u5982\u679C\u6709\u770B\u5230 data \u5167\u5BB9\u5C31\u8868\u793A mock \u6210\u529F\u645F</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// main.js(entrypoint of you web app)</span>
<span class="token keyword">import</span> <span class="token string">&#39;./mock&#39;</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/resource&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mockserviceworker-js" tabindex="-1"><a class="header-anchor" href="#mockserviceworker-js" aria-hidden="true">#</a> mockServiceWorker.js</h2>`,22),d={href:"https://github.com/mswjs/msw/blob/main/src/mockServiceWorker.js",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>msw \u76F4\u63A5\u5F9E\u6E90\u78BC\u672C\u8EAB\u8457\u624B\u6703\u7A0D\u5FAE\u6709\u96E3\u5EA6\uFF0C\u56E0\u70BA\u727D\u6D89\u5230 nodejs, browser \u7AEF\u7684\u8655\u7406\uFF0C\u7562\u7ADF\u9019\u908A\u4E3B\u8981\u662F\u60F3\u7406\u89E3 service worker \u7684\u90E8\u5206\u8655\u7406\u6A5F\u5236\uFF0C\u800C service worker \u672C\u8EAB\u53EA\u5B58\u5728\u65BC browser \u7AEF\uFF0C\u6240\u4EE5\u9019\u908A\u55AE\u7D14\u4EE5\u700F\u89BD browser \u76F8\u95DC\u7684 code \u70BA\u4E3B\uFF0C\u4EE5\u4E0B\u53EA\u662F\u90E8\u5206\u7BC0\u9304</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u7528\u4F86\u5132\u5B58 active \u7684 clientId</span>
<span class="token keyword">const</span> activeClientIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// \u5B9A\u7FA9 service worker \u6536\u5230 message</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> clientId <span class="token operator">=</span> event<span class="token punctuation">.</span>source<span class="token punctuation">.</span>id
  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span>
  <span class="token keyword">const</span> allClients <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;window&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// keepAlive \u907F\u514D service worker \u4F11\u7720\u53BB\u4E86</span>
    <span class="token keyword">case</span> <span class="token string">&#39;KEEPALIVE_REQUEST&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">sendToClient</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;KEEPALIVE_RESPONSE&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7576 web \u8F09\u5165 service worker \u6642\u6DFB\u52A0 active client</span>
    <span class="token comment">// \uFF08\u53EF\u80FD\u540C\u6642\u958B\u5F88\u591A\u500B web page \u9023\u4E0A\u540C\u4E00\u500B service worker\uFF09</span>
    <span class="token keyword">case</span> <span class="token string">&#39;MOCK_ACTIVATE&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      activeClientIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span>
      <span class="token comment">// \u901A\u77E5 web \u7AEF\u8F09\u5165\u4E26\u7D00\u9304 clientId \u5B8C\u6210</span>
      <span class="token function">sendToClient</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;MOCKING_ENABLED&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7576 web \u7AEF\u4E2D\u65B7\u9023\u7DDA\u6642\u9808\u79FB\u9664 active clientId</span>
    <span class="token keyword">case</span> <span class="token string">&#39;CLIENT_CLOSED&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      activeClientIds<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span>

      <span class="token keyword">const</span> remainingClients <span class="token operator">=</span> allClients<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> client<span class="token punctuation">.</span>id <span class="token operator">!==</span> clientId
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token comment">// Unregister itself when there are no more clients</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>remainingClients<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        self<span class="token punctuation">.</span>registration<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;fetch&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token operator">=</span> event
  <span class="token comment">// \u7701\u7565\u4E00\u5927\u6BB5...</span>
  <span class="token keyword">const</span> requestId <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  event<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> requestId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveMainClient</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getResponse</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> client<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>
  <span class="token comment">// \u7701\u7565\u4E00\u5C0F\u6BB5...</span>
  <span class="token keyword">return</span> response
<span class="token punctuation">}</span>

<span class="token comment">// \u53D6\u5F97\u4E3B\u8981\u7684 client</span>
<span class="token comment">// \u767C\u51FA\u8ACB\u6C42\u7684 client \u4E26\u4E0D\u4E00\u5B9A\u5C31\u662F\u8A3B\u518A worker \u7684\u90A3\u500B client</span>
<span class="token comment">// \u5728\u56DE\u61C9\u8ACB\u6C42\u6642\u61C9\u8A72\u4F7F\u7528\u5F8C\u8005\uFF08\u8A3B\u518A worker \u7684\u90A3\u500B client\uFF09</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">resolveMainClient</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientId<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token operator">?.</span>frameType <span class="token operator">===</span> <span class="token string">&#39;top-level&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> client
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> allClients <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;window&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> allClients
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> client<span class="token punctuation">.</span>visibilityState <span class="token operator">===</span> <span class="token string">&#39;visible&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> activeClientIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> client<span class="token punctuation">,</span> requestId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token operator">=</span> event

  <span class="token comment">// \u8907\u88FD request\uFF0C\u56E0\u70BA\u53EF\u80FD\u5DF2\u7D93\u88AB\u4F7F\u7528</span>
  <span class="token comment">// (i.e. \u6BD4\u5982 body \u53EF\u80FD\u5DF2\u7D93\u88AB\u9001\u5230 client\uFF09</span>
  <span class="token keyword">const</span> requestClone <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">function</span> <span class="token function">passthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> headers <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>requestClone<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>requestClone<span class="token punctuation">,</span> <span class="token punctuation">{</span> headers <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u7701\u7565\u4E00\u5927\u6BB5 passthrough \u5224\u65B7...</span>

  <span class="token comment">// \u901A\u77E5 main client \u7AEF\u8ACB\u6C42\u5DF2\u88AB\u6514\u622A</span>
  <span class="token comment">// \u9019\u88E1\u6703\u7B49\u5230 client \u7AEF\u8655\u7406\u597D\u6574\u500B response \u5F8C\u7E7C\u7E8C\u57F7\u884C</span>
  <span class="token comment">// \u4E3B\u8981\u662F\u900F\u904E sendToClient \u4E2D\u7684 MessageChannel \u96D9\u5411 sync \u6E9D\u901A</span>
  <span class="token keyword">const</span> requestBuffer <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> clientMessage <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendToClient</span><span class="token punctuation">(</span>
    client<span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;REQUEST&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> requestId<span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> request<span class="token punctuation">.</span>url<span class="token punctuation">,</span>
        <span class="token literal-property property">mode</span><span class="token operator">:</span> request<span class="token punctuation">.</span>mode<span class="token punctuation">,</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> request<span class="token punctuation">.</span>method<span class="token punctuation">,</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">cache</span><span class="token operator">:</span> request<span class="token punctuation">.</span>cache<span class="token punctuation">,</span>
        <span class="token literal-property property">credentials</span><span class="token operator">:</span> request<span class="token punctuation">.</span>credentials<span class="token punctuation">,</span>
        <span class="token literal-property property">destination</span><span class="token operator">:</span> request<span class="token punctuation">.</span>destination<span class="token punctuation">,</span>
        <span class="token literal-property property">integrity</span><span class="token operator">:</span> request<span class="token punctuation">.</span>integrity<span class="token punctuation">,</span>
        <span class="token literal-property property">redirect</span><span class="token operator">:</span> request<span class="token punctuation">.</span>redirect<span class="token punctuation">,</span>
        <span class="token literal-property property">referrer</span><span class="token operator">:</span> request<span class="token punctuation">.</span>referrer<span class="token punctuation">,</span>
        <span class="token literal-property property">referrerPolicy</span><span class="token operator">:</span> request<span class="token punctuation">.</span>referrerPolicy<span class="token punctuation">,</span>
        <span class="token literal-property property">body</span><span class="token operator">:</span> requestBuffer<span class="token punctuation">,</span>
        <span class="token literal-property property">keepalive</span><span class="token operator">:</span> request<span class="token punctuation">.</span>keepalive<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>requestBuffer<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token comment">// \u6839\u64DA main client \u7AEF\u56DE\u50B3\u7684 message \u6C7A\u5B9A\u662F intercept \u6216 passthrough</span>
  <span class="token comment">// respondWithMock \u6703\u5BE6\u969B\u7522\u751F\u4E00\u500B HTTP Response object \u4E26\u4E1F\u56DE\u7D66\u767C\u51FA\u8ACB\u6C42\u7684 client</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>clientMessage<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;MOCK_RESPONSE&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">respondWithMock</span><span class="token punctuation">(</span>clientMessage<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">case</span> <span class="token string">&#39;MOCK_NOT_FOUND&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">passthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token function">passthrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u900F\u904E MessageChannel \u8207 client \u7AEF\u9032\u884C sync \u96D9\u5411\u6E9D\u901A</span>
<span class="token comment">// \u628A port2 \u4E1F\u7D66 client\uFF0C\u8B93 client \u53EF\u900F\u904E port2 \u8207 port1(\u7576\u524D worker) \u6E9D\u901A</span>
<span class="token comment">// \u900F\u904E MessageChannel \u53EF\u4EE5\u85C9\u7531 promise \u8B93 function \u7B49\u5F85 client \u56DE\u50B3\u7D50\u679C</span>
<span class="token comment">// \u800C\u4E0D\u662F\u8B93 client \u900F\u904E postMessage \u56DE\u50B3\uFF0C\u56E0\u70BA postMessage \u7121\u6CD5\u8B93 worker \u76F4\u63A5 await \u7B49\u5F85\u7D50\u679C</span>
<span class="token keyword">function</span> <span class="token function">sendToClient</span><span class="token punctuation">(</span><span class="token parameter">client<span class="token punctuation">,</span> message<span class="token punctuation">,</span> transferrables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    channel<span class="token punctuation">.</span>port1<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>error<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    client<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>
      message<span class="token punctuation">,</span>
      <span class="token punctuation">[</span>channel<span class="token punctuation">.</span>port2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>transferrables<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">respondWithMock</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Setting response status code to 0 is a no-op.</span>
  <span class="token comment">// However, when responding with a &quot;Response.error()&quot;, the produced Response</span>
  <span class="token comment">// instance will have status code set to 0. Since it&#39;s not possible to create</span>
  <span class="token comment">// a Response instance with status code 0, handle that use-case separately.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> mockedResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">,</span> response<span class="token punctuation">)</span>
  Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>mockedResponse<span class="token punctuation">,</span> <span class="token constant">IS_MOCKED_RESPONSE</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> mockedResponse
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9019\u500B\u6A94\u6848\u5C31\u662F\u5728\u524D\u9762\u900F\u904E msw cli \u7522\u751F\u7684 service worker\uFF0C\u5176\u4E3B\u8981\u4F5C\u7528\u662F\u8655\u7406\u6574\u500B service worker \u7684\u521D\u59CB\u5316\u8207\u5F8C\u7E8C message, fetch \u8ACB\u6C42\u7684\u6514\u622A\uFF0C\u5728\u6536\u5230 client \u7AEF\u767C\u4F86\u7684\u8ACB\u6C42\u6642\uFF0C\u900F\u904E MessageChannel \u8207 main client \u6E9D\u901A\u7372\u5F97\u5C0D\u61C9\u7684 response message content\uFF0C\u6700\u5F8C\u518D\u50B3\u56DE\u7D66 client</p><h2 id="setupworker-ts" tabindex="-1"><a class="header-anchor" href="#setupworker-ts" aria-hidden="true">#</a> setupWorker.ts</h2>`,4),m={href:"https://github.com/mswjs/msw/blob/main/src/browser/setupWorker/setupWorker.ts",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>\u9019\u500B\u6A94\u6848\u662F\u5728 client \u521D\u59CB\u5316\u6574\u500B service worker \u7684\u5165\u53E3\uFF0C\u53EF\u4EE5\u627E\u5230\u9019\u500B <code>start</code> method</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SetupWorkerApi</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u7701\u7565\u4E00\u5927\u5768...</span>
  <span class="token keyword">private</span> <span class="token function">createWorkerContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SetupWorkerInternalContext <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context<span class="token operator">:</span> SetupWorkerInternalContext <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u7701\u7565\u4E00\u5927\u5768...</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>startHandler <span class="token operator">=</span> context<span class="token punctuation">.</span>supports<span class="token punctuation">.</span>serviceWorkerApi
      <span class="token operator">?</span> <span class="token function">createFallbackStart</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">createStartHandler</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token comment">// \u4E0B\u4E00\u500B\u95DC\u9375\u5165\u53E3\u5728\u9019\uFF5E</span>

    <span class="token keyword">return</span> context
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span>options<span class="token operator">:</span> StartOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> StartReturnType <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>startOptions <span class="token operator">=</span> <span class="token function">mergeRight</span><span class="token punctuation">(</span>
      <span class="token constant">DEFAULT_START_OPTIONS</span><span class="token punctuation">,</span>
      options<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token keyword">as</span> SetupWorkerInternalContext<span class="token punctuation">[</span><span class="token string">&#39;startOptions&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>startOptions<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u900F\u904E\u9019\u500B start method\uFF0C\u5FAA\u7DDA\u627E\u5230 <code>createStartHandler</code></p><h3 id="createstarthandler-ts" tabindex="-1"><a class="header-anchor" href="#createstarthandler-ts" aria-hidden="true">#</a> createStartHandler.ts</h3>`,4),w={href:"https://github.com/mswjs/msw/blob/main/src/browser/setupWorker/start/createStartHandler.ts",target:"_blank",rel:"noopener noreferrer"},y=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> createStartHandler <span class="token operator">=</span> <span class="token punctuation">(</span>
  context<span class="token operator">:</span> SetupWorkerInternalContext<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> StartHandler <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> customOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u8655\u7406\u4F86\u81EA service worker \u540D\u53EB \`REQUEST\` \u7684 message</span>
    <span class="token comment">// \u9019\u88E1\u5C31\u5C0D\u61C9\u4E0A\u4E86\u4E0A\u9762\u7684 getResponse \u88E1\u7684 sendToClient &quot;REQUEST&quot;</span>
    context<span class="token punctuation">.</span>workerChannel<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>
      <span class="token string">&#39;REQUEST&#39;</span><span class="token punctuation">,</span>
      <span class="token function">createRequestListener</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// \u4E0B\u4E00\u500B\u95DC\u9375\u5165\u53E3\u5728\u9019\uFF5E</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getWorkerInstance</span><span class="token punctuation">(</span>
      options<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span>url<span class="token punctuation">,</span>
      options<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span>options<span class="token punctuation">,</span>
      options<span class="token punctuation">.</span>findWorker<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>worker<span class="token punctuation">,</span> registration<span class="token punctuation">]</span> <span class="token operator">=</span> instance
    context<span class="token punctuation">.</span>worker <span class="token operator">=</span> worker
    context<span class="token punctuation">.</span>registration <span class="token operator">=</span> registration

    context<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>worker<span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token string">&#39;redundant&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u901A\u77E5 Service Worker \u7576\u524D client \u5C07\u95DC\u9589</span>
        context<span class="token punctuation">.</span>workerChannel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;CLIENT_CLOSED&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// \u78BA\u4FDD keepAlive interval \u95DC\u9589\uFF0C\u907F\u514D memory leaks</span>
      window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>keepAliveInterval<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// \u555F\u52D5 keepAlive interval</span>
    context<span class="token punctuation">.</span>keepAliveInterval <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span>workerChannel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;KEEPALIVE_REQUEST&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token number">5000</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>createStartHandler \u4E3B\u8981\u6703\u639B\u8F09\u8655\u7406 message <code>REQUEST</code>\uFF0C\u4E26\u555F\u52D5 keepAlive \u6A5F\u5236\uFF0C\u63A5\u8457\u9032\u5165\u5230 <code>createRequestListener</code> \u770B\u770B\u5177\u9AD4\u662F\u600E\u9EBC\u8655\u7406 request \u7684\u5427</p><h3 id="createrequestlistener-ts" tabindex="-1"><a class="header-anchor" href="#createrequestlistener-ts" aria-hidden="true">#</a> createRequestListener.ts</h3>`,3),h={href:"https://github.com/mswjs/msw/blob/main/src/browser/setupWorker/start/createRequestListener.ts",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/mswjs/msw/blob/main/src/browser/setupWorker/start/utils/createMessageChannel.ts",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createRequestListener</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  context<span class="token operator">:</span> SetupWorkerInternalContext<span class="token punctuation">,</span>
  options<span class="token operator">:</span> RequiredDeep<span class="token operator">&lt;</span>StartOptions<span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>
    event<span class="token operator">:</span> MessageEvent<span class="token punctuation">,</span>
    message<span class="token operator">:</span> ServiceWorkerMessage<span class="token operator">&lt;</span>
      <span class="token string">&#39;REQUEST&#39;</span><span class="token punctuation">,</span>
      ServiceWorkerIncomingEventsMap<span class="token punctuation">[</span><span class="token string">&#39;REQUEST&#39;</span><span class="token punctuation">]</span>
    <span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// WorkerChannel \u70BA msw \u53E6\u5916\u5B9A\u7FA9\u7684\u4E00\u500B class \uFF0C\u50B3\u5165\u4E00\u500B port\uFF0C\u53EF\u900F\u904E\u8A72 port \u50B3\u9001 message \u7D66\u5C0D\u61C9\u7684 port\uFF08\u9019\u5169\u500B ports \u662F\u900F\u904E MessageChannel \u7522\u751F\u7684\u4E00\u5C0D port\uFF09</span>
    <span class="token keyword">const</span> messageChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkerChannel</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>ports<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> requestId <span class="token operator">=</span> message<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>id
    <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">parseWorkerRequest</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>
    <span class="token keyword">const</span> requestCloneForLogs <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u4E0B\u4E00\u500B\u9032\u968E\u5165\u53E3\u5728\u9019\uFF5E\u8655\u7406 request \u4E26\u7522\u751F\u5C0D\u61C9 response \u4E1F\u56DE onMockedResponse</span>
      <span class="token keyword">await</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>
        request<span class="token punctuation">,</span>
        requestId<span class="token punctuation">,</span>
        context<span class="token punctuation">.</span>requestHandlers<span class="token punctuation">,</span>
        options<span class="token punctuation">,</span>
        context<span class="token punctuation">.</span>emitter<span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token keyword">async</span> <span class="token function">onMockedResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token punctuation">{</span> handler<span class="token punctuation">,</span> parsedResult <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u8907\u88FD mocked Response \u8B93 body \u53EF\u88AB\u8B80\u53D6\u70BA buffer \u4E26\u50B3\u9001\u7D66 worker</span>
            <span class="token keyword">const</span> responseClone <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> responseInit <span class="token operator">=</span> <span class="token function">toResponseInit</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>

            <span class="token doc-comment comment">/**
             * <span class="token keyword">@note</span> Safari doesn&#39;t support transferring a &quot;ReadableStream&quot;.
             * Check that the browser supports that before sending it to the worker.
             */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>supports<span class="token punctuation">.</span>readableStreamTransfer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">const</span> responseStream <span class="token operator">=</span> response<span class="token punctuation">.</span>body
              messageChannel<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>
                <span class="token string">&#39;MOCK_RESPONSE&#39;</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span>
                  <span class="token operator">...</span>responseInit<span class="token punctuation">,</span>
                  body<span class="token operator">:</span> responseStream<span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                responseStream <span class="token operator">?</span> <span class="token punctuation">[</span>responseStream<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
              <span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token comment">// As a fallback, send the response body buffer to the worker.</span>
              <span class="token keyword">const</span> responseBuffer <span class="token operator">=</span> <span class="token keyword">await</span> responseClone<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              messageChannel<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;MOCK_RESPONSE&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token operator">...</span>responseInit<span class="token punctuation">,</span>
                body<span class="token operator">:</span> responseBuffer<span class="token punctuation">,</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u8655\u7406\u4EFB\u4F55\u672A\u77E5\u932F\u8AA4</span>
        messageChannel<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;MOCK_RESPONSE&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          status<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
          statusText<span class="token operator">:</span> <span class="token string">&#39;Request Handler Error&#39;</span><span class="token punctuation">,</span>
          headers<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            name<span class="token operator">:</span> error<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
            message<span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">,</span>
            stack<span class="token operator">:</span> error<span class="token punctuation">.</span>stack<span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>createRequestListener \u4E3B\u8981\u6703\u4F7F\u7528 worker \u50B3\u4F86\u7684 payload \u5275\u5EFA\u4E00\u500B Request object\uFF0C\u63A5\u8457\u900F\u904E <code>handleRequest</code> \u628A request \u62FF\u53BB\u6BD4\u5C0D\u53D6\u5F97\u5C0D\u61C9\u7684 response\uFF0C\u6700\u5F8C\u518D\u900F\u904E messageChannel \u628A response \u50B3\u905E\u56DE worker\uFF0C\u5230\u6B64\u6574\u500B msw \u7684 Service Worker \u8A0A\u606F\u4EA4\u63DB\u6A5F\u5236\u7B97\u662F\u7406\u89E3\u5B8C\u6210\u4E86</p><h2 id="\u6D41\u7A0B\u7E3D\u7D50" tabindex="-1"><a class="header-anchor" href="#\u6D41\u7A0B\u7E3D\u7D50" aria-hidden="true">#</a> \u6D41\u7A0B\u7E3D\u7D50</h2><p>\u7C21\u55AE\u7E3D\u7D50\u4E0B\u6D41\u7A0B\uFF0C\u6574\u500B\u8A0A\u606F\u4EA4\u63DB\u904E\u7A0B\u5F9E client \u7AEF\u958B\u59CB</p><ul><li>client \u767C\u51FA activate \u8ACB\u6C42\uFF0C\u628A\u81EA\u5DF1\u8A3B\u518A\u9032 service worker \u4E2D</li><li>\u7576\u67D0\u500B client \u7AEF\u767C\u51FA request \u5F8C\uFF0Cservice worker \u6514\u622A\u8ACB\u6C42\u4E26\u628A request \u8A73\u7D30\u8CC7\u6599\u50B3\u56DE\u7D66 main client \u540C\u6642\u5E36\u8457\u4E00\u500B MessageChannel \u7684 port2</li><li>main client \u6536\u5230 service worker \u50B3\u9001\u7684 message <code>REQUEST</code> \u5F8C\uFF0C\u5728\u672C\u5730\u67E5\u627E\u5C0D\u61C9\u7684 response</li><li>\u4E0D\u8AD6\u6709\u7121\u627E\u5230\uFF0C\u6700\u5F8C main client \u90FD\u6703\u5C07\u7D50\u679C\u900F\u904E MessageChannel \u7684 port2 \u628A response \u5167\u5BB9\u50B3\u56DE service worker</li><li>service worker \u6536\u5230 main client \u7684 response \u5167\u5BB9\uFF0C\u69CB\u5EFA\u6210\u4E00\u500B HTTP Response object \u5F8C\u50B3\u56DE\u7D66\u767C\u51FA\u8ACB\u6C42\u7684 client</li></ul>`,5),q=n("h2",{id:"\u611F\u60F3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u611F\u60F3","aria-hidden":"true"},"#"),s(" \u611F\u60F3")],-1),S=n("p",null,[s("\u9019\u6B21\u5FC3\u8840\u4F86\u6F6E\u8DD1\u53BB\u95B1\u8B80 msw \u95DC\u65BC browser side \u7684 service worker \u7528\u6CD5\uFF0C\u771F\u7684\u662F\u7372\u76CA\u826F\u591A\uFF0C\u770B\u5B8C\u5F8C\u751A\u81F3\u90FD\u53EF\u4EE5\uFF08\u5DF2\u7D93\uFF09\u76F4\u63A5\u81EA\u5E79\u4E00\u500B\u7C21\u6613\u7248\u672C\u7684 msw \u4E86...\uFF0C\u9664\u4E86 service worker \u7684\u4E00\u4E9B\u7279\u6027\u5916\uFF0C\u6700\u91CD\u8981\u7684\u662F\u4E4B\u524D\u5B8C\u5168\u6C92\u807D\u904E "),n("code",null,"MessageChannel"),s(" \u9019\u6771\u897F\uFF0C\u900F\u904E\u9019\u6B21\u5B78\u7FD2\u7E3D\u7B97\u5B78\u5230\u4E86\u9019\u6771\u897F\uFF0C\u96D6\u7136\u4E0D\u77E5\u9053\u5BE6\u969B\u958B\u767C\u4E2D\u9084\u53EF\u4EE5\u7528\u5728\u54EA\u4E9B\u5730\u65B9\uFF0C\u5F8C\u7E8C\u518D\u4F86\u7814\u7A76\u770B\u770B\uFF0C\u80FD\u5728\u65E5\u5F8C\u7684\u958B\u767C\u4E0A\u5BE6\u969B\u4F7F\u7528\u4E0A\u7684\u5834\u666F")],-1),C=n("p",null,"\u90A3\u9019\u6B21\u6280\u8853\u5206\u4EAB\u5C31\u5230\u9019\u62C9\uFF0C\u611F\u8B1D\u5404\u4F4D\u7684\u6536\u770B\uFF0C\u5982\u679C\u559C\u6B61\u6211\u7684\u5206\u4EAB\u6587\u7AE0\u4E5F\u6B61\u8FCE\u5206\u4EAB\u7D66\u66F4\u591A\u4EBA\u770B\u770B\u645F\uFF0C\u4E0B\u7BC7\u898B\u62C9\uFF0C\u63B0\u63B0\uFF5E=V=",-1);function _(x,R){const p=o("SocialBlock"),e=o("ExternalLinkIcon");return i(),l("div",null,[r,a(p,{hashtags:"javascript,typescript,msw,serviceWorker,mock"}),k,n("ul",null,[n("li",null,[n("a",d,[s("File"),a(e)])])]),v,n("ul",null,[n("li",null,[n("a",m,[s("File"),a(e)])])]),b,n("ul",null,[n("li",null,[n("a",w,[s("File"),a(e)])])]),y,n("ul",null,[n("li",null,[n("a",h,[s("File"),a(e)])]),n("li",null,[n("a",f,[s("class WorkerChannel"),a(e)])])]),g,a(p,{hashtags:"javascript,typescript,msw,serviceWorker,mock"}),q,S,C])}const I=c(u,[["render",_],["__file","learn-from-msw-source-code.html.vue"]]);export{I as default};
