import{_ as i,r as t,o as p,c,a as e,d as s,e as n,f as a}from"./app-1a1ac012.js";const r={},d=s("h1",{id:"babel7-基本介紹與使用",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#babel7-基本介紹與使用","aria-hidden":"true"},"#"),n(" Babel7 基本介紹與使用")],-1),u=a(`<p>本篇主要紀錄 Babel 7 的實際安裝，設置等過程，會一路從早期的開始說起。如果你懶得看一堆歷史，也是可以到最下方查看最新配置使用。</p><h2 id="babel-相關介紹" tabindex="-1"><a class="header-anchor" href="#babel-相關介紹" aria-hidden="true">#</a> Babel 相關介紹</h2><p>Babel 主要作為相關 ECMA 相關新語法的一個編譯工具，讓開發者可以使用最新的語法標準來編譯為舊的寫法。</p><p>這裡以 webpack + babel 來示範使用與介紹。</p><h2 id="基本安裝-純語法轉換-syntax-not-api" tabindex="-1"><a class="header-anchor" href="#基本安裝-純語法轉換-syntax-not-api" aria-hidden="true">#</a> 基本安裝（純語法轉換，syntax not api）</h2><p>安裝 <code>babel-loader</code>, <code>@babel/core</code>, <code>@babel/preset-env</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> babel-loader @babel/core @babel/preset-env --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>增加 webpack loader</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接著配置基本的 babel 設定，配置方式有直接在 loader 的配置，或是使用 .babelrc 進行相關配置。</p><p>這邊注意，如果是新版的 babel7 使用 corejs 時，將出現提醒 preset 中的 <code>modules: false</code> 配置已廢棄，建議明確指定模組類型並在 <code>plugins</code> 中進行引用。例如 <code>@babel/plugin-transform-modules-commonjs</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// .babelrc</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;@babel/preset-env&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就完成最基本的 babel 配置（syntax 的部分，但像 <code>includes</code> 或 <code>Object.values</code> 這種稱為 api ），若需要其他 api 功能請見下方～。</p><h3 id="進階-polyfill-api" tabindex="-1"><a class="header-anchor" href="#進階-polyfill-api" aria-hidden="true">#</a> 進階 polyfill api</h3><p>上面的 <code>@babel/preset-env</code> 其實具有 polyfill 的功能，預設配置如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;useBuiltIns&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 這裡預設為 false，也就是不使用相關 polyfill api</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若將其設置為 <code>entry</code> 表示在入口處手動引入，必須在源碼最上方手動加上如下，這種方式會將整個 polyfill 全部引入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// need @babel/polyfill</span>
<span class="token keyword">import</span> <span class="token string">&#39;@babel/polyfill&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或是新版的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// need corejs, regenerator-runtime</span>
<span class="token keyword">import</span> <span class="token string">&#39;core-js/stable&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;regenerator-runtime/runtime&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),b=s("code",null,"@babel/polyfill",-1),v=s("code",null,"core-js",-1),m=s("code",null,"regenerator-runtime",-1),k={href:"https://github.com/zloirock/core-js#babelpolyfill",target:"_blank",rel:"noopener noreferrer"},h=s("code",null,"@babel/polyfill",-1),g=s("code",null,"core-js@2",-1),f=s("code",null,"core-js@3",-1),_=a('<p>最好的方式是將其設置為 <code>usage</code>，實現所謂的<code>按需加載</code>，當使用到相關新的 api 時，檢測並協助加上 polyfill，減少整個打包後的體積，但因為這種方式 babel 會在每個需要的地方定義一次 helper，造成多處重複的 helper 出現，導致打包體積仍然很大。（解決方式見下方 <code>@babel/plugin-transform-runtime</code>）</p><h2 id="插件安裝" tabindex="-1"><a class="header-anchor" href="#插件安裝" aria-hidden="true">#</a> 插件安裝</h2><ol><li>@babel/plugin-syntax-dynamic-import</li></ol><p>這個插件主要幫助解析動態引入 <code>import()</code> 這種寫法，只是幫助解析，不會轉換喔～</p><ol start="2"><li>@babel/plugin-transform-runtime</li></ol><p>前面講到 @babel/preset-env 雖然可以實現 polyfill，但卻有個缺點，他的 polyfill 會造成全局污染，是直接在源碼上方 <code>require</code> 一個方法，所以 babel 的機制會是直接在對像上添加方法，例如 <code>includes</code> 直接掛在 <code>Array.prototype</code> 上面，也就容易與一些第三方庫定義的全局方法衝突導致問題，在公認的編程中也是較不推薦修改全局變量的。</p>',6),y=s("code",null,"@babel/plugin-transform-runtime",-1),j=s("code",null,"@babel/runtime",-1),x={href:"https://babeljs.io/docs/en/babel-plugin-transform-runtime",target:"_blank",rel:"noopener noreferrer"},q=a(`<p>而 <code>@babel/runtime</code> 是舊的，這個插件包含一些 <code>babel helper</code>, <code>regenerator-runtime</code>，新的插件命名為 <code>@babel/runtime-corejs2</code>, <code>@babel/runtime-corejs3</code>，分別另外包含了 <code>core-js@2</code>, <code>core-js@3</code>，應該是目前更優的解法</p><p><strong>安裝</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> @babel/plugin-transform-runtime --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> @babel/runtime-corejs3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改 <code>.babelrc</code> 設定如下：</p>`,5),B=s("code",null,"@babel/preset-env",-1),w=s("code",null,"useBuiltIns",-1),$=s("code",null,"@babel/plugin-transform-runtime",-1),E={href:"https://github.com/babel/babel/issues/10271#issuecomment-528379505",target:"_blank",rel:"noopener noreferrer"},I=a(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;@babel/preset-env&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/plugin-transform-runtime&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;corejs&quot;</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token comment">// 預設是 false，也就是不使用 api，可以選用 2, 3 不同版本，自動按需編譯</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),N={href:"https://babeljs.io/docs/en/babel-plugin-transform-runtime",target:"_blank",rel:"noopener noreferrer"},V=a(`<h2 id="結論" tabindex="-1"><a class="header-anchor" href="#結論" aria-hidden="true">#</a> 結論</h2><p>實際項目中，只需要使用最後一個 <code>.babelrc</code> 配置即可，其他主要是介紹居多，透過回顧整個 babel 的主要脈絡來更清晰自己項目需要使用的是什麼配置，希望大家喜歡～歡迎分享讓更多人一起了解吧！</p><h2 id="快速解決問題版本" tabindex="-1"><a class="header-anchor" href="#快速解決問題版本" aria-hidden="true">#</a> 快速解決問題版本</h2><p>安裝</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> @babel/runtime-corejs3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置</p><p><code>.babelrc</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;@babel/preset-env&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">&quot;@babel/plugin-transform-runtime&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;corejs&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function S(A,C){const o=t("SocialBlock"),l=t("ExternalLinkIcon");return p(),c("div",null,[d,e(o,{hashtags:"javascript,babel"}),u,s("blockquote",null,[s("p",null,[n("這裡很多人搞不懂，為何又是 "),b,n(" 又有 "),v,n(" 和 "),m,n("，其實這在"),s("a",k,[n("官方說明"),e(l)]),n("裡有提到，簡單講，"),h,n(" 就是包含了另外兩者，只是新版將它拆開處理。（對應到的會是 "),g,n("，新的 "),f,n(" 新增了物件 api)")])]),_,s("p",null,[n("為了解決這個問題，"),y,n(" 誕生了，這個插件主要會直接編譯，其實這個插件主要是使用在開發環境，他的另一個兄弟叫做 "),j,n(" 則是安裝在正式環境下，詳細區分原因"),s("a",x,[n("可見這裡"),e(l)]),n("，兩者可以說是不可分割的。")]),q,s("blockquote",null,[s("p",null,[n("注意！"),B,n(" 的 "),w,n(" 會與 "),$,n(" 的配置發生衝突，避免同時使用兩者進行配置。"),s("a",E,[n("看這裡討論"),e(l)])])]),I,s("p",null,[n("有關於"),s("a",N,[n("預設配置"),e(l)]),n("可到這裡查看")]),V,e(o,{hashtags:"javascript,babel"})])}const z=i(r,[["render",S],["__file","babel-7.html.vue"]]);export{z as default};
