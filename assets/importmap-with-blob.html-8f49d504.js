import{_ as o,r as e,o as c,c as l,a,d as n,e as s,f as i}from"./app-6ffe09b2.js";const u={},r=n("h1",{id:"在瀏覽器中直接-import-vue-sfc-開發起來",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#在瀏覽器中直接-import-vue-sfc-開發起來","aria-hidden":"true"},"#"),s(" 在瀏覽器中直接 import Vue SFC 開發起來")],-1),k={href:"https://juejin.cn/post/7070339012933713956",target:"_blank",rel:"noopener noreferrer"},d=i(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>現代瀏覽器大部分都支援 ESModule 了，然而撇除像 Vite, Snowpack 這樣在 server 環境代為編譯的工具外，在使用 pure ESModule 開發時，我們無法直接引入在同一份文件下的其他模組，比如下面</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>雖然在開發伺服器環境下，我們可能不需要這樣使用，可以直接透過 import 絕對路徑取得模組，但在像是 codepen 或是自己玩玩的小專案時，我們不一定可以把模組拆開來放到其他路徑上，這時這種 <code>inline es module</code> 的使用就可以派上用場了</p><h2 id="想法探討" tabindex="-1"><a class="header-anchor" href="#想法探討" aria-hidden="true">#</a> 想法探討</h2><p>在實現上我們會遇到幾個問題</p><ol><li><p>如果使用原生的 <code>type=&quot;module&quot;</code> 會直接被瀏覽器解析，我們希望能統一處理這些特殊 inline module，可以使用客製化的 script type，這邊使用 <code>type=&quot;inline-module&quot;</code> 來標記</p></li><li><p>受限於 pure ESModule 必須使用 url 引入這個特點，我們需要把 inline 的 module 內容轉成 url 後，對該轉換後的 url 進行 import 來達成，此時可以借助 <code>Blob</code> 的神奇力量來將文字內容轉換為 url 的形式</p></li></ol><h3 id="實現文字轉為-url-的部分" tabindex="-1"><a class="header-anchor" href="#實現文字轉為-url-的部分" aria-hidden="true">#</a> 實現文字轉為 url 的部分</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getBlobURL</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>完成後我們需要判斷我們的 <code>inline-module</code> 究竟內部有沒有東西，還是他有 <code>src</code> 需要進一步對內容進行請求，在拿到內容後使用上面的函數來將內容轉為 url，這樣後續我們在使用時只需要 import 那個 blobUrl 就可以使用該模組了</li></ol><h2 id="初步實現" tabindex="-1"><a class="header-anchor" href="#初步實現" aria-hidden="true">#</a> 初步實現</h2><p>以了想法後開始動手實際實現一下功能吧！因為是初步實現，可以先以達成目的為優先，後續再慢慢來優化</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 存放經由 blob 轉換後的模組 url 路徑</span>
<span class="token keyword">const</span> blobUrlMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 我們的主角～</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">inlineImport</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> blobUrl<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>moduleId <span class="token keyword">in</span> blobUrlMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 解析過的直接拿</span>
    blobUrl <span class="token operator">=</span> blobUrlMap<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 還沒解析的進行轉換</span>
    <span class="token keyword">const</span> module <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">script[type=&quot;inline-module&quot;]</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>moduleId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      blobUrl <span class="token operator">=</span> <span class="token function">getBlobURL</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
      blobUrlMap<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> blobUrl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>blobUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 動態載入</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>blobUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的實現，主要是根據我們前面的想法一步一步實現出來，從我們的客製化模組內取得文字內容後，交給 Blob 轉為 Url 並儲存進暫存當中，最後透過動態 import 的方式將內容取出</p><p>實際用用看</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inline-module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>easy-core.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">inlineImport</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在 console 看到正確印出了 <code>{ value: &#39;foo&#39; }</code>，大功告成～</p><p>還沒還沒，都實現到這邊了，怎麼可以不往下繼續深入優化一波？</p><p>到這邊，我們來整理下有哪些可以執行的優化看看：</p><ol><li>動態 inlineImport 希望能改成靜態的 <code>import xxx from &#39;xxx&#39;</code></li><li>內容除了 <code>innerHTML</code>，也希望可以加入 <code>src</code> 從外部載入</li></ol><h2 id="優化-1-靜態載入" tabindex="-1"><a class="header-anchor" href="#優化-1-靜態載入" aria-hidden="true">#</a> 優化-1 靜態載入</h2><p>這裡可以使用 <code>importmap</code> 這個上網查了下居然已經存在一小段時間的東西（沒啥人知道的感覺，畢竟沒怎麼看到討論），使用原生 esmodule 時，我們必須引入完整的路徑網址，但 CDN 路徑往往很長，如果每次要使用都重新寫一遍真的很痛苦，<code>importmap</code> 顧名思義就是讓我們能用一個 map 來映射對照到指定的路徑去，這樣在使用時我們就不必每次都輸入很長的網址</p><p>使用範例像是這樣，是不是非常精簡？</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>importmap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://unpkg.com/vue@3/dist/vue.esm-browser.js&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>createApp<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但要特別注意的是，<code>importmap</code> 有兩個限制</p><ol><li>必須在所有 <code>import</code> 發生前先定義，如果有任何 <code>import</code> 在他前面已經執行的話，就會出現錯誤</li><li>一個 html 目前只支援一個 <code>importmap</code>，多個出現時會跳出錯誤提示</li></ol><p>礙於這個限制可能會導致一些開發上的困擾，我們可以用 js 動態產生 <code>importmap</code>，並建立一個客製化 importmap 的機制 <code>inline-module-importmap</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> currentScript <span class="token operator">=</span> document<span class="token punctuation">.</span>currentScript <span class="token operator">||</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">imports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getBlobURL</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">setupInlineModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 取得所有 inline-module</span>
  <span class="token keyword">const</span> modules <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;script[type=&quot;inline-module&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> importMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token punctuation">[</span><span class="token operator">...</span>modules<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> module<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 取得所有 inline-module 的 blobUrl 並儲存</span>
      importMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getBlobURL</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 檢查是否已存在 importmap</span>
  <span class="token keyword">const</span> importMapEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;script[type=&quot;importmap&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>importMapEl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&#39;importmap already defined&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 檢查是否有自定義的 importmap</span>
  <span class="token keyword">const</span> externalMapEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;script[type=&quot;inline-module-importmap&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>externalMapEl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> externalMap <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>externalMapEl<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>imports<span class="token punctuation">,</span> externalMap<span class="token punctuation">.</span>imports<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 合併提取出的所有 import url 到 map 當中</span>
  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span>imports<span class="token punctuation">,</span> importMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 將 importmap 動態插入 document</span>
  <span class="token keyword">const</span> mapEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  mapEl<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;importmap&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  mapEl<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
  currentScript<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>mapEl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">setupInlineModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>動態產生 importmap 後我們就可以使用靜態 import 如下了！</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inline-module-importmap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://unpkg.com/vue@3/dist/vue.esm-browser.js&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inline-module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inline-module-core.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// const foo = (await inlineImport(&#39;#foo&#39;)).default;</span>
  <span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此大部分的問題都被解決了，只需要注意我們的 <code>inline-module-core.js</code> 必須在所有 <code>inline-module</code> 之後載入，並在其他原生 <code>module</code> 載入前套用即可</p><h2 id="結論" tabindex="-1"><a class="header-anchor" href="#結論" aria-hidden="true">#</a> 結論</h2><p>到此我們的主要事項已經達成，可以在瀏覽器內快樂調用我們的模組了，當然除此之外，我們其實可以把 <code>Blob</code> 發揮更淋漓盡致，直接把編譯搬到瀏覽器中都沒有問題了（千萬別用在正式產品，直接在客戶端編譯實際上是非常損耗效能的，這個技術主要只是拿來好玩用～）</p>`,33),m={href:"https://github.com/johnnywang1994/script-custom-module",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"最後還是要特別感謝原文的大佬講解非常仔細，讓我學習到非常多，也歡迎有興趣看看的童鞋們幫我前往點個讚瞜～謝謝大家=V=",-1),b=n("h2",{id:"參考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#參考","aria-hidden":"true"},"#"),s(" 參考")],-1),g={href:"https://juejin.cn/post/7070339012933713956",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/vuejs/vue-loader",target:"_blank",rel:"noopener noreferrer"};function y(f,q){const p=e("SocialBlock"),t=e("ExternalLinkIcon");return c(),l("div",null,[r,a(p,{hashtags:"javascript,esmodule,import,vue"}),n("p",null,[s("今天這篇是一個看到大佬文章後的研究文，主題是有關於如何在同一份 html 內使用 import 來引入同一份文件下的其他模組，看完真的是跪了，真的是非常騷的操作，本篇會簡單說明大綱並加上一些我自己的實現，原文詳細內容"),n("a",k,[s("請見這邊"),a(t)])]),d,n("p",null,[s("由於篇幅關係，剩餘的優化部分可以前往我的 "),n("a",m,[s("Source Code"),a(t)]),s(" 內觀賞 XD，包含 Loader 機制實現、Vue SFC 編譯、React JSX 編譯、SCSS 編譯等等功能都在源碼中實現")]),v,a(p,{hashtags:"javascript,esmodule,import,vue"}),b,n("ul",null,[n("li",null,[n("a",g,[s("分享小技巧：实现在浏览器中import内联JS模块"),a(t)])]),n("li",null,[n("a",h,[s("Vue Loader"),a(t)])])])])}const x=o(u,[["render",y],["__file","importmap-with-blob.html.vue"]]);export{x as default};
