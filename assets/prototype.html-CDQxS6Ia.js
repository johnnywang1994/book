import{_ as p,c as o,b as s,a as e,d as c,e as t,o as l,r as i}from"./app-mRs5tNIG.js";const r={};function u(d,n){const a=i("SocialBlock");return l(),o("div",null,[n[0]||(n[0]=s("h1",{id:"prototype-pattern",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#prototype-pattern"},[s("span",null,"Prototype Pattern")])],-1)),e(a,{hashtags:"design,pattern,prototype"}),n[1]||(n[1]=c(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>大家好，我是 Johnny，今天要紀錄分享的是 Patterns 筆記系列的 <code>Prototype Pattern</code></p><h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹"><span>介紹</span></a></h2><p>Prototype 模式（原型）是一種在多個對象中彼此共享屬性類型的開發方式，prototype 本身在 Javascript 中是一個內建的對象，並且並且能夠讓對象透過 prototype chain（原型鍊）獲取、觸及到。</p><p>以下是一個 ES6 class 創建的 Dog 類型</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Woof!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>constructor</code> 中文稱作「建構器」，此方法是「初始化」實例的過程，每次呼叫 <code>new</code> 進行創建一個新的實例時都會執行一次，而範例中透過 ES6 建立的類型，所有在 class 上掛載的屬性會直接綁定在 <code>prototype</code> 上，以下是兩種獲取類型本身或是實例上的 prototype 方法</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// constructor: ƒ Dog(name, breed) bark: ƒ bark()</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog1<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// constructor: ƒ Dog(name, breed) bark: ƒ bark()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中實例上的 <code>__proto__</code> 只是一個 reference 指向到原類型的 <code>prototype</code>，當我們試圖在實例對象上獲取某不存在的屬性時，就會沿著原型鍊逐層查找</p><h3 id="繼承" tabindex="-1"><a class="header-anchor" href="#繼承"><span>繼承</span></a></h3><p>另一個在原型鍊中重要的觀念是「繼承」，方便我們直接將現有的類型進行擴展使用，以下我們建立一個新的 <code>SuperDog</code> 類型，讓其繼承自 <code>Dog</code>，我們就可以在現有的 Dog 上加入新的功能 <code>fly</code>，使 <code>SuperDog</code> 實例同時具備 <code>bark</code>, <code>fly</code> 功能</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SuperDog</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;Flying!&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>當我們建立了一個 superdog 實例後，其原型鍊關係如下圖 <img src="https://www.patterns.dev/_next/image?url=https%3A%2F%2Fres.cloudinary.com%2Fddxwdqwkr%2Fimage%2Fupload%2Ff_auto%2Fv1609056523%2Fpatterns.dev%2FScreen_Shot_2020-12-24_at_1.09.36_PM_isgkmt.png&amp;w=3840&amp;q=75" alt=""></p><h3 id="object-create" tabindex="-1"><a class="header-anchor" href="#object-create"><span>Object.create</span></a></h3><p>另一個關於 prototype 實用的 javascript 方法是 <code>Object.create</code>，我們可以透過這個方法快速產生一個指定 prototype 的物件</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 我們定義的 prototype 對象</span></span>
<span class="line"><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Woof!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 建立一個 pet1 對象，並將其 __proto__ 指向我們的 dog prototype</span></span>
<span class="line"><span class="token keyword">const</span> pet1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">pet1<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Woof!</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 打印屬性試試</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;pet1 本身的屬性: &quot;</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>pet1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;pet1 原型對象上的屬性: &quot;</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>pet1<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>透過此方法，雖然 <code>pet1</code> 本身沒有任何屬性方法，但因為其被指定了 prototype 為 dog 物件，我們依然能夠在其上調用 dog 上的 <code>bark</code> 方法</p>`,17)),e(a,{hashtags:"design,pattern,prototype"}),n[2]||(n[2]=s("h2",{id:"結論",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#結論"},[s("span",null,"結論")])],-1)),n[3]||(n[3]=s("p",null,[t("透過原型鍊在對象上共用屬性，避免創建許多重複的資料、方法等等，造成記憶體的浪費，實作上算是一個蠻常使用到的基礎模式，推薦詳細往下鑽研閱讀 "),s("a",{href:"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",target:"_blank",rel:"noopener noreferrer"},"MDN 繼承與原型鏈"),t("，今天就分享到這拉，感謝收看 =V=~~")],-1))])}const m=p(r,[["render",u],["__file","prototype.html.vue"]]),v=JSON.parse('{"path":"/articles/memo/patterns/design/prototype.html","title":"Prototype Pattern","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"介紹","slug":"介紹","link":"#介紹","children":[{"level":3,"title":"繼承","slug":"繼承","link":"#繼承","children":[]},{"level":3,"title":"Object.create","slug":"object-create","link":"#object-create","children":[]}]},{"level":2,"title":"結論","slug":"結論","link":"#結論","children":[]}],"git":{"updatedTime":1678887677000,"contributors":[{"name":"johnnywang","email":"johnnywang@test.com","commits":1}]},"filePathRelative":"articles/memo/patterns/design/prototype.md"}');export{m as comp,v as data};
