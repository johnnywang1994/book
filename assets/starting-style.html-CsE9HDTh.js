import{_ as p,c as e,b as s,a as t,d as o,r as l,o as c}from"./app-BVIPw0rj.js";const i={};function u(r,n){const a=l("SocialBlock");return c(),e("div",null,[n[0]||(n[0]=s("h1",{id:"如何不用-settimeout-幫-display-none-的-dom-加動畫",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#如何不用-settimeout-幫-display-none-的-dom-加動畫"},[s("span",null,"如何不用 setTimeout 幫 display: none 的 DOM 加動畫")])],-1)),t(a,{hashtags:"css,allow-discrete,transition,starting-style,tailwindcss,2024"}),n[1]||(n[1]=o(`<p>嗨大家好，我是 Johnny，所謂前端，除了 JS 基本功外，更重要的是對於 CSS 切版扎實的能力，不然前端就改名叫「串接 api 工程師」就好了=V=</p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>display none 還在用 setTimeout 加動畫？對於 css 當中 display none 大家都習慣性使用 setTimeout 幫元素加上動畫，因為當 DOM 元素加上 css display none後，會立即從畫面中消失，也導致 transition 的 property 無法發揮效果，這解法本身沒問題，但技術總是推陳出新，如果你<code>不考慮 IE 相容性</code>的問題，可以試試下面這方法</p><h2 id="transition-behavior-allow-discrete" tabindex="-1"><a class="header-anchor" href="#transition-behavior-allow-discrete"><span>transition-behavior: allow-discrete</span></a></h2><p>allow-discrete 定義是：「這個屬性允許在過度中使用離散屬性，其對於初始值、最終值為 <code>display: none</code>, <code>content-visibility: hidden</code> 的過度，允許其 visible 值在整個過渡中可用」，聽不懂吧=V=，簡單說就是：「允許 display, content-visibility 做出動畫過渡效果」，怎麼用呢？</p><ul><li>假設今天在 react 使用 tailwindCSS 中，我們有個按鈕可以 toggle 隱藏顯示文字如下，想要加入效果讓文字內容淡入淡出，我們會寫下面這樣</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>show<span class="token punctuation">,</span> setShow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setShow</span><span class="token punctuation">(</span><span class="token operator">!</span>show<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Toggle</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span></span>
<span class="line">        <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">transition-all duration-500 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span></span>
<span class="line">          show <span class="token operator">?</span> <span class="token string">&#39;opacity-1&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;opacity-0 hidden&#39;</span></span>
<span class="line">        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Hello World</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然後就會發現沒屁用，因為 display: none 並不會觸發 transition 過渡效果，此時可以使用 transition-behavior: allow-discrete 如下</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>show<span class="token punctuation">,</span> setShow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setShow</span><span class="token punctuation">(</span><span class="token operator">!</span>show<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Toggle</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span></span>
<span class="line">        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token string">&#39;opacity 0.5s, display 0.5s allow-discrete&#39;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span></span>
<span class="line">          show <span class="token operator">?</span> <span class="token string">&#39;opacity-1&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;opacity-0 hidden&#39;</span></span>
<span class="line">        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Hello World</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加上後會發現，關閉的 opacity 是正常作動了沒錯，但開啟時仍然是瞬間出現，這問題主要是因為 <code>CSS 為了避免未預期的問題，預設不會在 DOM 元素初次渲染到畫面中時套用 CSS Transition 過渡</code>，詳細可以<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@starting-style#description" target="_blank" rel="noopener noreferrer">參考這裡的解釋</a>，也就是說，我們的 <code>Hello World</code> 在初次渲染時並不會套用 opacity-0 並過渡到 opacity-1，而是直接跳到最終狀態 opacity-1</p><h2 id="starting-style" tabindex="-1"><a class="header-anchor" href="#starting-style"><span>@starting-style</span></a></h2><p>為了解決元素初次渲染時無法套用 CSS Transition 的問題，這裡再介紹一個 css at function <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@starting-style" target="_blank" rel="noopener noreferrer">@starting-style</a>，它可以讓你指定元素在初次渲染進入 DOM 中時的樣式套用</p><p>把剛剛的範例改一下：</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code class="language-jsx"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>show<span class="token punctuation">,</span> setShow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">maxWidth</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token string">&quot;auto&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setShow</span><span class="token punctuation">(</span><span class="token operator">!</span>show<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Toggle</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span></span>
<span class="line">        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">transition</span><span class="token operator">:</span> <span class="token string">&#39;opacity 0.5s, display 0.5s allow-discrete&#39;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[@starting-style]:opacity-0 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span></span>
<span class="line">          show <span class="token operator">?</span> <span class="token string">&#39;opacity-1&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;opacity-0 hidden&#39;</span></span>
<span class="line">        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span></span></span>
<span class="line">      <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        Hello World</span>
<span class="line">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大功告成！！現在開關狀態的動畫都正常作動了～可以發現我用 tailwindCSS 寫，甚至連一行 css 都不用寫...，但如果不懂這用法，就準備寫一大串 css 外加一大串 setTimeout JS，還要搞個 timer debounce 取消動畫，妥妥地把 code 寫成一坨屎 XD</p>`,15)),t(a,{hashtags:"css,allow-discrete,transition,starting-style,tailwindcss,2024"}),n[2]||(n[2]=s("h2",{id:"結論",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#結論"},[s("span",null,"結論")])],-1)),n[3]||(n[3]=s("p",null,"雖然我遇過很多人看不起切版這件事，總覺得切版「不就那樣」、「換換圖」？？？，但以我切版多年做過一堆 CSS 動畫的經驗，我可以很肯定地跟抱持這種想法的人說：「CSS 遠遠不如你想得簡單！！」，凡事話別說太滿，當然前端把 JS、演算法優化學好也很重要，但一個優良的切版能力（不止基本 layout，還包含 2d, 3d css animation、曲線動畫、css 底層 render 機制），絕對能讓你在眾多前端中脫穎而出，JS 只要有達及格線基本概念沒問題就行、當然越強越好，但比起 JS 我更重視一位前端工程師的切版能力，好的切版能力除了可以讓你更容易找到版面的 bug，JS 寫起來也會輕鬆非常多，我看過太多 JS 能力普通，切版能力爛到掉渣的前端...，遇到切不出來的版就直接拿 JS 硬尻硬改畫面，拜託誒...你是叫「前端」，切版能力不行我誠心建議你轉行比較快",-1)),n[4]||(n[4]=s("p",null,"抱歉跑題了ＸＤ，總之今天介紹給大家的這個方法用得好的話，可以顯著減少引入的 library 量，不然連個簡單的 overlay 遮罩 opacity 過渡都要 import 個 library 來搞，還要鑽牛角尖去優化 JS 效能就太逗了...趕緊分享給身邊的前端朋友吧，前提要他真的是「前端」=V=",-1))])}const d=p(i,[["render",u]]),g=JSON.parse('{"path":"/articles/css/starting-style.html","title":"如何不用 setTimeout 幫 display: none 的 DOM 加動畫","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1748788505000,"contributors":[{"name":"johnnywang","username":"johnnywang","email":"johnnywang@test.com","commits":1,"url":"https://github.com/johnnywang"},{"name":"Lindy Liao","username":"","email":"meiliao1207@gmail.com","commits":1}],"changelog":[{"hash":"f01bfa128b4d33fbeddb8abb1697b5391b273d28","time":1748788505000,"email":"meiliao1207@gmail.com","author":"Lindy Liao","message":"UPD"},{"hash":"19ca78bf291fca56fe7e392524923775549f779c","time":1710772220000,"email":"johnnywang@test.com","author":"johnnywang","message":"✨ UPD"}]},"filePathRelative":"articles/css/starting-style.md"}');export{d as comp,g as data};
