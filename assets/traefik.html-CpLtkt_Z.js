import{_ as s,c as a,e,o as t}from"./app-NJTEVzrQ.js";const i={};function l(p,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="traefik-memo" tabindex="-1"><a class="header-anchor" href="#traefik-memo"><span>Traefik Memo</span></a></h1><p>本篇是學習 traefik 的學習筆記，主要是介紹一些基礎概念, 名詞說明, 使用方式</p><h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹"><span>介紹</span></a></h2><p>Traefik 是一款開源的邊緣路由器，主要功用是發布服務並進行一系列的組織管理。替系統接收請求並找出哪些組件負責處理它們</p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>Traefik 是一個邊緣路由器，做為系統平台的入口，它攔截並路由每個傳入的請求，並決定哪些服務處理哪些請求的所有邏輯和規則 <img src="https://doc.traefik.io/traefik/assets/img/traefik-concepts-1.png" alt=""></p><h3 id="自動化服務偵測-auto-service-discovery" tabindex="-1"><a class="header-anchor" href="#自動化服務偵測-auto-service-discovery"><span>自動化服務偵測 Auto Service Discovery</span></a></h3><p>透過適當的服務集成，在部署服務時 traefik 將能夠自動偵測該部署服務，並提供系列的路由導向配置，無需像傳統邊緣路由器那樣手動配置每個服務，而當服務被移除時，也將自動移除相關的路由配置</p><blockquote><p>Traefik 能夠使用您的 Cluster API 來發現服務並讀取附加信息。 在 Traefik 中，這些連接器被稱為 <code>Provider</code>，因為它們為 Traefik 提供配置。<a href="https://doc.traefik.io/traefik/migration/v1-to-v2/#providers" target="_blank" rel="noopener noreferrer">點此查看所有支援的 Provider 清單</a></p></blockquote><h2 id="配置介紹" tabindex="-1"><a class="header-anchor" href="#配置介紹"><span>配置介紹</span></a></h2><p>請先看下面這張配置說明圖 <img src="https://doc.traefik.io/traefik/assets/img/static-dynamic-configuration.png" alt=""></p><p>Traefik 配置主要分為兩部分</p><ul><li>啟動配置(Static Configuration): 包含 Provider, Entrypoints 配置</li><li>動態路由配置(Dynamic Configuration): 包含所有請求處理相關配置，主要為 Routers, Services, Middlewares, Certificates 等部分</li></ul><h2 id="啟動配置-static-configuration" tabindex="-1"><a class="header-anchor" href="#啟動配置-static-configuration"><span>啟動配置 - Static Configuration</span></a></h2><p>包含三種<code>互斥</code>(只能同時使用一種)的配置方式</p><ol><li>單一配置檔案</li><li>指令列參數配置</li><li>環境變數配置</li></ol><h3 id="_1-單一配置檔案" tabindex="-1"><a class="header-anchor" href="#_1-單一配置檔案"><span>1. 單一配置檔案</span></a></h3><p>traefik 啟動時會去下列路徑上尋找檔案 <code>traefik.yml</code>(或是 <code>traefik.yaml</code>, <code>traefik.toml</code>)</p><ul><li><code>/etc/traefik/</code></li><li><code>$XDG_CONFIG_HOME/</code></li><li><code>$HOME/.config/</code></li><li><code>.</code>(Working directory)</li><li>透過 <code>--configFile</code> 覆蓋</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ traefik <span class="token parameter variable">--configFile</span><span class="token operator">=</span>foo/bar/myconfigfile.yml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>這邊以 Provider Docker 舉例配置如下，詳細<a href="https://doc.traefik.io/traefik/providers/docker/#provider-configuration" target="_blank" rel="noopener noreferrer">配置方法可見這邊</a></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">providers</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">docker</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment"># 預設</span></span>
<span class="line">  <span class="token comment"># or</span></span>
<span class="line">  <span class="token key atrule">docker</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> <span class="token string">&quot;unix:///var/run/docker.sock&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可對應配置一個範例動態路由如下</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">traefik</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> traefik<span class="token punctuation">:</span>v2.9 <span class="token comment"># The official v2 Traefik docker image</span></span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token comment"># The HTTP port</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;80:80&quot;</span></span>
<span class="line">      <span class="token comment"># The Web UI (enabled by --api.insecure=true)</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;8080:8080&quot;</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token comment"># So that Traefik can listen to the Docker events</span></span>
<span class="line">      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock</span>
<span class="line">  <span class="token key atrule">whoami</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># A container that exposes an API to show its IP address</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> traefik/whoami</span>
<span class="line">    <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;traefik.http.routers.whoami.rule=Host(\`whoami.docker.localhost\`)&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-指令列參數配置" tabindex="-1"><a class="header-anchor" href="#_2-指令列參數配置"><span>2. 指令列參數配置</span></a></h3><p>可參考這邊<a href="https://doc.traefik.io/traefik/reference/static-configuration/cli/" target="_blank" rel="noopener noreferrer">支援的參數列表</a>，這種方式在配置 <code>docker-compose</code> yaml file 時非常方便</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">traefik</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> traefik<span class="token punctuation">:</span>v2.9</span>
<span class="line">    <span class="token key atrule">command</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>accesslog</span>
<span class="line">      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>providers.docker</span>
<span class="line">    <span class="token comment"># ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-環境變數配置" tabindex="-1"><a class="header-anchor" href="#_3-環境變數配置"><span>3. 環境變數配置</span></a></h3><p>可參考這邊<a href="https://doc.traefik.io/traefik/reference/static-configuration/env/" target="_blank" rel="noopener noreferrer">支援的環境變數列表</a></p><h2 id="動態路由配置-routing-load-balancing-dynamic-configuration" tabindex="-1"><a class="header-anchor" href="#動態路由配置-routing-load-balancing-dynamic-configuration"><span>動態路由配置(Routing &amp; Load Balancing) - Dynamic Configuration</span></a></h2><p>大致上處理請求的過程如下圖 <img src="https://doc.traefik.io/traefik/assets/img/architecture-overview.png" alt=""></p><p>當 Traefik 被啟動時，從我們定義的 entrypoints 進入，接著路由解析並查找是否有該請求對應的路由配置規則，如果有查找到，則將套用對應路由配置中的一系列 middlewares 執行，並最終轉發請求到指定的 Service 服務</p><p>到此我們可以簡單釐清下個部分的職責，<a href="https://doc.traefik.io/traefik/routing/overview/#clear-responsibilities" target="_blank" rel="noopener noreferrer">參考連結</a>：</p><ul><li><a href="https://doc.traefik.io/traefik/providers/overview/" target="_blank" rel="noopener noreferrer">Provider</a>: 發現基礎設施上的服務(IP, health)</li><li><a href="https://doc.traefik.io/traefik/routing/entrypoints/" target="_blank" rel="noopener noreferrer">Entrypoints</a>: 監聽傳入流量（ports）</li><li><a href="https://doc.traefik.io/traefik/routing/routers/" target="_blank" rel="noopener noreferrer">Routers</a>: 分析請求（host, path, headers, SSL）</li><li><a href="https://doc.traefik.io/traefik/routing/services/" target="_blank" rel="noopener noreferrer">Services</a>: 將請求轉發給您的服務（load balancing）</li><li><a href="https://doc.traefik.io/traefik/middlewares/overview/" target="_blank" rel="noopener noreferrer">Middlewares</a>: 可能會更新請求或根據請求做出決定（authentication, rate limiting, headers）</li></ul><h3 id="file-provider-動態路由配置範例" tabindex="-1"><a class="header-anchor" href="#file-provider-動態路由配置範例"><span>File Provider 動態路由配置範例</span></a></h3><p>此範例中我們透過 File Provider 配置將 <code>http://example.com/whoami/</code> 轉發到 <code>http://private/whoami-service/</code></p><p>首先進行啟動配置</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">entryPoints</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">web</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 監聽從 8081 進來的請求</span></span>
<span class="line">    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token punctuation">:</span><span class="token number">8081</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">providers</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token comment"># 允許透過 file provider 來進行動態路由配置</span></span>
<span class="line">  <span class="token key atrule">file</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">directory</span><span class="token punctuation">:</span> /path/to/dynamic/conf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接著在 <code>/path/to/dynamic/conf</code> 中，建立一個名為 <code>http.yml</code> 的配置（名子可隨意）</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">http</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">routers</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">to-whoami</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">rule</span><span class="token punctuation">:</span> <span class="token string">&quot;Host(\`example.com\`) &amp;&amp; PathPrefix(\`/whoami/\`)&quot;</span></span>
<span class="line">      <span class="token comment"># 如果規則對應成功, 轉發到 whoami service(定義在下方)</span></span>
<span class="line">      <span class="token key atrule">service</span><span class="token punctuation">:</span> whoami</span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 定義服務在系統上的位置</span></span>
<span class="line">    <span class="token key atrule">whoami</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">servers</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//private/whoami<span class="token punctuation">-</span>service</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="entrypoints-支援的所有參數" tabindex="-1"><a class="header-anchor" href="#entrypoints-支援的所有參數"><span>Entrypoints 支援的所有參數</span></a></h3><p>內容可能會更新，<a href="https://doc.traefik.io/traefik/routing/entrypoints/#configuration" target="_blank" rel="noopener noreferrer">可參考這邊</a></p><blockquote><p>需注意，預設情況下，沒有提供任何 entrypoints 給 traefik 時，會套用名為 <code>http</code> 的 entrypoint 在 80 port，但如果有明確提供任何一個 entrypoint 給 traefik 後，此預設 <code>http</code> 的 entrypoint 將不會被套用，如果仍然需要使用預設的 <code>80</code> port entrypoint 則需要手動將其加入</p></blockquote><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token comment">## Static configuration</span></span>
<span class="line"><span class="token key atrule">entryPoints</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">http</span><span class="token punctuation">:</span> <span class="token comment"># default</span></span>
<span class="line">    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token string">&quot;:80&quot;</span></span>
<span class="line">  <span class="token key atrule">https</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token string">&quot;:443&quot;</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token string">&quot;:8888&quot;</span> <span class="token comment"># same as &quot;:8888/tcp&quot;</span></span>
<span class="line">    <span class="token key atrule">http2</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">maxConcurrentStreams</span><span class="token punctuation">:</span> <span class="token number">42</span></span>
<span class="line">    <span class="token key atrule">http3</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">advertisedPort</span><span class="token punctuation">:</span> <span class="token number">8888</span></span>
<span class="line">    <span class="token key atrule">transport</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">lifeCycle</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">requestAcceptGraceTimeout</span><span class="token punctuation">:</span> <span class="token number">42</span></span>
<span class="line">        <span class="token key atrule">graceTimeOut</span><span class="token punctuation">:</span> <span class="token number">42</span></span>
<span class="line">      <span class="token key atrule">respondingTimeouts</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">42</span></span>
<span class="line">        <span class="token key atrule">writeTimeout</span><span class="token punctuation">:</span> <span class="token number">42</span></span>
<span class="line">        <span class="token key atrule">idleTimeout</span><span class="token punctuation">:</span> <span class="token number">42</span></span>
<span class="line">    <span class="token key atrule">proxyProtocol</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">insecure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">      <span class="token key atrule">trustedIPs</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token string">&quot;192.168.0.1&quot;</span></span>
<span class="line">    <span class="token key atrule">forwardedHeaders</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">insecure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">      <span class="token key atrule">trustedIPs</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token string">&quot;192.168.0.1&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="https-tls" tabindex="-1"><a class="header-anchor" href="#https-tls"><span>HTTPS &amp; TLS</span></a></h2><p>包含兩部分設定 routers, TLS connection，當路由器必須處理 HTTPS 流量時，應使用路由器定義的 <code>tls</code> 字段指定，<a href="https://doc.traefik.io/traefik/routing/routers/#tls" target="_blank" rel="noopener noreferrer">詳情可見這邊</a></p><ul><li>限制進入請求只能為 <code>https</code></li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token comment">## Dynamic configuration</span></span>
<span class="line"><span class="token key atrule">http</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">routers</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">my-https-router</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">rule</span><span class="token punctuation">:</span> <span class="token string">&quot;Host(\`foo-domain\`) &amp;&amp; Path(\`/foo-path/\`)&quot;</span></span>
<span class="line">      <span class="token key atrule">service</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>id</span>
<span class="line">      <span class="token comment"># will terminate the TLS request</span></span>
<span class="line">      <span class="token key atrule">tls</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若需要同時支援 http, https 則需要寫兩個配置，其中一個加上 tls</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">http</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">routers</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">my-https-router</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">rule</span><span class="token punctuation">:</span> <span class="token string">&quot;Host(\`foo-domain\`) &amp;&amp; Path(\`/foo-path/\`)&quot;</span></span>
<span class="line">      <span class="token key atrule">service</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>id</span>
<span class="line">      <span class="token comment"># will terminate the TLS request</span></span>
<span class="line">      <span class="token key atrule">tls</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token key atrule">my-http-router</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">rule</span><span class="token punctuation">:</span> <span class="token string">&quot;Host(\`foo-domain\`) &amp;&amp; Path(\`/foo-path/\`)&quot;</span></span>
<span class="line">      <span class="token key atrule">service</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50)]))}const o=s(i,[["render",l],["__file","traefik.html.vue"]]),r=JSON.parse('{"path":"/articles/memo/traefik.html","title":"Traefik Memo","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"介紹","slug":"介紹","link":"#介紹","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[{"level":3,"title":"自動化服務偵測 Auto Service Discovery","slug":"自動化服務偵測-auto-service-discovery","link":"#自動化服務偵測-auto-service-discovery","children":[]}]},{"level":2,"title":"配置介紹","slug":"配置介紹","link":"#配置介紹","children":[]},{"level":2,"title":"啟動配置 - Static Configuration","slug":"啟動配置-static-configuration","link":"#啟動配置-static-configuration","children":[{"level":3,"title":"1. 單一配置檔案","slug":"_1-單一配置檔案","link":"#_1-單一配置檔案","children":[]},{"level":3,"title":"2. 指令列參數配置","slug":"_2-指令列參數配置","link":"#_2-指令列參數配置","children":[]},{"level":3,"title":"3. 環境變數配置","slug":"_3-環境變數配置","link":"#_3-環境變數配置","children":[]}]},{"level":2,"title":"動態路由配置(Routing & Load Balancing) - Dynamic Configuration","slug":"動態路由配置-routing-load-balancing-dynamic-configuration","link":"#動態路由配置-routing-load-balancing-dynamic-configuration","children":[{"level":3,"title":"File Provider 動態路由配置範例","slug":"file-provider-動態路由配置範例","link":"#file-provider-動態路由配置範例","children":[]},{"level":3,"title":"Entrypoints 支援的所有參數","slug":"entrypoints-支援的所有參數","link":"#entrypoints-支援的所有參數","children":[]}]},{"level":2,"title":"HTTPS & TLS","slug":"https-tls","link":"#https-tls","children":[]}],"git":{"updatedTime":1678359758000,"contributors":[{"name":"johnnywang1994","username":"johnnywang1994","email":"johnny29621189@kimo.com","commits":1,"url":"https://github.com/johnnywang1994"}]},"filePathRelative":"articles/memo/traefik.md"}');export{o as comp,r as data};
