import{_ as e,c as t,d as i,o as n}from"./app-C1rAeSlj.js";const s={};function r(o,a){return n(),t("div",null,a[0]||(a[0]=[i('<h1 id="git-版本控制" tabindex="-1"><a class="header-anchor" href="#git-版本控制"><span>Git 版本控制</span></a></h1><p>紀錄學習 git 的筆記跟一些使用想法。</p><h2 id="推薦學習資源" tabindex="-1"><a class="header-anchor" href="#推薦學習資源"><span>推薦學習資源</span></a></h2><ul><li><a href="https://docs.github.com/en/get-started/getting-started-with-git" target="_blank" rel="noopener noreferrer">GitHub-Getting started with Git</a></li><li><a href="https://docs.github.com/en/get-started/using-git" target="_blank" rel="noopener noreferrer">GitHub-Using Git</a></li><li><a href="https://github.com/doggy8088/Learn-Git-in-30-days" target="_blank" rel="noopener noreferrer">Learn-Git-in-30-days</a></li><li><a href="https://juejin.cn/post/7071780876501123085" target="_blank" rel="noopener noreferrer">Stash-CherryPick</a></li></ul><h2 id="基礎概念-unstaged-staged" tabindex="-1"><a class="header-anchor" href="#基礎概念-unstaged-staged"><span>基礎概念 - unstaged, staged</span></a></h2><h3 id="git-是什麼" tabindex="-1"><a class="header-anchor" href="#git-是什麼"><span>Git 是什麼</span></a></h3><p>一種非集中式版本控制的工具，Git 記錄檔案快照，而不是差異，大部份的操作皆可在本地端完成，且通常只增加資料。</p><h3 id="三種狀態" tabindex="-1"><a class="header-anchor" href="#三種狀態"><span>三種狀態</span></a></h3><p>Git 會把你的檔案標記為三種主要的狀態：已提交（committed）、已修改（modified）及已預存（staged）</p><ul><li><p>已提交：代表這檔案己安全地存在你的本地端資料庫。</p></li><li><p>己修改：代表這檔案已被修改但尚未提交到本地端資料庫。</p></li><li><p>已預存：代表這檔案將會被存到下次你提交的快照中。</p></li></ul><h3 id="git-工作流程" tabindex="-1"><a class="header-anchor" href="#git-工作流程"><span>Git 工作流程</span></a></h3><ol><li><p>你在你工作目錄修改檔案。(已修改)</p></li><li><p>預存檔案，將檔案的快照新增到預存區。(add 加入預存，已預存)</p></li><li><p>做提交的動作，這會讓存在預存區的檔案快照永久地儲存在 Git 目錄中。(commit 提交修改，已提交)</p></li></ol><h2 id="相關概念" tabindex="-1"><a class="header-anchor" href="#相關概念"><span>相關概念</span></a></h2><ol><li>Git分支模型中存在兩個主分支，Master, Develop</li></ol><ul><li><p>master：</p><p>Git 中默認的主分支。在 Git 分支開發模型中，master 分支的 HEAD 節點始終處於“準備好進行生產的狀態”，即 master 分支的 HEAD 節點所指向的版本始終是可以用於生產環境的正式版本。當其他分支的代碼版本合併到 master 分支時（隨後打上版本標籤），通常意味著一個新的正式版本已經發布。</p></li><li><p>develop：</p><p>HEAD 節點總是指向下一個待發布版本的最新變化。 develop 分支的版本變更通常來源於輔助分支的合併，因此 develop 分支也常被稱為“整合分支”。當 develop 分支達到某一穩定點，可進行新版本的發佈時，develop 分支上的所有變更應該被合併到 master 分支並打上tag標籤</p></li></ul><ol start="2"><li><p>多 commit，少 push，push 太頻繁容易造成 conflict，少 merge。</p></li><li><p>推薦使用 Git Flow</p></li><li><p>多使用分支，保持主分支的整潔，</p></li></ol>',16)]))}const l=e(s,[["render",r]]),d=JSON.parse('{"path":"/articles/git/what-is-git.html","title":"Git 版本控制","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1648521821000,"contributors":[{"name":"Johnny Wang","username":"","email":"wangj@garena.com","commits":1},{"name":"johnnywang1994","username":"johnnywang1994","email":"johnny29621189@kimo.com","commits":4,"url":"https://github.com/johnnywang1994"}],"changelog":[{"hash":"71ccb7693345c8ddc2f554e00f8a0ce73af2b783","time":1648521821000,"email":"johnny29621189@kimo.com","author":"johnnywang1994","message":"UPD: upgrade to v2"},{"hash":"4f6b4a1132d02dee2dd7a88840addd4028265b72","time":1647334152000,"email":"johnny29621189@kimo.com","author":"johnnywang1994","message":"UPD: add git stash"},{"hash":"0a0cca98f1fd6ae86765f73c526eba906ed1e4de","time":1637656663000,"email":"johnny29621189@kimo.com","author":"johnnywang1994","message":"UPD: update git diff"},{"hash":"7eaa7f4d79f2352adc2872a127513d48c41534fb","time":1634376566000,"email":"johnny29621189@kimo.com","author":"johnnywang1994","message":"UPD: update git"},{"hash":"51e618d93d4f837fbce25a1e1f0a9783cbc46b6a","time":1624012650000,"email":"wangj@garena.com","author":"Johnny Wang","message":"INIT"}]},"filePathRelative":"articles/git/what-is-git.md"}');export{l as comp,d as data};
