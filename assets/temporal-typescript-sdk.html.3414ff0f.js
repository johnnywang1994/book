import{_ as c,r as o,o as l,c as i,a,d as n,e as s,f as e}from"./app.68a6495c.js";const u={},r=n("h1",{id:"temporal-typescript-sdk-\u5B78\u7FD2\u7B46\u8A18",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#temporal-typescript-sdk-\u5B78\u7FD2\u7B46\u8A18","aria-hidden":"true"},"#"),s(" Temporal Typescript SDK \u5B78\u7FD2\u7B46\u8A18")],-1),k=e('<p>Hi \u5927\u5BB6\u597D\uFF0C\u9019\u7BC7\u662F\u7D00\u9304\u5B78\u7FD2\u57FA\u790E Temporal Typescript SDK \u7684\u4ECB\u7D39\u8207\u7B46\u8A18(Temporal \u652F\u63F4\u591A\u7A2E\u8A9E\u8A00\u4F7F\u7528)\uFF0C\u65E8\u5728\u5FEB\u901F\u5B78\u7FD2\u8207\u4E0A\u624B\u7406\u89E3\uFF0C\u96D6\u7136\u6574\u7406\u5B8C\u6587\u7AE0\u9084\u662F\u5F88\u9577 XDDDDD\uFF08\u5B78\u5230\u5D29\u6F70</p><p>\u8A73\u7D30\u4ECB\u7D39\u5EFA\u8B70\u67E5\u770B\u5B98\u65B9\u6587\u4EF6\u6703\u66F4\u6E05\u695A\u5594\uFF0C\u672C\u7BC7\u662F\u500B\u4EBA\u95B1\u8B80\u8207\u524D\u8F29\u6307\u9EDE\u6574\u7406\u800C\u6210\uFF0C\u611F\u8B1D\u524D\u8F29\u6307\u9EDE\u8FF7\u6D25\u5E36\u6211\u98DB\uFF5E</p><h2 id="temporal-\u662F\u4EC0\u9EBC" tabindex="-1"><a class="header-anchor" href="#temporal-\u662F\u4EC0\u9EBC" aria-hidden="true">#</a> Temporal \u662F\u4EC0\u9EBC\uFF1F</h2><p>Temporal \u662F\u4E00\u500B\u5206\u5E03\u5F0F\u3001\u6613\u64F4\u5C55\u3001\u6301\u4E45\u4E14\u9AD8\u5EA6\u53EF\u7528\u7684\u5DE5\u4F5C\u7DE8\u6392\u5F15\u64CE\uFF08<code>workflow engine</code>\uFF09\uFF0C\u7528\u7D71\u4E00\u7684 API \u66FF\u8A31\u591A\u65E5\u5E38\u7684\u5B9A\u6642\u5DE5\u4F5C\u3001\u6392\u671F\u5DE5\u4F5C\u9032\u884C\u7DE8\u6392\u81EA\u52D5\u5316\u7684\u9577\u6642\u9593\u904B\u884C\u696D\u52D9\u908F\u8F2F\uFF08\u6BD4\u5982\u8A02\u95B1\u6263\u6B3E\u3001\u722C\u87F2\u8CC7\u6599\u5237\u65B0\u7B49\u7B49\uFF09\u3002</p><p>\u5176\u4E2D\u4EE5\u4E94\u500B\u6982\u5FF5\u70BA\u6838\u5FC3\uFF1A <code>Task</code>, <code>Activity</code>, <code>Workflow</code>, <code>Worker</code>, <code>Client</code></p><h2 id="task" tabindex="-1"><a class="header-anchor" href="#task" aria-hidden="true">#</a> Task</h2><p>temporal \u4E2D\u7684 taskQuene \u4E2D\u5305\u542B\u5169\u500B quene\uFF0C<code>workflowTaskQuene</code>, <code>activityTaskQuene</code>\uFF0C\u5169\u8005\u5206\u5225\u5B58\u653E\u5C0D\u61C9\u7684 task\uFF0C\u6240\u4EE5 task \u4E5F\u5206\u70BA <code>workflowTask</code>, <code>activityTask</code>\uFF0C\u5169\u8005\u7684\u5340\u5225\u5F8C\u7E8C\u6703\u63D0\u5230\uFF0C\u9019\u908A\u53EF\u4EE5\u5148\u5927\u6982\u6709\u500B\u6982\u5FF5\uFF0C\u8A73\u7D30\u53EF\u53C3\u8003\u5B98\u65B9\u7684\u5716\u5982\u4E0B</p>',7),d={href:"https://docs.temporal.io/tasks/",target:"_blank",rel:"noopener noreferrer"},v=n("img",{src:"https://docs.temporal.io/assets/images/task-queue-3ae3eb770a166dbd709455a8a2dd6748.svg",alt:""},null,-1),m=e(`<h2 id="activity" tabindex="-1"><a class="header-anchor" href="#activity" aria-hidden="true">#</a> Activity</h2><p>\u4E00\u500B\u5305\u542B\u7A0B\u5F0F\u57F7\u884C\u74B0\u5883\u7684<code>\u6D3B\u52D5</code>\u529F\u80FD\uFF0C\u901A\u5E38\u70BA\u5BE6\u969B\u57F7\u884C\u7A0B\u5F0F\u908F\u8F2F\uFF0C\u8655\u7406\u7684\u52D5\u4F5C\u6BD4\u8D77 workflow \u8F03\u70BA\u55AE\u4E00\uFF0Cactivity \u5728\u5BE6\u969B\u88AB workflow \u4F7F\u7528\u6642\u6703\u900F\u904E <code>proxyActivities</code> \u5305\u88F9\uFF0C\u624D\u6703\u771F\u6B63\u88AB\u5B9A\u7FA9 taskQuene</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="workflow" tabindex="-1"><a class="header-anchor" href="#workflow" aria-hidden="true">#</a> Workflow</h2><p>\u4E00\u500B Workflow \u662F\u7531\u958B\u767C\u8005\u5B9A\u7FA9\u7684 Temporal \u5167\u90E8\u6700\u5C0F\u57F7\u884C\u55AE\u5143\uFF0C\u5305\u542B\u4E00\u6BB5\u7121\u526F\u4F5C\u7528\u7684\u57F7\u884C\u904E\u7A0B\uFF0C\u6BCF\u500B <code>workflow execution</code> \u90FD\u64C1\u6709\u4E00\u500B\u672C\u5730\u72C0\u614B\uFF0C\u4E26\u7368\u4F54\u8A2A\u554F\u6B0A\uFF0C\u5176\u4ED6 workflow \u7121\u6CD5\u76F4\u63A5\u8A2A\u554F\uFF0Cworkflow \u5F7C\u6B64\u9593\u4EE5 <code>\u4E26\u884C</code> \u7684\u65B9\u5F0F\u57F7\u884C\uFF0C\u4E92\u4E0D\u5F71\u97FF\uFF0C\u82E5 workflow \u5F7C\u6B64\u9700\u8981\u6E9D\u901A\u53EF\u4EE5\u900F\u904E <code>\u50B3\u905E signal</code> \u7684\u65B9\u5F0F\u9032\u884C</p><p>workflow \u662F\u4E00\u500B\u53EF\u91CD\u5165\u7684\u904E\u7A0B\uFF0C\u5305\u542B\u53EF\u6062\u5FA9\u3001\u53CD\u61C9\u5F0F\uFF0C\u4E0D\u8AD6\u8A2D\u5B9A\u591A\u4E45\uFF0C\u6216\u662F\u7CFB\u7D71\u6545\u969C\uFF0C\u5C07\u6703\u81EA\u52D5\u91CD\u555F\u4E26\u91CD\u8A66</p><ul><li><code>\u53EF\u6062\u5FA9</code>\uFF1A\u6307 process \u5728\u56E0\u57F7\u884C\u5931\u6557\uFF0C\u6216\u8005\u56E0\u57F7\u884C\u7B49\u5F85\u800C\u66AB\u505C\u5F8C\uFF0C\u53EF\u4EE5\u7E7C\u7E8C\u57F7\u884C\u7684\u80FD\u529B</li><li><code>\u53CD\u61C9\u5F0F</code>\uFF1A\u6307 process \u53EF\u4EE5\u5C0D\u5916\u90E8\u4E8B\u4EF6\u4F5C\u51FA\u53CD\u61C9\u7684\u80FD\u529B</li></ul><h3 id="\u5728-workflow-\u4E2D\u53D6\u5F97-workflowinfo" tabindex="-1"><a class="header-anchor" href="#\u5728-workflow-\u4E2D\u53D6\u5F97-workflowinfo" aria-hidden="true">#</a> \u5728 workflow \u4E2D\u53D6\u5F97 workflowInfo</h3><p>\u547C\u53EB <code>workflowInfo</code> \u53EF\u4EE5\u53D6\u5F97\u7576\u524D workflow \u7684\u8CC7\u8A0A\uFF0C\u6BD4\u5982 workflowId</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> workflowInfo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/workflow&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> workflowId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">workflowInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5728-workflow-\u4E2D\u547C\u53EB-activity" tabindex="-1"><a class="header-anchor" href="#\u5728-workflow-\u4E2D\u547C\u53EB-activity" aria-hidden="true">#</a> \u5728 workflow \u4E2D\u547C\u53EB activity</h3><p>\u5728 workflow \u4E2D\u7684\u74B0\u5883\u4E0D\u662F\u7A0B\u5F0F\u74B0\u5883(\u6B64\u70BAnodejs)\uFF0C\u800C\u662F\u4E00\u500B\u7279\u6B8A\u57F7\u884C\u74B0\u5883\uFF0C\u6545 activity \u65B9\u6CD5\u9700\u900F\u904E <code>proxyActivities</code> \u89E3\u69CB\u4E4B\u5F8C\u624D\u80FD\u4F7F\u7528\uFF0C\u540D\u7A31\u8207\u539F\u4F86\u7684\u65B9\u6CD5\u76F8\u540C</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// workflows.ts</span>
<span class="token comment">// \u6B64\u70BA temporal workflow \u57F7\u884C\u74B0\u5883</span>
<span class="token comment">// \u57F7\u884C\u6D41\u7A0B\u770B\u4F3C\u4E00\u822C\u7A0B\u5F0F\uFF0C\u4F46\u5176\u5BE6\u80CC\u5F8C temporal \u6703\u5C07\u4E0D\u540C task \u5206\u767C\u51FA\u53BB\u7D66 workers \u57F7\u884C</span>
<span class="token comment">// \u9019\u88CF\u50C5\u7B97\u662F\u4E00\u500B workflow \u5DE5\u4F5C\u6D41\u7A0B\u7684\u5B9A\u7FA9\u5340</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> proxyActivities <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/workflow&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token operator">*</span> <span class="token keyword">as</span> activities <span class="token keyword">from</span> <span class="token string">&#39;./activities&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> greet <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">proxyActivities</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> activities<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  startToCloseTimeout<span class="token operator">:</span> <span class="token string">&#39;30s&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// \u9019\u908A\u53EF\u4EE5\u5B9A\u7FA9\u88AB proxy \u7684 activity \u5BE6\u969B\u6703\u89F8\u767C\u4EC0\u9EBC taskQuene</span>
  <span class="token comment">// \u8B93\u5C0D\u61C9\u76E3\u807D\u7684 worker \u53BB\u8655\u7406\u9019\u500B activiyTask</span>
  <span class="token comment">// \u9810\u8A2D\u60C5\u6CC1\u4E0B\u6703\u89F8\u767C \`default\` worker</span>
  <span class="token comment">// taskQuene: &#39;default&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/** A workflow that simply calls an activity */</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5728-workflow-\u4E2D\u547C\u53EB-child-workflow" tabindex="-1"><a class="header-anchor" href="#\u5728-workflow-\u4E2D\u547C\u53EB-child-workflow" aria-hidden="true">#</a> \u5728 workflow \u4E2D\u547C\u53EB child workflow</h3><p>\u5982\u679C\u9700\u8981\u5728\u7576\u524D workflow \u4E2D\u8ABF\u7528\u53E6\u4E00\u500B\u5B50 workflow\uFF0C\u53EF\u4EE5\u4F7F\u7528\u5169\u500B\u65B9\u6CD5</p><ul><li><code>executeChild</code>: \u53EF\u56DE\u50B3 promise await \u7B49\u5B50 workflowTask \u57F7\u884C\u5B8C\uFF08\u63A8\u85A6\uFF09</li><li><code>startChild</code>: \u4E1F\u4E00\u500B child workflowTask \u57F7\u884C\u51FA\u53BB\u5F8C\u5C31\u4E0D\u7BA1\u4ED6</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// workflows.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> executeChild<span class="token punctuation">,</span> proxyActivities <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/workflow&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token operator">*</span> <span class="token keyword">as</span> activities <span class="token keyword">from</span> <span class="token string">&#39;./activities&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> greet <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">proxyActivities</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> activities<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  startToCloseTimeout<span class="token operator">:</span> <span class="token string">&#39;30s&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">childExample</span><span class="token punctuation">(</span><span class="token punctuation">{</span> msg <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Johnny is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">executeChild</span><span class="token punctuation">(</span>childExample<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> msg<span class="token operator">:</span> <span class="token string">&#39;very well&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    workflowId<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">child-example-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token comment">// taskQueue: &#39;default&#39;, // \u9019\u88E1\u4E5F\u53EF\u4EE5\u6307\u5B9A taskQuene</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="worker" tabindex="-1"><a class="header-anchor" href="#worker" aria-hidden="true">#</a> Worker</h2><p>worker \u662F temporal \u88E1\u9762\u5BE6\u969B\u57F7\u884C task \u7684 <code>\u5DE5\u4F5C\u8005</code>\uFF0C\u6BCF\u500B worker \u6703\u6307\u5B9A\u76E3\u807D\u7684 taskQuene \u76EE\u6A19\uFF0C\u6BCF\u7576\u76E3\u807D\u7684 quene \u65B0\u589E task \u6642\u5C31\u6703\u4E3B\u52D5\u53BB <code>poll</code> task \u4F86\u57F7\u884C</p><h3 id="\u5EFA\u7ACB-worker" tabindex="-1"><a class="header-anchor" href="#\u5EFA\u7ACB-worker" aria-hidden="true">#</a> \u5EFA\u7ACB Worker</h3><p>\u5EFA\u7ACB\u6642\u7D81\u5B9A\u6BCF\u500B worker \u5C0D\u61C9\u53EF\u4EE5\u4F7F\u7528\u7684 <code>activities</code>, <code>workflowsPath</code>\uFF0C\u4F46 worker \u4E0D\u4E00\u5B9A\u8981\u7D81\u5B9A workflow\uFF0C\u53EF\u4EE5\u53EA\u7D81\u5B9A activities\uFF0C\u4E26\u5728\u5176\u4ED6 workflow \u4E2D\u547C\u53EB\u6642\u900F\u904E <code>taskQuene</code> \u6307\u5B9A\u8B93\u67D0\u500B\u7279\u5B9A\u8655\u7406 activities \u7684 worker \u8655\u7406</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Worker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/worker&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> activities <span class="token keyword">from</span> <span class="token string">&#39;./activities&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> workers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">await</span> Worker<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">workflowsPath</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;./workflows&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    activities<span class="token punctuation">,</span>
    <span class="token literal-property property">taskQueue</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  workers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span>

  <span class="token keyword">const</span> activitiesWorker <span class="token operator">=</span> <span class="token keyword">await</span> Worker<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    activities<span class="token punctuation">,</span>
    <span class="token literal-property property">taskQuene</span><span class="token operator">:</span> <span class="token string">&#39;hello-world&#39;</span> <span class="token comment">// proxyActivities \u6642\u6307\u5B9A\u70BA hello-world\uFF0C\u9019\u500B worker \u5C31\u6703\u53BB\u8655\u7406\uFF5E</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  workers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span>

  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>workers<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  workers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> w<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="client" tabindex="-1"><a class="header-anchor" href="#client" aria-hidden="true">#</a> Client</h2><p>client \u662F\u63D0\u4F9B\u7528\u6236\u7AEF\u958B\u767C\u6642\u9032\u884C\u8ABF\u7528 workflow task \u7684\u4E3B\u8981\u9014\u5F91\uFF0C\u4E5F\u53EF\u4EE5\u900F\u904E command line \u9032\u884C\u8ABF\u7528</p><blockquote><p>\u524D\u63D0\u662F\u4F60\u7684 temporal server \u5DF2\u7D93\u555F\u52D5\u5C31\u7DD2</p></blockquote><h3 id="programming" tabindex="-1"><a class="header-anchor" href="#programming" aria-hidden="true">#</a> Programming</h3><p>\u5EFA\u7ACB\u65B0\u7684 temporal workflow client \u5BE6\u4F8B</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// client.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Workflow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/workflow&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Connection<span class="token punctuation">,</span> WorkflowClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/client&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token literal-property property">client</span><span class="token operator">:</span> WorkflowClient<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> Connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// Connect to localhost with default ConnectionOptions.</span>
      <span class="token comment">// In production, pass options to the Connection constructor to configure TLS and other settings:</span>
      <span class="token comment">// address: &#39;foo.bar.tmprl.cloud&#39;, // as provisioned</span>
      <span class="token comment">// tls: {} // as provisioned</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkflowClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      connection<span class="token punctuation">,</span>
      <span class="token literal-property property">namespace</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> <span class="token comment">// change if you have a different namespace</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> client<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u900F\u904E <code>client</code> \u7269\u4EF6\u8ABF\u7528\u57F7\u884C workflow</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> getClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./client&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> example <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./workflows&#39;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>example<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Temporal&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// \u53C3\u6578\u50B3\u905E\u7D66 example workflow</span>
    <span class="token literal-property property">taskQueue</span><span class="token operator">:</span> <span class="token string">&#39;hello-world&#39;</span><span class="token punctuation">,</span> <span class="token comment">// \u52A0\u5165\u7684 taskQuene \u540D\u7A31\uFF0C\u5C0D\u61C9 worker \u5FC5\u9808\u80FD\u8655\u7406\u6B64 workflow</span>
    <span class="token literal-property property">workflowId</span><span class="token operator">:</span> <span class="token string">&#39;example-workflow-id&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// workflow id reuse policy \u53C3\u8003\u7D50\u5C3E\u5217\u8868</span>
    <span class="token literal-property property">workflowIdReusePolicy</span><span class="token operator">:</span> WorkflowIdReusePolicy<span class="token punctuation">.</span><span class="token constant">WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE</span><span class="token punctuation">,</span>
    <span class="token comment">// retry policy</span>
    <span class="token literal-property property">retry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">maximumAttempts</span><span class="token operator">:</span> <span class="token number">20</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> handle<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="command-line" tabindex="-1"><a class="header-anchor" href="#command-line" aria-hidden="true">#</a> Command line</h3>`,31),w={href:"https://docs.temporal.io/tctl/how-to-use-tctl/",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),f=e(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># \u74B0\u5883\u8B8A\u6578\u8A2D\u70BA\u9810\u8A2D\uFF08local\uFF09</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">TEMPORAL_CLI_ADDRESS</span><span class="token operator">=</span>
<span class="token comment"># \u57F7\u884C workflow</span>
tctl wf start <span class="token parameter variable">--tq</span> default <span class="token parameter variable">-i</span> <span class="token string">&#39;[workflow-args]&#39;</span> <span class="token parameter variable">-w</span> <span class="token punctuation">[</span>workflow-id<span class="token punctuation">]</span> <span class="token parameter variable">--wt</span> <span class="token punctuation">[</span>workflow-type<span class="token punctuation">]</span>
<span class="token comment"># \u53D6\u6D88 workflow</span>
tctl wf cancel <span class="token parameter variable">-w</span> <span class="token punctuation">[</span>workflow-id<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="signals-querys" tabindex="-1"><a class="header-anchor" href="#signals-querys" aria-hidden="true">#</a> Signals &amp; Querys</h2><p>\u9019\u5169\u8005\u90FD\u662F\u7528\u5728\u8207 <code>workflow</code> \u9032\u884C\u6E9D\u901A\u50B3\u905E\u8A0A\u606F\u7528\uFF0C\u4F46\u6709\u4E9B\u5FAE\u5340\u5225</p>`,3),y={href:"https://docs.temporal.io/workflows/#signals",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),g={href:"https://docs.temporal.io/workflows/#queries",target:"_blank",rel:"noopener noreferrer"},x=n("br",null,null,-1),_=e(`<h3 id="signals-\u7BC4\u4F8B" tabindex="-1"><a class="header-anchor" href="#signals-\u7BC4\u4F8B" aria-hidden="true">#</a> Signals \u7BC4\u4F8B</h3><p>\u4EE5\u4E0B\u7BC4\u4F8B\u70BA\u4E00\u500B\u8A02\u95B1\u6A5F\u5236 workflow</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// workflows.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineSignal<span class="token punctuation">,</span> setHandler<span class="token punctuation">,</span> sleep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/worker&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> cancelSubscription <span class="token operator">=</span> <span class="token function">defineSignal</span><span class="token punctuation">(</span><span class="token string">&#39;cancelSignal&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">SubscriptionWorkflow</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">email</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">trialPeriod</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> isCanceled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// internal variable to track cancel state</span>

  <span class="token function">setHandler</span><span class="token punctuation">(</span>cancelSubscription<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">(</span>isCanceled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new</span>

  <span class="token keyword">await</span> acts<span class="token punctuation">.</span><span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span>trialPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sleep will wait a fixed time</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isCanceled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> acts<span class="token punctuation">.</span><span class="token function">sendCancellationEmailDuringTrialPeriod</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> acts<span class="token punctuation">.</span><span class="token function">sendSubscriptionOverEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="invoke-by-client" tabindex="-1"><a class="header-anchor" href="#invoke-by-client" aria-hidden="true">#</a> - Invoke by Client</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// other-client.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> cancelSubscription <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./workflows&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> client <span class="token keyword">from</span> <span class="token string">&#39;./client&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">signalWorkflow</span><span class="token punctuation">(</span><span class="token parameter">workflowId<span class="token punctuation">,</span> signalName<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> handle <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span>workflowId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> handle<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span>signalName<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">signalWorkflow</span><span class="token punctuation">(</span><span class="token string">&#39;my-workflow-id&#39;</span><span class="token punctuation">,</span> cancelSubscription<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="using-condition-with-timeouts" tabindex="-1"><a class="header-anchor" href="#using-condition-with-timeouts" aria-hidden="true">#</a> - Using <code>condition</code> with timeouts</h4><p><code>sleep(ms)</code> \u5C07\u57F7\u884C\u5EF6\u9072\u56FA\u5B9A\u6642\u9593\uFF0C<code>condition</code> \u5C07\u57F7\u884C\u7121\u9650\u671F\u5EF6\u9072\uFF0C\u76F4\u5230\u7D66\u5B9A\u7684\u689D\u4EF6\u51FD\u6578\u5224\u65B7\u8FD4\u56DE <code>true</code>\uFF0C\u5047\u8A2D\u6709\u500B\u6AA2\u67E5\u51FD\u6578\uFF0C\u6211\u5011\u8981\u5224\u65B7\u6AA2\u67E5\u662F\u5426\u5B8C\u5168\u57F7\u884C\u5B8C\u7562\u53EF\u4EE5\u5BEB\u6210\u9019\u6A23</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// workflows.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> childCompletedSignal <span class="token operator">=</span> <span class="token function">defineSignal</span><span class="token punctuation">(</span>childCompletedSignal<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">checkDataWorkflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> completedChildWorkflows <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> totalChildWorkflows <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">setHandler</span><span class="token punctuation">(</span>childCompletedSignal<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    completedChildWorkflows <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> workflowId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">workflowInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> dataList <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getChildData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// activity to call rest api to get childData</span>

  <span class="token keyword">const</span> childHandles <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">startChild</span><span class="token punctuation">(</span>checkPartialData<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token literal-property property">parentWorkflowId</span><span class="token operator">:</span> workflowId<span class="token punctuation">,</span>
        data
      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">workflowId</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">check-child-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  totalChildWorkflows <span class="token operator">=</span> childHandles<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

  <span class="token comment">// \u9019\u908A\u5176\u5BE6\u53EF\u4EE5\u7528 executeChild \u642D\u914D Promise.all \u66F4\u76F4\u89BA\uFF0C\u4F46\u9019\u53EA\u662F\u4E00\u500B\u793A\u7BC4</span>
  <span class="token comment">// wait until all child complete</span>
  <span class="token keyword">await</span> <span class="token function">condition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> completedChildWorkflows <span class="token operator">===</span> totalChildWorkflows<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">checkPartialData</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
  parentWorkflowId<span class="token punctuation">,</span>
  data
<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// check data...</span>
  <span class="token comment">// send signal to parent by parentWorkflowId</span>
  <span class="token keyword">await</span> <span class="token function">signalWorkflow</span><span class="token punctuation">(</span>parentWorkflowId<span class="token punctuation">,</span> childCompletedSignal<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),I=n("code",null,"inlineSignal",-1),W={href:"https://docs.temporal.io/typescript/how-to-use-signals-in-typescript/#declare-your-signals-dynamically",target:"_blank",rel:"noopener noreferrer"},T=e(`<h3 id="querys-\u7BC4\u4F8B" tabindex="-1"><a class="header-anchor" href="#querys-\u7BC4\u4F8B" aria-hidden="true">#</a> Querys \u7BC4\u4F8B</h3><p>\u900F\u904E query \u53D6\u5F97\u66F4\u65B0\u8CC7\u6599 workflow \u7684\u66F4\u65B0\u72C0\u614B</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> userInfoStatusQuery <span class="token operator">=</span> <span class="token function">defineQuery</span><span class="token punctuation">(</span><span class="token string">&#39;userInfoStatusQuery&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">updateUserInfoWorkflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> completedAt <span class="token operator">=</span> <span class="token keyword">null</span>

  <span class="token comment">// return workflow status when being queried</span>
  <span class="token function">setHandle</span><span class="token punctuation">(</span>userInfoStatusQuery<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>completedAt<span class="token punctuation">,</span>
    completedAt<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">await</span> <span class="token function">updateUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// activity to update user info</span>

  completedAt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// \u5373\u4F7F workflow completed \u5F8C\uFF0Cquery \u6B64 workflowId \u4ECD\u7136\u80FD\u53D6\u5F97\u4ED6\u7684\u72C0\u614B</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="query-by-client" tabindex="-1"><a class="header-anchor" href="#query-by-client" aria-hidden="true">#</a> Query by Client</h3><p>\u8DDF Signals \u7684\u8655\u7406\u5E7E\u4E4E\u76F8\u540C\uFF0C\u5DEE\u5225\u5728\u53EF\u4EE5\u8FD4\u56DE\u72C0\u614B</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// other-client.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> userInfoStatusQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./workflows&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> client <span class="token keyword">from</span> <span class="token string">&#39;./client&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">queryWorkflow</span><span class="token punctuation">(</span><span class="token parameter">workflowId<span class="token punctuation">,</span> signalName<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> handle <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span>workflowId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> handle<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>signalName<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">queryWorkflow</span><span class="token punctuation">(</span><span class="token string">&#39;my-workflow-id&#39;</span><span class="token punctuation">,</span> userInfoStatusQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>completedAt<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="custom-usestate-function" tabindex="-1"><a class="header-anchor" href="#custom-usestate-function" aria-hidden="true">#</a> custom useState function</h3>`,7),S={href:"https://docs.temporal.io/typescript/workflows#signals-and-queries-design-patterns",target:"_blank",rel:"noopener noreferrer"},C=e(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> wf <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/workflow&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> initialValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> signal <span class="token operator">=</span> wf<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">defineSignal</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> query <span class="token operator">=</span> wf<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">defineQuery</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> state<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=</span> initialValue<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    signal<span class="token punctuation">,</span>
    query<span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// need to use closure because function doesn&#39;t rerun unlike React Hooks</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span>newVal<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// usage in Workflow file</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;your-store&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">YourWorkflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  wf<span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>signal<span class="token punctuation">,</span> <span class="token punctuation">(</span>newValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(&#39;updating&#39;, newValue) // optional but useful for debugging</span>
    store<span class="token punctuation">.</span>value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  wf<span class="token punctuation">.</span><span class="token function">setHandler</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>query<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sleeping for &#39;</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    wf<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>value<span class="token operator">++</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// you can mutate the value as well</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// usage in Client file</span>
<span class="token keyword">await</span> handle<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>signal<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> storeState <span class="token operator">=</span> handle<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">query</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="continue-as-new" tabindex="-1"><a class="header-anchor" href="#continue-as-new" aria-hidden="true">#</a> Continue as New</h2>`,2),j={href:"https://docs.temporal.io/workflows/#continue-as-new",target:"_blank",rel:"noopener noreferrer"},P={href:"https://docs.temporal.io/java/workflows/#large-event-histories",target:"_blank",rel:"noopener noreferrer"},q=n("br",null,null,-1),A=n("code",null,"partialWorkflow",-1),Q=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// workflows.ts</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchAllData</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
  startPage<span class="token punctuation">,</span>
  pageSize
<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> hasNextPage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> page <span class="token operator">=</span> startPage<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>hasNextPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    hasNextPage <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">executeChild</span><span class="token punctuation">(</span>fetchPartialData<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">workflowId</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">fetch-partial-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>page<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    page <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchPartialData</span><span class="token punctuation">(</span>
  <span class="token parameter">page <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  pageSize <span class="token operator">=</span> <span class="token number">1000</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// getUsers could be your activity to call rest api to get users</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> userIds<span class="token punctuation">,</span> pageInfo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUsers</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>
    userIds<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> <span class="token function">executeChild</span><span class="token punctuation">(</span>fetchData<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">workflowId</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">fetch-user-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>

  <span class="token keyword">return</span> pageInfo<span class="token punctuation">.</span>hasNextPage
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something with userId</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="install-example" tabindex="-1"><a class="header-anchor" href="#install-example" aria-hidden="true">#</a> Install Example</h2><p>Temporal \u5B98\u65B9\u63D0\u4F9B\u4E86\u5FEB\u901F\u642D\u5EFA\u6574\u5957\u74B0\u5883\u7684 example\uFF0C\u53EA\u9700\u8981\u4F7F\u7528 <code>npx</code> \u5FEB\u901F\u5C31\u53EF\u4EE5\u5FEB\u901F\u4E0B\u8F09\u8A66\u7528</p><h3 id="\u4E0B\u8F09-example" tabindex="-1"><a class="header-anchor" href="#\u4E0B\u8F09-example" aria-hidden="true">#</a> \u4E0B\u8F09 example</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ npx @temporalio/create@latest ./myfolder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="\u4E0B\u8F09-docker-compose-\u74B0\u5883\u914D\u7F6E" tabindex="-1"><a class="header-anchor" href="#\u4E0B\u8F09-docker-compose-\u74B0\u5883\u914D\u7F6E" aria-hidden="true">#</a> \u4E0B\u8F09 docker-compose \u74B0\u5883\u914D\u7F6E</h3><p>\u7372\u53D6\u6700\u65B0\u7684 temporal docker-compose \u914D\u7F6E\u6A94\u6848\uFF0C\u5305\u542B\u4E0D\u540C\u74B0\u5883\u7684\u8A2D\u5B9A\uFF0C\u4E0B\u8F09\u5F8C\u555F\u52D5\u5373\u53EF</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> clone https://github.com/temporalio/docker-compose.git temporal-server
$ <span class="token builtin class-name">cd</span> temporal-server
$ <span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="temporal-web-ui" tabindex="-1"><a class="header-anchor" href="#temporal-web-ui" aria-hidden="true">#</a> Temporal Web UI</h3><p>Temporal \u73FE\u5728\u63D0\u4F9B\u5169\u500B version \u7684 Web UI\uFF0C\u5C31\u4F9D\u7167\u559C\u597D\u9078\u64C7\u4F60\u8981\u770B\u54EA\u500B\u645F\uFF5E\uFF0C\u9810\u8A2D\u914D\u7F6E\u88E1\u5169\u500B\u6703\u540C\u6642\u555F\u52D5\uFF08\u672A\u4F86\u4E0D\u77E5\u9053\u6703\u4E0D\u6703\u628A v1 \u79FB\u9664\uFF09</p>`,10),D={href:"http://localhost:8088/",target:"_blank",rel:"noopener noreferrer"},H={href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"},E=e(`<h2 id="\u5176\u4ED6\u7BC4\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u5176\u4ED6\u7BC4\u4F8B" aria-hidden="true">#</a> \u5176\u4ED6\u7BC4\u4F8B</h2><h3 id="\u88FD\u4F5C-timeout-\u6548\u679C" tabindex="-1"><a class="header-anchor" href="#\u88FD\u4F5C-timeout-\u6548\u679C" aria-hidden="true">#</a> \u88FD\u4F5C timeout \u6548\u679C</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">wrapTimeout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">targetHandle<span class="token punctuation">,</span> maxWaitSeconds <span class="token operator">=</span> <span class="token number">30</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    targetHandle<span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> maxWaitSeconds <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">runWorkflow</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wfHandle <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>myWorkflow<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">workflowId</span><span class="token operator">:</span> <span class="token string">&#39;my-workflow-id&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// workflow \u8DD1\u8D85\u904E 30s \u5C31\u76F4\u63A5\u5F80\u5F8C\u4E0D\u7B49\uFF0C\u907F\u514D\u5361\u4F4F</span>
  <span class="token keyword">await</span> <span class="token function">wrapTimeout</span><span class="token punctuation">(</span>wfHandle<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token keyword">await</span> wfHandle<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>checkStatusQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> status<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7372\u53D6-workflow-\u72C0\u614B" tabindex="-1"><a class="header-anchor" href="#\u7372\u53D6-workflow-\u72C0\u614B" aria-hidden="true">#</a> \u7372\u53D6 workflow \u72C0\u614B</h3><p>Temporal \u5728 workflow handle \u7269\u4EF6\u4E2D\u6709\u63D0\u4F9B\u4EE5\u4E0B\u65B9\u6CD5\u53EF\u4EE5\u7372\u5F97\u7576\u524D\u6307\u5B9A workflow \u7684\u76F8\u95DC\u8CC7\u8A0A\u72C0\u614B</p>`,5),N={href:"https://docs.temporal.io/typescript/clients/#workflow-handle-apis",target:"_blank",rel:"noopener noreferrer"},R={href:"https://typescript.temporal.io/api/enums/proto.temporal.api.enums.v1.workflowexecutionstatus/",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"@temporalio/proto",-1),L=e(`<p>\u4E0B\u9762\u7BC4\u4F8B\u662F\u5982\u4F55\u5728\u7576\u524D workflow \u4E2D\u53D6\u6D88\u81EA\u5DF1\u7684\u7BC4\u4F8B\uFF0C\u4F8B\u5982\u7D50\u675F cronSchedule \u7684\u60C5\u6CC1\uFF0C\u56E0\u70BA workflow \u74B0\u5883\u7121\u6CD5\u4F7F\u7528 client \u5DE5\u5177\uFF0C\u5FC5\u9808\u62C9\u51FA\u4F86\u5230 activity \u4E2D\u4F7F\u7528</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// my-activities.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> temporal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/proto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./client&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> WorkflowExecutionStatus <span class="token punctuation">}</span> <span class="token operator">=</span> temporal<span class="token punctuation">.</span>api<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>v1<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">terminateWorkflow</span><span class="token punctuation">(</span>workflowId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> wfHandle <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span>workflowId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u53D6\u5F97 workflow handle \u7684\u7576\u524D\u72C0\u614B</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> status <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> wfHandle<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u5224\u65B7 code \u72C0\u614B\u662F\u5426\u8655\u5728 running</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">.</span>code <span class="token operator">===</span> WorkflowExecutionStatus<span class="token punctuation">.</span><span class="token constant">WORKFLOW_EXECUTION_STATUS_RUNNING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u7D42\u6B62 cronSchedule\uFF0C\u82E5\u4F7F\u7528 cancel \u53EA\u6703\u505C\u6B62\u7576\u524D\u7684 workflow</span>
    <span class="token comment">// https://docs.temporal.io/concepts/what-is-a-temporal-cron-job/#how-to-stop-a-temporal-cron-job</span>
    <span class="token keyword">await</span> wfHandle<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// workflow.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> proxyActivities<span class="token punctuation">,</span> workflowInfo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@temporalio/workflow&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myActivities <span class="token keyword">from</span> <span class="token string">&#39;./myActivities&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> terminateWorkflow <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">proxyActivities</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> myActivities<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  startToCloseTimeout<span class="token operator">:</span> <span class="token string">&#39;30s&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">TestWorkflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> workflowId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">workflowInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">await</span> <span class="token function">terminateWorkflow</span><span class="token punctuation">(</span>workflowId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4ECA\u5929\u5C31\u4ECB\u7D39\u5230\u9019\u62C9\uFF0C\u5F8C\u7E8C\u5982\u679C\u6709\u5176\u4ED6\u65B0\u7684\u60F3\u6CD5\u4E5F\u6703\u6301\u7E8C\u66F4\u65B0\u7D00\u9304\u5728\u9019\uFF0C\u611F\u8B1D\u6536\u770B\uFF0C\u4E0B\u6B21\u518D\u898B =V=</p>`,4),V=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" Reference")],-1),$={href:"https://www.youtube.com/watch?v=66zQ8nrW-mA",target:"_blank",rel:"noopener noreferrer"},O={href:"https://docs.temporal.io/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://typescript.temporal.io/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.temporal.io/concepts/what-is-a-signal/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://typescript.temporal.io/api/enums/client.WorkflowIdReusePolicy",target:"_blank",rel:"noopener noreferrer"},F={href:"https://typescript.temporal.io/api/interfaces/client.workflowoptions/#retry",target:"_blank",rel:"noopener noreferrer"};function J(X,Y){const p=o("SocialBlock"),t=o("ExternalLinkIcon");return l(),i("div",null,[r,a(p,{hashtags:"javascript,typescript,temporal,message quene,nodejs"}),k,n("ul",null,[n("li",null,[n("a",d,[s("Temporal Task"),a(t)]),v])]),m,n("ul",null,[n("li",null,[n("a",w,[s("How to use tctl?"),a(t)]),b,s(" \u53EF\u4EE5\u900F\u904E command line \u9032\u884C\u8ABF\u7528 temporal workflow")])]),f,n("ul",null,[n("li",null,[n("a",y,[s("Signals"),a(t)]),h,s(" setHandle \u50C5\u53EF\u4EE5\u5728 workflow \u57F7\u884C\u7279\u5B9A\u52D5\u4F5C\uFF0C\u7121\u6CD5\u8FD4\u56DE\u72C0\u614B")]),n("li",null,[n("a",g,[s("Querys"),a(t)]),x,s(" setHandle \u53EF\u4EE5\u8FD4\u56DE workflow \u5167\u90E8\u72C0\u614B")])]),_,n("blockquote",null,[n("p",null,[s("\u751A\u81F3\u9084\u6709 "),I,s("\uFF0C\u8A73\u60C5\u53EF\u898B"),n("a",W,[s("Signals\u5B98\u7DB2\u8AAA\u660E"),a(t)])])]),T,n("ul",null,[n("li",null,[n("a",S,[s("Link"),a(t)])])]),C,n("ul",null,[n("li",null,[n("a",j,[s("continue-as-new"),a(t)])]),n("li",null,[n("a",P,[s("large-event-histories"),a(t)]),q,s(" \u6253\u958B Temporal Web UI \u53EF\u4EE5\u770B\u5230\u6BCF\u500B worker \u57F7\u884C task \u6642\uFF0C\u5DE6\u5074\u7684\u7DE8\u865F\u5C31\u662F event \u7DE8\u865F\uFF0C\u9810\u8A2D\u6700\u5927\u55AE\u4E00 worker \u80FD\u5920\u57F7\u884C\u7684 events \u6578\u91CF\u70BA 50000\uFF0C\u8D85\u904E\u5C31\u5FC5\u9808 renew\uFF0C\u5EFA\u8B70\u53EF\u4EE5\u5982\u4E0B\u9762\u65B9\u5F0F\u4EE5\u5206\u9801\u7684\u5F62\u5F0F 1000 \u7B46\u57F7\u884C\u4E00\u500B "),A,s("\uFF0C\u4E26\u900F\u904E while loop \u5224\u5B9A\u662F\u5426\u9084\u6709\u5269\u9918\u9700\u57F7\u884C\u7684\u5167\u5BB9\uFF0C\u907F\u514D\u6548\u80FD\u5D29\u6F70")])]),Q,n("ul",null,[n("li",null,[n("a",D,[s("Temporal Web UI v1"),a(t)]),s(": port 8088")]),n("li",null,[n("a",H,[s("Temporal Web UI v2"),a(t)]),s(": port 8080")])]),E,n("ul",null,[n("li",null,[n("a",N,[s("Workflow Handle API methods"),a(t)])]),n("li",null,[n("a",R,[s("WorkflowExecutionStatus"),a(t)]),s(" \u4F7F\u7528\u9019\u500B\u8B8A\u6578\u6703\u9700\u8981\u5148\u4E0B\u8F09 "),U,s(" \u9019\u500B\u64F4\u5145\u5305\u5594")])]),L,a(p,{hashtags:"javascript,typescript,temporal,message quene,nodejs"}),V,n("ul",null,[n("li",null,[n("a",$,[s("Intro to Temporal with TypeScript SDK + Q&A"),a(t)])]),n("li",null,[n("a",O,[s("Temporal Docs"),a(t)])]),n("li",null,[n("a",z,[s("Temporal Typescript Reference"),a(t)])]),n("li",null,[n("a",B,[s("What is a Signal"),a(t)])]),n("li",null,[n("a",K,[s("WorkflowIdReusePolicy"),a(t)])]),n("li",null,[n("a",F,[s("RetryPolicy"),a(t)])])])])}const M=c(u,[["render",J],["__file","temporal-typescript-sdk.html.vue"]]);export{M as default};
