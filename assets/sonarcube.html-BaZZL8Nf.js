import{_ as n,c as a,d as e,o as l}from"./app-DjGzEHQz.js";const t={};function p(r,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="串接-sonarcube-筆記" tabindex="-1"><a class="header-anchor" href="#串接-sonarcube-筆記"><span>串接 Sonarcube 筆記</span></a></h1><p>SonarQube 是一款基於 Java 開發的原始碼檢測與品質管理系統，因著 Java 的關係，Server 與 Client 都是跨平台的</p><h2 id="install" tabindex="-1"><a class="header-anchor" href="#install"><span>Install</span></a></h2><ul><li><a href="https://docs.sonarqube.org/latest/setup/get-started-2-minutes/#Installing%20a%20local%20instance%20of%20SonarQube" target="_blank" rel="noopener noreferrer">Link</a></li></ul><h3 id="docker-image" tabindex="-1"><a class="header-anchor" href="#docker-image"><span>docker image</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> sonarqube <span class="token parameter variable">-e</span> <span class="token assign-left variable">SONAR_ES_BOOTSTRAP_CHECKS_DISABLE</span><span class="token operator">=</span>true <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 sonarqube:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>前往 <a href="http://localhost:9000" target="_blank" rel="noopener noreferrer">http://localhost:9000</a> 開啟 Web 介面</p><h2 id="建立-sonarcube-專案" tabindex="-1"><a class="header-anchor" href="#建立-sonarcube-專案"><span>建立 sonarcube 專案</span></a></h2><p>在 sonar 上建立 manual project</p><ol><li>Create new project - manual</li><li>設定 Project key, Display name</li><li>產生一組 token 並妥善保存</li><li>執行分析專案，此步驟需下載 scanner</li></ol><h2 id="下載-scanner" tabindex="-1"><a class="header-anchor" href="#下載-scanner"><span>下載 scanner</span></a></h2><p>根據環境可以<a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/" target="_blank" rel="noopener noreferrer">在此</a>下載不同的 scanner</p><h2 id="ci-串接" tabindex="-1"><a class="header-anchor" href="#ci-串接"><span>CI 串接</span></a></h2><ul><li><a href="https://docs.sonarqube.org/latest/analysis/jenkins/" target="_blank" rel="noopener noreferrer">Link</a></li></ul><p>以 Github 舉例</p><ul><li><a href="https://docs.sonarqube.org/latest/analysis/github-integration/" target="_blank" rel="noopener noreferrer">Github integration</a></li></ul><ol><li>創建 Github App 並安裝到目標專案的 Organization</li><li>設定 sonarcube 專案</li></ol><h3 id="webhooks" tabindex="-1"><a class="header-anchor" href="#webhooks"><span>Webhooks</span></a></h3><p>加入 PR Webhook</p><h3 id="pr-decoration" tabindex="-1"><a class="header-anchor" href="#pr-decoration"><span>PR Decoration</span></a></h3><p>sonar.com &gt; Your project &gt; Project Settings &gt; General Settings &gt; Pull Request Decoration</p><h3 id="quality-profiles" tabindex="-1"><a class="header-anchor" href="#quality-profiles"><span>Quality Profiles</span></a></h3><p>根據專案需求，在設定頁面裡的 <code>Quality Profiles</code> 加入對掃描的套用規範</p><ul><li>CSS: sonar way</li></ul><h2 id="設定-package-json-產生-coverage-report" tabindex="-1"><a class="header-anchor" href="#設定-package-json-產生-coverage-report"><span>設定 package.json 產生 coverage report</span></a></h2><ul><li><a href="https://docs.sonarqube.org/latest/analysis/test-coverage/javascript-typescript-test-coverage/" target="_blank" rel="noopener noreferrer">javascript-typescript-test-coverage</a></li></ul><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;test:ci&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jest --ci --collectCoverage&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="設定-sonar-project-properties" tabindex="-1"><a class="header-anchor" href="#設定-sonar-project-properties"><span>設定 sonar-project.properties</span></a></h2><p>建立專案後，需要產生一組 <code>sonar_login_token</code> 使用，並根據<a href="https://docs.sonarqube.org/8.9/analysis/analysis-parameters/" target="_blank" rel="noopener noreferrer">這個教學</a>進行 sonar 的 project 配置</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token assign-left variable">sonar.host.url</span><span class="token operator">=</span>	http://localhost:9000</span>
<span class="line"><span class="token assign-left variable">sonar.login</span><span class="token operator">=</span>your_login_token</span>
<span class="line"><span class="token assign-left variable">sonar.projectBaseDir</span><span class="token operator">=</span>./</span>
<span class="line"><span class="token comment"># sonar 上的專案名稱</span></span>
<span class="line"><span class="token assign-left variable">sonar.projectKey</span><span class="token operator">=</span>your_project_name</span>
<span class="line"></span>
<span class="line"><span class="token comment"># test coverage report 位置</span></span>
<span class="line"><span class="token assign-left variable">sonar.javascript.lcov.reportPaths</span><span class="token operator">=</span>coverage/lcov.info</span>
<span class="line"></span>
<span class="line"><span class="token comment"># scanner 規則設定</span></span>
<span class="line"><span class="token assign-left variable">sonar.sources</span><span class="token operator">=</span>src</span>
<span class="line"><span class="token assign-left variable">sonar.eslint.eslintconfigpath</span><span class="token operator">=</span>.eslintrc.js</span>
<span class="line"><span class="token assign-left variable">sonar.typescript.tsconfigPath</span><span class="token operator">=</span>tsconfig.json</span>
<span class="line"><span class="token assign-left variable">sonar.coverage.exclusions</span><span class="token operator">=</span>**/node_modules/**, **.spec.ts, **.test.ts, **.spec.js, **.test.js, **/*.html, **/next.config.js</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Encoding of the source code. Default is default system encoding</span></span>
<span class="line"><span class="token assign-left variable">sonar.sourceEncoding</span><span class="token operator">=</span>UTF-8</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 專案位置</span></span>
<span class="line"><span class="token assign-left variable">sonar.analysis.repoLink</span><span class="token operator">=</span>path_to_your_repository</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="設定-drone-yml" tabindex="-1"><a class="header-anchor" href="#設定-drone-yml"><span>設定 drone.yml</span></a></h2><p>以下範例，配置 jest 產生 report，並接著執行 sonar scanner</p><blockquote><p>需要注意，因為 sonar scanner 會根據傳入的參數判斷是 push 或是 pull_request，如果傳入參數裡有 pull request 相關設定，即使是 null 值，一樣會被判定成 pull_request，這樣會導致實際 merge 進 main branch 時沒有被正確解析，而是被當成 pull_request 處理了，發生這問題時錯誤提示只會顯示</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">“master” branch has not been analyzed yet and you have multiple branches already</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但實際上原因可能是參數會相關設定錯誤導致，可<a href="https://community.sonarsource.com/t/main-branch-does-not-reflect-latest-analyses/63352" target="_blank" rel="noopener noreferrer">參考這篇討論串</a></p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> pipeline</span>
<span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> default</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">trigger</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">branch</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;precommit/*&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token key atrule">event</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;push&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pull_request&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> prepare</span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;node:16.13.1&quot;</span></span>
<span class="line">    <span class="token key atrule">commands</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;npm run lint&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;npm run test:ci&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> sonar<span class="token punctuation">-</span>scan</span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> sonarsource/sonar<span class="token punctuation">-</span>scanner<span class="token punctuation">-</span>cli</span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">SONAR_TOKEN</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">from_secret</span><span class="token punctuation">:</span> sonar_login_token</span>
<span class="line">    <span class="token key atrule">commands</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;if (echo $DRONE_TARGET_BRANCH$DRONE_PULL_REQUEST | grep -w $DRONE_TARGET_BRANCH); then sonar-scanner; else sonar-scanner -Dsonar.pullrequest.key=$DRONE_PULL_REQUEST -Dsonar.pullrequest.branch=$DRONE_SOURCE_BRANCH -Dsonar.pullrequest.base=$DRONE_TARGET_BRANCH; fi;&quot;</span></span>
<span class="line">    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> prepare</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36)]))}const o=n(t,[["render",p]]),c=JSON.parse('{"path":"/articles/memo/sonarcube.html","title":"串接 Sonarcube 筆記","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1662693866000,"contributors":[{"name":"JohnnyWang","username":"JohnnyWang","email":"johnnywang@test.com","commits":2,"url":"https://github.com/JohnnyWang"}],"changelog":[{"hash":"5b65a916a3283374e8f0786f8795805cbbe86676","time":1662693866000,"email":"johnnywang@test.com","author":"JohnnyWang","message":"UPD: update sonarcube memo"},{"hash":"49fbad494097dfb3bb1d82541bf3111d146531dd","time":1660957550000,"email":"johnnywang@test.com","author":"JohnnyWang","message":"UPD: add sonarcube"}]},"filePathRelative":"articles/memo/sonarcube.md"}');export{o as comp,c as data};
