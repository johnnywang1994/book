import{_ as i,r as d,o,c,d as n,e as a,a as s,f as l}from"./app-9c5c90e3.js";const r={},t=n("h1",{id:"podman-學習筆記",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#podman-學習筆記","aria-hidden":"true"},"#"),a(" Podman 學習筆記")],-1),m={href:"https://podman.io/docs/installation",target:"_blank",rel:"noopener noreferrer"},p={href:"https://azole.medium.com/podman-on-mac-101-1b7b323a1006",target:"_blank",rel:"noopener noreferrer"},u={href:"https://docs.podman.io/en/latest/Commands.html",target:"_blank",rel:"noopener noreferrer"},h=l(`<p>Hi 大家好，我是 Johnny，這篇是一個快速學習 podman 的個人筆記～，喜歡的話歡迎收藏分享摟</p><h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹" aria-hidden="true">#</a> 介紹</h2><ul><li>Podman 是 <code>daemonless</code> 的 container 引擎，可以以 root 或是非 root 的模式來執行，預設使用的是 rootless</li><li>Podman 能<code>直接與 Image registry, containers 及 images 溝通</code>，並允許以非 root 的使用者權限來運行 containers，因為提供了跟 docker 相容的指令，讓習慣使用 docker 的開發這也能無痛改用 Podman</li></ul><p><img src="https://darumatic.com/media/blog_pics/2020_01/Docker_vs_Podman.png" alt=""></p><h2 id="install" tabindex="-1"><a class="header-anchor" href="#install" aria-hidden="true">#</a> Install</h2><h3 id="mac-安裝" tabindex="-1"><a class="header-anchor" href="#mac-安裝" aria-hidden="true">#</a> Mac 安裝</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ brew <span class="token function">install</span> <span class="token function">podman</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="初始化-vm" tabindex="-1"><a class="header-anchor" href="#初始化-vm" aria-hidden="true">#</a> 初始化 VM</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">podman</span> machine init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>執行這行指令時，Podman 會去檢查我們的 host 裡是否有最新的 FCOS，沒有的話，就會去下載。FCOS 的全名是 Fedora CoreOS，他被設計成基於 container 的最小化現在作業系統，Podman 會用這個作業系統來建立 VM。</li><li>當 FCOS 被下載完成後，還會再寫兩個檔案: <ol><li>machine description: 用來描述即將建立的 VM 的屬性，是 JSON 格式，而且是被寫入 host 的 filesystem 中。</li><li>ignition file: 用來客製 FCOS 作業系統的，也會被寫入 host filesystem 中。</li></ol></li></ul><h3 id="開啟-rootful-模式" tabindex="-1"><a class="header-anchor" href="#開啟-rootful-模式" aria-hidden="true">#</a> 開啟 rootful 模式</h3><p>預設會是 rootless，如果需要給予 VM root 權限，可以在 machine 停止的狀態下設定如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">podman</span> machine <span class="token builtin class-name">set</span> <span class="token parameter variable">--rootful</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="啟動-vm" tabindex="-1"><a class="header-anchor" href="#啟動-vm" aria-hidden="true">#</a> 啟動 VM</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">podman</span> machine start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>指令被運行時，machine 的設定檔會被讀取，然後 Podman 會確保這個 machine 不是在運行中。然後會基於這些設定檔，<code>qemu</code> 會被組裝，然後 VM 就運行</li><li>當 VM 第一次開機時，<code>ignition file</code> 會被注入到這個 VM 中，數個設定也會在這個時候被修改，當 VM 開完機後，會有一個叫做 gvproxy 的程式會在 host 被啟動，gvproxy 會負責管理 host 與 VM 之間的 port mapping。最後 Podman 會為 root 及 non-root 使用者設置 socket-activated services</li></ul><blockquote><p>QEMU 是一個開源的代管虛擬機器，Podman 會使用 QEMU 來建立 VM，根據版本不同，可能會需要手動安裝 QEMU</p></blockquote><h3 id="查看安裝資訊" tabindex="-1"><a class="header-anchor" href="#查看安裝資訊" aria-hidden="true">#</a> 查看安裝資訊</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">podman</span> info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="管理-machine" tabindex="-1"><a class="header-anchor" href="#管理-machine" aria-hidden="true">#</a> 管理 Machine</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">podman</span> machine <span class="token parameter variable">--help</span>
Manage a virtual machine

Description:
  Manage a virtual machine. Virtual machines are used to run Podman.

Usage:
  <span class="token function">podman</span> machine <span class="token punctuation">[</span>command<span class="token punctuation">]</span>

Available Commands:
  init        Initialize a virtual machine
  inspect     Inspect an existing machine
  list        List machines
  <span class="token function">rm</span>          Remove an existing machine
  <span class="token builtin class-name">set</span>         Sets a virtual machine setting
  <span class="token function">ssh</span>         SSH into an existing machine
  start       Start an existing machine
  stop        Stop an existing machine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>基本就跟 docker 一樣！</p><blockquote><p>小知識：一般來說，正常 VM 在啟動後是無法直接獲取外部的檔案的，也因此如果需要讓 VM 能拿到本地檔案，必須在啟動 VM 時明確掛載一個本地檔案位置進去 VM 當中，但是！！好加在從 <code>podman v4.1.1</code> 版本開始, podman 預設會在 init 指令時自動綁定 <code>-v $HOME:$HOME</code>，所以我們也就能像平常使用 docker 一樣透過 <code>-v</code> 去 mount volume 了</p></blockquote><p>如果需要自己調整 VM 的 volume 綁定位置，範例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果已經有正在跑的 machine 需要先關閉刪除舊的 VM，預設 machine 名稱為 podman-machine-default</span>
$ <span class="token function">podman</span> machine stop
$ <span class="token function">podman</span> machine <span class="token function">rm</span>
<span class="token comment"># 初始化同時帶上 -v</span>
$ <span class="token function">podman</span> machine init <span class="token parameter variable">-v</span> <span class="token environment constant">$HOME</span><span class="token builtin class-name">:</span><span class="token environment constant">$HOME</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="podman-compose" tabindex="-1"><a class="header-anchor" href="#podman-compose" aria-hidden="true">#</a> podman-compose</h3><p>如果需要使用 <code>docker-compose</code> 的話，需要另外下載一個 <code>podman-compose</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ brew <span class="token function">install</span> <span class="token function">podman-compose</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安裝完成後操作基本跟 docker-compose 一樣</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">podman-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="podman-mac-helper-直接用-docker-模式控制-podman" tabindex="-1"><a class="header-anchor" href="#podman-mac-helper-直接用-docker-模式控制-podman" aria-hidden="true">#</a> Podman Mac Helper - 直接用 docker 模式控制 podman</h3><p>在執行 <code>podman machine start</code> 的同時，會跳出一段提示如下，<code>podman-mac-helper</code> 是 podman 在 Mac 環境下兼容 Docker API socket address 的一個輔助套件，如果想在本地使用 podman 就像用 docker 管理容器一樣，建議可以一起安裝起來</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>API forwarding listening on: /Users/wangj/.local/share/containers/podman/machine/podman-machine-default/podman.sock

The system helper service is not installed; the default Docker API socket
address can&#39;t be used by podman. If you would like to install it run the
following commands:

        sudo podman-mac-helper install
        podman machine stop; podman machine start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>執行 podman 提供的指令如下，我的 podman 版本是 <code>4.8.3</code>，根據你自己的版本修改喔</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> podman-mac-helper <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改完後，接著 stop machine，然後再次 start，就不會看到這個提示摟，而在安裝這套件後，我們就可以像下面這樣直接透過 docker 指令來操作拉～～images 的顯示方式都按照 docker 的方式呈現了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> images
REPOSITORY            TAG           IMAGE ID       CREATED         SIZE
nginx                 latest        c42efe0b5438   <span class="token number">2</span> weeks ago     140MB
<span class="token function">node</span>                  <span class="token number">18.4</span>.0-slim   82f78068089f   <span class="token number">11</span> months ago   248MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="issues" tabindex="-1"><a class="header-anchor" href="#issues" aria-hidden="true">#</a> Issues</h2><h3 id="無法-connect-to-podman-問題" tabindex="-1"><a class="header-anchor" href="#無法-connect-to-podman-問題" aria-hidden="true">#</a> 無法 connect to Podman 問題</h3><p>這個問題可以試試把當前 podman machine 刪除並重新建立一個新的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Cannot connect to Podman. Please verify your connection to the Linux system using
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">podman</span> machine stop
$ <span class="token function">podman</span> machine <span class="token function">rm</span> <span class="token parameter variable">-f</span>
$ <span class="token function">podman</span> machine init <span class="token parameter variable">--now</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="podman-desktop" tabindex="-1"><a class="header-anchor" href="#podman-desktop" aria-hidden="true">#</a> Podman Desktop</h2><p>安裝前記得先把本地裝的 podman 刪除乾淨</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">podman</span> machine <span class="token function">rm</span>
$ brew uninstall <span class="token function">podman</span> qemu
$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.config/containers
$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.local/share/containers
$ brew <span class="token function">install</span> podman-desktop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="podman-compose-1" tabindex="-1"><a class="header-anchor" href="#podman-compose-1" aria-hidden="true">#</a> podman-compose</h3>`,47),v={href:"https://github.com/containers/podman-compose#installation",target:"_blank",rel:"noopener noreferrer"};function b(g,k){const e=d("ExternalLinkIcon");return o(),c("div",null,[t,n("ul",null,[n("li",null,[n("a",m,[a("官方文件指引"),s(e)])]),n("li",null,[n("a",p,[a("參考文章"),s(e)])]),n("li",null,[n("a",u,[a("指令目錄"),s(e)])])]),h,n("p",null,[a("如果本地沒有裝 docker，可以使用 podman 提供的 alternative "),n("a",v,[a("podman-compose"),s(e)])])])}const x=i(r,[["render",b],["__file","podman.html.vue"]]);export{x as default};
