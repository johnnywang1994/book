import{_ as e,c as a,d as n,o as i}from"./app-D2B6J4VR.js";const l={};function t(c,s){return i(),a("div",null,s[0]||(s[0]=[n(`<h1 id="git-rebase-定義分支的參考基準" tabindex="-1"><a class="header-anchor" href="#git-rebase-定義分支的參考基準"><span>Git Rebase 定義分支的參考基準</span></a></h1><p>git rebase 是除了 git merge 之外，另外一種合併分支的手段，但其顧名思義，並不是單純像 git merge 把兩個分支的頭接起來而已，而是針對當前所在分支進行「根部的重新定義」，也就是「移花接木」，rebase 會將當前的分支與目標分支進行比較，找到兩分支過去 commits 中第一個共同的 commit（兩個分支歷史中的重合節點），接著把當前分支整串接到目標分支上</p><h2 id="基礎指令" tabindex="-1"><a class="header-anchor" href="#基礎指令"><span>基礎指令</span></a></h2><p>假設我們現在的分支叫做 develop，且歷史 commits 為 a-b-c，c 是最新的 commit，而 main 分支上為 a-e-f，則當執行下面指令後，當前 develop 分支的 commits 順序就會變成 a-e-f-b-c，也就是從 a 節點切出來後新增的節點全部被接到 main 最新的 f 節點後面去了</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> rebase main</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="如果有衝突-conflict-發生" tabindex="-1"><a class="header-anchor" href="#如果有衝突-conflict-發生"><span>如果有衝突 conflict 發生</span></a></h3><p>跟 git merge 一樣，git rebase 時也會發生衝突，rebase 衝突發生時，git 會進入 rebase conflict 處理模式，在該模式下需要我們手動去處理衝突，當我們處理完之後，需要執行下列的步驟，讓 git 確認完成 rebase 操作</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>
<span class="line">$ <span class="token function">git</span> rebase <span class="token parameter variable">--continue</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果我們在處理衝突的過程發現一些疑問，也可以退出並取消這次 rebase 的操作，恢復到 rebase 之前原本當前分支的狀態</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> rebase <span class="token parameter variable">--abort</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="rebase-時以某個分支為主" tabindex="-1"><a class="header-anchor" href="#rebase-時以某個分支為主"><span>rebase 時以某個分支為主</span></a></h3><p>若 rebase 時我們非常確定以某個分支的內容為主時，可以加入如下參數來自動解決衝突，假設當前一樣在 develop 分支上</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 衝突時，develop 內容覆蓋 main 內容</span></span>
<span class="line">$ <span class="token function">git</span> rebase <span class="token parameter variable">-Xtheirs</span> main</span>
<span class="line"><span class="token comment"># 衝突時，main 內容覆蓋 develop 內容</span></span>
<span class="line">$ <span class="token function">git</span> rebase <span class="token parameter variable">-Xours</span> main</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意！這邊的 theirs, ours 的邏輯與 git merge 時相反，使用時需要特別注意！！</p></blockquote><h3 id="合併-commits" tabindex="-1"><a class="header-anchor" href="#合併-commits"><span>合併 commits</span></a></h3><ul><li><a href="https://stackoverflow.com/a/2568581" target="_blank" rel="noopener noreferrer">參考討論內容</a> rebase 除了最基本的合併分支能力外，還可以用來整理當前分支中的 commits，假設今天我們的歷史為 a-b-c，此時我們想把 b, c 兩個 commits 合併，就可以在分支上執行下面的指令</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> rebase <span class="token parameter variable">--interactive</span> HEAD~2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>輸入後會跳出一個 commits 整理畫面，類似下面，這邊要注意，與 git log 的順序相反，最新的 commit 在下面</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pick c0bcbdc b</span>
<span class="line">pick cc1d603 c</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Rebase ded59c1..cc1d603 onto ded59c1 (2 commands)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Commands:</span></span>
<span class="line"><span class="token comment"># ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此時如果我們把 b 的 pick 標記改成 squash，執行後會跳出錯誤 <code>Cannot &#39;squash&#39; without a previous commit</code>，反而此時我們要把 c 改成 squash，保留 b，執行後會再跳出下面的 commit 內容確認</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># This is a combination of 2 commits.</span></span>
<span class="line"><span class="token comment"># The first commit&#39;s message is:</span></span>
<span class="line"></span>
<span class="line">b</span>
<span class="line"></span>
<span class="line"><span class="token comment"># This is the 2nd commit message:</span></span>
<span class="line"></span>
<span class="line">c</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改成我們要的 commit 訊息後，儲存跳出，就可以看到我們的 b, c commit 被合併成了一個</p>`,22)]))}const p=e(l,[["render",t],["__file","rebase.html.vue"]]),d=JSON.parse('{"path":"/articles/git/rebase.html","title":"Git Rebase 定義分支的參考基準","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"基礎指令","slug":"基礎指令","link":"#基礎指令","children":[{"level":3,"title":"如果有衝突 conflict 發生","slug":"如果有衝突-conflict-發生","link":"#如果有衝突-conflict-發生","children":[]},{"level":3,"title":"rebase 時以某個分支為主","slug":"rebase-時以某個分支為主","link":"#rebase-時以某個分支為主","children":[]},{"level":3,"title":"合併 commits","slug":"合併-commits","link":"#合併-commits","children":[]}]}],"git":{"updatedTime":1709902936000,"contributors":[{"name":"johnnywang","email":"johnnywang@test.com","commits":1}]},"filePathRelative":"articles/git/rebase.md"}');export{p as comp,d as data};
