import{_ as p,c as t,b as s,a as e,d as c,o,r as l}from"./app-DSyX4Wk3.js";const i={};function u(r,n){const a=l("SocialBlock");return o(),t("div",null,[n[0]||(n[0]=s("h1",{id:"你真的懂-event-loop-嗎",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#你真的懂-event-loop-嗎"},[s("span",null,"你真的懂 Event Loop 嗎")])],-1)),e(a,{hashtags:"javascript,eventloop"}),n[1]||(n[1]=c(`<h5 id="updated-at-2021-03-26" tabindex="-1"><a class="header-anchor" href="#updated-at-2021-03-26"><span>updated at: 2021-03-26</span></a></h5><h6 id="tag-js-event-loop-vanilla-js" tabindex="-1"><a class="header-anchor" href="#tag-js-event-loop-vanilla-js"><span>tag <code>js</code>, <code>event loop</code>, <code>vanilla js</code></span></a></h6><p>&quot;請說說什麼是 Event Loop?&quot; 這句經典的面試題不知道嚇倒了多少人，包括曾經的我自己...，這篇就是本人用來喚醒記憶用的日常 MDN 閱讀筆記，歡迎對這主題&quot;好像懂又好像不懂&quot;的夥伴們一起來深入了解一下吧</p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>在開始之前需要先簡單釐清一下概念，我們都知道 Javascript 語言本身是單線程環境，也就是一次只同時處理一件事（call stack），但在瀏覽器中，V8 引擎中 &quot;concurrency model&quot; 並行模型及 &quot;Event Loop&quot; 的概念卻鮮少被提及，因為他是實作在瀏覽器環境的強大功能，而不是被原生的 Javascript ECMAScript 明定規範。</p><p>下面馬上來介紹下這幾個幫助 Javascript 更加強大的特性～</p><h2 id="執行環境-runtime-concept" tabindex="-1"><a class="header-anchor" href="#執行環境-runtime-concept"><span>執行環境 Runtime Concept</span></a></h2><p>在正式講到 Javascript 的 Event Loop 前，我們有必要先了解所謂的<code>執行環境</code>，下面圖片參考自 MDN，可以看到共可分為主要三個概念：<code>Stack</code>, <code>Heap</code>, <code>Queue</code>：</p><p><img src="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/EventLoop/the_javascript_runtime_environment_example.svg" alt="Image from MDN"></p><h3 id="stack-堆疊-call-stack" tabindex="-1"><a class="header-anchor" href="#stack-堆疊-call-stack"><span>Stack 堆疊（call stack）</span></a></h3><p>每次呼叫一個函式後，會產生一個包含該函式執行環境參數的 frame，每次呼叫一個新函式就會往 Stack 內疊加，而每當一個函式執行結束後，就會將該函式對應的 frame 從 Stack 中移除，這是作為單線程的 Javascript 的基本特性。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo go&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar go&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面範例中，<code>bar</code> 呼叫後會往 Stack 裡堆疊一個含有 <code>bar</code> 執行環境參數的 frame，而 <code>bar</code> 中又呼叫了 <code>foo</code>，所以會再往 Stack 裡堆疊一個含有 <code>foo</code> 環境的 frame，之後當 <code>foo</code> 執行完畢就會從 Stack 中移除該 <code>foo</code> 執行的 frame，最後 <code>bar</code> 執行完畢移除 <code>bar</code> 的 frame。</p><p>總結來說，Stack 的功能主要就是紀錄當前環境正在做什麼的一個追蹤序列。</p><h3 id="heap-堆積" tabindex="-1"><a class="header-anchor" href="#heap-堆積"><span>Heap 堆積</span></a></h3><p>可以把 Heap 想像成一個記憶體，裡面分配儲藏著各種物件，是一個無結構的大區域。</p><h3 id="queue-佇列" tabindex="-1"><a class="header-anchor" href="#queue-佇列"><span>Queue 佇列</span></a></h3><p>Javascript 執行環境的 Queue 主要基於 <code>FIFO（First in First Out）</code>原則執行，裡面裝載著所有待處理的<code>Task</code>，每當 Stack 中有空間釋出時，就會從 Queue 中提取一個<code>Task</code>進行處理，並將該 Task 中相關聯的所有 function 執行完畢後才會提取下一個。</p><h2 id="event-loop-事件循環" tabindex="-1"><a class="header-anchor" href="#event-loop-事件循環"><span>Event Loop 事件循環</span></a></h2><p>呈上面的 Queue 概念，因為在實作此一概念的功能時常常以下方的範例方式進行，故被取名為 <code>Event Loop</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">waitForMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  queue<span class="token punctuation">.</span><span class="token function">processNextMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 Queue 中沒有任何 Task 時，<code>waitForMessage</code> 會同步地等待新 task 到來。</p><p>以下介紹有關 Event Loop 的幾個特性：</p><h3 id="run-to-completion-執行到完成" tabindex="-1"><a class="header-anchor" href="#run-to-completion-執行到完成"><span>Run to completion 執行到完成</span></a></h3><p>每個<code>Task</code>會在當前 task 處理完成後才處理下一個</p><ul><li>優點：分析程式時提供可靠性，可確保程式依序有效的執行不被取代。</li><li>缺點：若一個 task 要很久的時間來執行完畢，網頁程式會無法即時處理使用者的基本操作，例如 click 或 scroll。瀏覽器為了避免此問題會跳出<code>警告提示執行過久</code>，實作上建議盡可能縮短<code>task</code>的執行時間，或是將一個<code>task</code>切割成數個執行。</li></ul><h3 id="adding-message-添加訊息" tabindex="-1"><a class="header-anchor" href="#adding-message-添加訊息"><span>Adding message 添加訊息</span></a></h3><h4 id="basic" tabindex="-1"><a class="header-anchor" href="#basic"><span>Basic</span></a></h4><p>那麼究竟瀏覽器會怎麼添加 Task 呢？在一般狀況下，一個 task 必須同時由兩個部分構成 - <code>事件觸發</code>, <code>事件監聽者</code>，前者比如常見的點擊事件，而後者比如 <code>addEventListener</code>，如果沒有事件監聽者，則該事件就不會形成訊息。或是如常見的 <code>script</code> tag 也會添加一個新的 task 進入 queue</p><h4 id="settimeout-與誤差" tabindex="-1"><a class="header-anchor" href="#settimeout-與誤差"><span>setTimeout 與誤差</span></a></h4><p>另一個常見的添加訊息方式是 web API 中的 <code>setTimeout</code> 等等，當 Javascript 執行時遇到這些 web API 時，就會將第一個參數中指定的動作轉為<code>訊息</code>加入瀏覽器 Queue 中，而第二個參數為延遲時間，若當下無其他訊息已在 Queue 裡，則該訊息將在延遲時間過後被立即取出調用。若 Queue 中已有其他訊息，則該訊息必須等到在他之前所添加的其他訊息執行完畢，也因此第二個參數只能表示最短時間，而不是一個精準的時間。</p><p>下面範例展示失準的 setTimeout 延遲：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">99999999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;wait 1:&#39;</span><span class="token punctuation">,</span> local <span class="token operator">-</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;wait 2:&#39;</span><span class="token punctuation">,</span> local <span class="token operator">-</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// start</span></span>
<span class="line"><span class="token comment">// end</span></span>
<span class="line"><span class="token comment">// wait 1: 1000</span></span>
<span class="line"><span class="token comment">// wait 1: 1057</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到我們使用兩個相同延遲 1000ms 的 setTimeout，可以明顯看到第二個晚了 57ms，該時間就是等待前一個執行完畢的等待時間，雖然看起來差不多，但如果是在 setInterval 的狀況下，誤差就會逐漸擴大。</p><h3 id="zero-delays-零延遲" tabindex="-1"><a class="header-anchor" href="#zero-delays-零延遲"><span>Zero delays（零延遲）</span></a></h3><p>「零延遲」並非意味著函式（callback function）會在 0ms 之後立刻被執行。實際延遲狀況會參考佇列中等待的<code>訊息數量</code>來決定。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;message in callback&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// start</span></span>
<span class="line"><span class="token comment">// end</span></span>
<span class="line"><span class="token comment">// message in callback</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到範例中，即使設定延遲時間為 0，其仍視為新的訊息並必須等待當前訊息執行完畢。</p><h3 id="never-blocking-絕不阻塞" tabindex="-1"><a class="header-anchor" href="#never-blocking-絕不阻塞"><span>Never Blocking（絕不阻塞）</span></a></h3><p>事件循環這個模型有一個非常有趣的特色就是預設狀況下永不阻塞，但凡事總有例外，像是 <code>alert</code> 或是<code>同步的 XHR</code>，好的實作方式是盡力避開他們～</p><h2 id="實作" tabindex="-1"><a class="header-anchor" href="#實作"><span>實作</span></a></h2><p>上面講了一堆理論，實作上我們該怎麼使用這些特性又是另一個問題，常見進行非同步的方式有幾種，包含最基本的 callback 回調函式，上面講到的 setTimeout，以及現今最流行使用的 promise。</p><h3 id="callback-回調函式" tabindex="-1"><a class="header-anchor" href="#callback-回調函式"><span>Callback 回調函式</span></a></h3><p>以下是一個最簡單的點擊事件監聽，我們明確定義了一個添加訊息的方式，當後續按鈕點擊觸發後，瀏覽器就會添加一個 cb 訊息到 Queue 中</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;button clicked&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="settimeout" tabindex="-1"><a class="header-anchor" href="#settimeout"><span>setTimeout</span></a></h3><p>直接使用 web api 添加</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;do something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="promise" tabindex="-1"><a class="header-anchor" href="#promise"><span>Promise</span></a></h3><p>使用 Promise 物件進行操作，並在 then 中定義回調函式</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;do something - sync&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;do something - async&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="micro-macro-queue" tabindex="-1"><a class="header-anchor" href="#micro-macro-queue"><span>Micro &amp; Macro queue</span></a></h3><p>上面的回調函式已經很清楚是一個<code>Task</code>會添加到 Queue 中，這裡先不討論了，這裡專注討論 setTimeout 與 promise 的差異，相信很多人吃過很多雞但都沒看過雞吧！！...</p><p>誒不是！！兩個都用過但其實是有些微差異的，繼續往下看看這個範例，先想想他的輸出順序會是如何？</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise exec&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise after resolve&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise then&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout exec&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案是</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// start</span></span>
<span class="line"><span class="token comment">// promise exec</span></span>
<span class="line"><span class="token comment">// promise after resolve</span></span>
<span class="line"><span class="token comment">// end</span></span>
<span class="line"><span class="token comment">// promise then</span></span>
<span class="line"><span class="token comment">// setTimeout exec</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>這邊要介紹一個 micro, macro queue 的概念，在 Javascript 的事件中，分為兩個分類：</p><ul><li>micro queue: <code>promise</code>, <code>Mutation Observer API</code>, <code>queueMicrotask</code></li><li>macro queue(task queue): <code>setTimeout</code>, <code>dom event listener</code>, <code>script</code></li></ul><h4 id="microtask" tabindex="-1"><a class="header-anchor" href="#microtask"><span><strong>Microtask</strong></span></a></h4><p>microtask 是ㄧ段函式，並會在當前創造他的 function stack 執行完畢(清空)離開後，並在將控制權限交給 Event Loop 之前執行，如此可確保 microtask 不會影響污染到其他 <code>script</code> 的執行，也確保 user agent 不會在 microtask 執行完畢前做出相應的反應。</p><h4 id="macrotask-task" tabindex="-1"><a class="header-anchor" href="#macrotask-task"><span><strong>Macrotask(Task)</strong></span></a></h4><p>Macrotask 主要與 Microtask 有兩大差異：</p><ol><li><p>每當 Task 執行結束時，Event Loop 會檢查當前 task 是否有明確回傳控制權給其他 javascript code，如果沒有，則會將所有存在 micro queue 中的動作執行，並依此往復執行數次（包含其他事件驅動或 script 回調等等）</p></li><li><p>即使使用 setTimeout 或 queueMicrotask 一次添加大量 microtask，其也會在下一個 Task 執行前執行完畢，因為 micro queue 會在每個 task 執行後執行並清空，不論在當前 Task 內添加了多少 microtask。</p></li></ol><h4 id="解說答案" tabindex="-1"><a class="header-anchor" href="#解說答案"><span>解說答案</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 2</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise exec&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 3</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise after resolve&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 5</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise then&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 6</span></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout exec&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>promise 建立時內部的回調會立即調用，這邊要注意的是 resolve 後並不會停止後續的程式執行，當 end 執行完畢後代表 task 已結束，接著會檢查並調用所有 micro queue 中的 task，當 micro queue 清空後，event loop 提取下一個 Task 執行。</p><h2 id="結論" tabindex="-1"><a class="header-anchor" href="#結論"><span>結論</span></a></h2><p>本篇主要介紹基礎的 Event Loop 概念，如果你對更深入的差異內容感興趣，可以<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth" target="_blank" rel="noopener noreferrer">前往這裡</a>觀看詳細的解釋。</p><p>以下結論重點：</p><ol><li>Micro Queue 會在每次 Task 執行結束後，全部調用並清空，接著 Event Loop 提取下一個 Task 執行。</li><li>Microtask 包含 Promise 的 then, queueMicrotask 等等動作。</li><li>Macrotask 包含 Event Callback, setTimeout, script 等等。</li></ol><p>希望大家看完本篇後都能對 Javascript 的 Event Loop 有更深度的了解摟，下次面試官再問也不怕拉～</p><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener noreferrer">MDN 並行模型和事件循環</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide" target="_blank" rel="noopener noreferrer">MDN Microtask &amp; Task</a></li></ul>`,74)),e(a,{hashtags:"javascript,eventloop"})])}const k=p(i,[["render",u],["__file","event-loop.html.vue"]]),m=JSON.parse('{"path":"/articles/js/event-loop.html","title":"你真的懂 Event Loop 嗎","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"執行環境 Runtime Concept","slug":"執行環境-runtime-concept","link":"#執行環境-runtime-concept","children":[{"level":3,"title":"Stack 堆疊（call stack）","slug":"stack-堆疊-call-stack","link":"#stack-堆疊-call-stack","children":[]},{"level":3,"title":"Heap 堆積","slug":"heap-堆積","link":"#heap-堆積","children":[]},{"level":3,"title":"Queue 佇列","slug":"queue-佇列","link":"#queue-佇列","children":[]}]},{"level":2,"title":"Event Loop 事件循環","slug":"event-loop-事件循環","link":"#event-loop-事件循環","children":[{"level":3,"title":"Run to completion 執行到完成","slug":"run-to-completion-執行到完成","link":"#run-to-completion-執行到完成","children":[]},{"level":3,"title":"Adding message 添加訊息","slug":"adding-message-添加訊息","link":"#adding-message-添加訊息","children":[]},{"level":3,"title":"Zero delays（零延遲）","slug":"zero-delays-零延遲","link":"#zero-delays-零延遲","children":[]},{"level":3,"title":"Never Blocking（絕不阻塞）","slug":"never-blocking-絕不阻塞","link":"#never-blocking-絕不阻塞","children":[]}]},{"level":2,"title":"實作","slug":"實作","link":"#實作","children":[{"level":3,"title":"Callback 回調函式","slug":"callback-回調函式","link":"#callback-回調函式","children":[]},{"level":3,"title":"setTimeout","slug":"settimeout","link":"#settimeout","children":[]},{"level":3,"title":"Promise","slug":"promise","link":"#promise","children":[]},{"level":3,"title":"Micro & Macro queue","slug":"micro-macro-queue","link":"#micro-macro-queue","children":[]}]},{"level":2,"title":"結論","slug":"結論","link":"#結論","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{"updatedTime":1653649936000,"contributors":[{"name":"johnnywang","email":"johnny29621189@kimo.com","commits":1},{"name":"johnnywang1994","email":"johnny29621189@kimo.com","commits":1}]},"filePathRelative":"articles/js/event-loop.md"}');export{k as comp,m as data};
