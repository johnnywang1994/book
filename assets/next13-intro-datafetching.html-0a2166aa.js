import{_ as i,r as p,o as l,c as u,a,d as s,e as n,w as r,f as e}from"./app-5f5a908c.js";const d={},k=s("h1",{id:"快速上手-nextjs-v13-data-fetching-caching-revalidating-篇",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#快速上手-nextjs-v13-data-fetching-caching-revalidating-篇","aria-hidden":"true"},"#"),n(" 快速上手 NextJS v13 - Data Fetching, Caching, Revalidating 篇")],-1),v=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),m=s("code",null,"Date Fetching",-1),g=s("code",null,"Caching",-1),h=s("code",null,"Revalidating",-1),b=s("code",null,"Forms and Mutations",-1),f={href:"https://nextjs.org/docs/app/building-your-application/data-fetching/forms-and-mutations",target:"_blank",rel:"noopener noreferrer"},y=e('<h2 id="data-fetching-caching-and-revalidating" tabindex="-1"><a class="header-anchor" href="#data-fetching-caching-and-revalidating" aria-hidden="true">#</a> Data Fetching, Caching, and Revalidating</h2><p>這部分算是 Next13 主要核心功能之一，主要有以下四種 data fetching 的方式：</p><ol><li>在 Server 端使用 fetch</li><li>在 Server 端使用 NPM 依賴</li><li>在 Client 端使用 Route Handler(類似舊的 <code>pages/api</code>)</li><li>在 Client 端使用 NPM 依賴</li></ol><h2 id="在-server-端使用-fetch" tabindex="-1"><a class="header-anchor" href="#在-server-端使用-fetch" aria-hidden="true">#</a> 在 Server 端使用 fetch</h2><p>Next13 在 server 端擴展了原生的 fetch api，讓開發者可以更方便進行 <code>caching</code>, <code>revalidating</code>，在 <code>ServerComponent</code>, <code>RouteHandler</code>, <code>ServerAction</code> 都能直接透過 <code>async/await</code> 使用 fetch：</p>',5),w={href:"https://nextjs.org/docs/app/api-reference/functions/fetch",target:"_blank",rel:"noopener noreferrer"},x=e(`<blockquote><p>React 本身擴展了 fetch，在 react component 中的 request 會被 <code>memoize</code></p></blockquote><p>比如在 <code>app/page.tsx</code> 中</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com/...&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// The return value is *not* serialized</span>
  <span class="token comment">// You can return Date, Map, Set, etc.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 這會啟動最近的 \`error.js\` Error Boundary</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Failed to fetch data&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意點 1：Next 提供的 <code>cookies</code>, <code>headers</code> 在 Server Component 中使用，會因為其包含時間的特性，讓使用的路由被 Dynamic Render</p></blockquote><blockquote><p>注意點 2：Route Handler 中使用的 fetch 因為不在 React component 結構中，故不會被 <code>memoize</code></p></blockquote><blockquote><p>注意點 3：如果需要在 Server Component 中使用 <code>async/await</code>，<code>typescript</code>版本需高於<code>5.1.3</code>，<code>@types/react</code> 則需高於 <code>18.2.8</code></p></blockquote><h3 id="caching-data" tabindex="-1"><a class="header-anchor" href="#caching-data" aria-hidden="true">#</a> Caching Data</h3>`,7),_={href:"https://nextjs.org/docs/app/building-your-application/caching#data-cache",target:"_blank",rel:"noopener noreferrer"},j=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &#39;force-cache&#39; 為預設值, 可以省略</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://...&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token string">&#39;force-cache&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>POST fetch 同樣會自動被 cache，除非是在 <code>Route Handler</code> 中的 POST 則不會被 cache</p><h3 id="revalidating-data" tabindex="-1"><a class="header-anchor" href="#revalidating-data" aria-hidden="true">#</a> Revalidating Data</h3><p><code>Revalidating</code> 是一個清除 cache data 並重新獲取最新 data 的過程，當 data 被更新後，而需要獲取其最新狀態時使用。</p><p>主要有兩種方式進行：</p>`,5),q={href:"https://nextjs.org/docs/app/building-your-application/caching#time-based-revalidation",target:"_blank",rel:"noopener noreferrer"},R=e(`<ul><li>在單一 fetch 的 option 中設定</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://...&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">revalidate</span><span class="token operator">:</span> <span class="token number">3600</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在 route segment 中對該 route 中全部 fetch 設定</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* layout.js/page.js */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> revalidate <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">;</span>
<span class="token comment">// revalidate at most every hour</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 static render 的頁面中，如果使用了許多設定不同 revalidate time 的 fetch，則所有 fetch 都會套用最短的那個 fetch revalidate time</p></blockquote><blockquote><p>在 dynamic render 的頁面中，每個 fetch 的 revalidate time 都是獨立的</p></blockquote>`,6),S={start:"2"},P=s("strong",null,"On-demand revalidation",-1),N={href:"https://nextjs.org/docs/app/api-reference/functions/revalidateTag",target:"_blank",rel:"noopener noreferrer"},D={href:"https://nextjs.org/docs/app/api-reference/functions/revalidatePath",target:"_blank",rel:"noopener noreferrer"},I=s("code",null,"Route Handler",-1),A=s("code",null,"Server Actions",-1),C=e(`<ul><li>如下對 fetch 加入 <code>collection</code> tag，之後只需要透過 <code>revalidateTag</code> 就可以刷新標注了特定 tag 的 fetch cache</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/* app/page.tsx */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// add tag name</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://...&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> next<span class="token operator">:</span> <span class="token punctuation">{</span> tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;collection&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果使用 Route Handler，則建議給 Next.js app 產生一個只有 app 本身知道的 secret token，藉此避免未授權的非法 revalidate 請求，如下範例</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://&lt;your-site.com&gt;/api/revalidate?tag=collection&amp;secret=&lt;token&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NextRequest<span class="token punctuation">,</span> NextResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/server&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> revalidateTag <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/cache&#39;</span>

<span class="token comment">// e.g a webhook to \`your-website.com/api/revalidate?tag=collection&amp;secret=&lt;token&gt;\`</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">POST</span><span class="token punctuation">(</span>request<span class="token operator">:</span> NextRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> secret <span class="token operator">=</span> request<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;secret&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> tag <span class="token operator">=</span> request<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;tag&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>secret <span class="token operator">!==</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MY_SECRET_TOKEN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Invalid secret&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">401</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Missing tag param&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">400</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">revalidateTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>

  <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> revalidated<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> now<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或是透過 <code>revalidatePath</code> 也可以</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NextRequest<span class="token punctuation">,</span> NextResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/server&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> revalidatePath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;next/cache&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token constant">POST</span><span class="token punctuation">(</span>request<span class="token operator">:</span> NextRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> path <span class="token operator">=</span> request<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Missing path param&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token operator">:</span> <span class="token number">400</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">revalidatePath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>

  <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> revalidated<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> now<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),T={href:"https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes#nodejs-runtime",target:"_blank",rel:"noopener noreferrer"},F=e(`<blockquote><p>注意點 2：若在 revalidate 過程出現 error，則舊的 data 仍將被 cache 繼續使用，並在下一次 request 中再次嘗試進行 revalidate</p></blockquote><h3 id="什麼時候不會-cache" tabindex="-1"><a class="header-anchor" href="#什麼時候不會-cache" aria-hidden="true">#</a> 什麼時候不會 cache？</h3><ul><li>fetch 的 option 設定為 <code>cache: &#39;no-cache&#39;</code></li><li>fetch 的 option 設定為 <code>revalidate: 0</code></li><li>Route Handler POST method 中的 fetch</li><li>在使用 <code>cookies</code>, <code>headers</code> 後的 fetch</li><li>Route segment option 設定為 <code>const dynamic = &#39;force-dynamic&#39;</code></li><li>Route segment option 設定 <code>fetchCache</code> 為 skip cache</li><li>fetch 中使用 <code>Authorization</code>, <code>Cookie</code> header，且其前面有一個沒被 cached 的 request 在 component 中</li></ul><p>對單一 fetch 設定不要 cache</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// layout.js or page.js</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://...&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token string">&#39;no-store&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在-server-端使用第三方-npm-依賴" tabindex="-1"><a class="header-anchor" href="#在-server-端使用第三方-npm-依賴" aria-hidden="true">#</a> 在 Server 端使用第三方 NPM 依賴</h2>`,6),H={href:"https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config",target:"_blank",rel:"noopener noreferrer"},E=s("code",null,"cache",-1),M=e(`<blockquote><p>data 是否被 cache 取決於該 route 是 static 或 dynamic rendered</p></blockquote><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>以下範例中：</p><ul><li>revalidate 被設定為 <code>3600</code></li><li>使用 React <code>cache</code> function 來 memoize request</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/* utils/get-item.ts */</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> cache <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> revalidate <span class="token operator">=</span> <span class="token number">3600</span> <span class="token comment">// revalidate the data at most every hour</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> getItem <span class="token operator">=</span> <span class="token function">cache</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>item<span class="token punctuation">.</span><span class="token function">findUnique</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> item
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>雖然在 Layout, Page 中共使用了兩次 getItem，但實際只會送出一個 request</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/* app/item/layout.tsx */</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils/get-item&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Layout</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getItem</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/* app/item/[id]/page.tsx */</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils/get-item&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getItem</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在-client-端使用-route-handlers" tabindex="-1"><a class="header-anchor" href="#在-client-端使用-route-handlers" aria-hidden="true">#</a> 在 Client 端使用 Route Handlers</h2><p>如果需要在 client 端 fetch data，可以透過 Route Handler 在 server 端執行後返回 data 到 client 端，適用於不想暴露敏感資料（比如 api token）在 client 端的場景</p><h2 id="在-client-端使用第三方-npm-依賴" tabindex="-1"><a class="header-anchor" href="#在-client-端使用第三方-npm-依賴" aria-hidden="true">#</a> 在 Client 端使用第三方 NPM 依賴</h2><p>也可以在 client 端使用像是 <code>SWR</code>, <code>React Query</code>，這些套件都有做比如 <code>memoizing requests</code>, <code>caching</code>, <code>revalidating</code>, <code>mutating data</code> 等功能</p>`,12),O={href:"https://github.com/acdlite/rfcs/blob/first-class-promises/text/0000-first-class-support-for-promises.md#usepromise",target:"_blank",rel:"noopener noreferrer"},z=s("code",null,"use",-1),L=e('<h2 id="data-fetching-patterns" tabindex="-1"><a class="header-anchor" href="#data-fetching-patterns" aria-hidden="true">#</a> Data Fetching Patterns</h2><p>以下是在 React 和 Next.js 中獲取 data 的推薦模式和最佳實踐</p><h3 id="fetching-data-在-server-端" tabindex="-1"><a class="header-anchor" href="#fetching-data-在-server-端" aria-hidden="true">#</a> Fetching Data 在 Server 端</h3><p>只要條件允許，盡量在 server 端 fetch data</p><ul><li>對後端資源可以直接獲取</li><li>使 app 更加安全，避免敏感資料外流</li><li>fetch 和 render 在同一環境進行，減少 client, server 溝通成本</li></ul><h3 id="哪裡使用資料就在哪-fetch" tabindex="-1"><a class="header-anchor" href="#哪裡使用資料就在哪-fetch" aria-hidden="true">#</a> 哪裡使用資料就在哪 fetch</h3><p>如果需要在多個地方使用相同資料，只需直接在需要使用資料的地方進行 fetch，而不是透過一個 global 狀態管理器或是傳遞 props data，不用擔心會對同樣的資料進行多次的 request（因為有自動 cache 機制）</p><h3 id="streaming" tabindex="-1"><a class="header-anchor" href="#streaming" aria-hidden="true">#</a> Streaming</h3>',8),B={href:"https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming",target:"_blank",rel:"noopener noreferrer"},U={href:"https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming#streaming-with-suspense",target:"_blank",rel:"noopener noreferrer"},V=e(`<h3 id="parallel-及-sequential-data-fetching" tabindex="-1"><a class="header-anchor" href="#parallel-及-sequential-data-fetching" aria-hidden="true">#</a> Parallel 及 Sequential Data Fetching</h3><p>在 React app 中有兩種 data fetching 模式如下：</p><ul><li><strong>Sequential data fetching</strong>: 在一個 route 中，request 之間彼此依賴，一個接一個執行，通常適用在一個 request 依賴前一個 request 回傳的內容時，但也可能是無心的操作，容易導致多餘不必要的冗長請求時間</li><li><strong>parallel data fetching</strong>: 在一個 route 中，request 同時並行進行，藉此減少 <code>client-server waterfalls</code> 及整體請求完畢的時間</li></ul><h4 id="sequential-data-fetching" tabindex="-1"><a class="header-anchor" href="#sequential-data-fetching" aria-hidden="true">#</a> Sequential Data Fetching</h4><p>在 Next13 中，如果在 nested component 中的各組件中進行 data fetching，如果這些 data fetching 的目標內容不相同則這些操作會以 <code>Sequential</code> 的方式進行（相同目標內容的 fetch 會自動被 memoized）</p><p>比如下面 <code>Playlists</code> 中的 request，會等到 <code>getArtist</code> 完畢後才執行，因為 <code>Playlists</code> 依賴 prop <code>artistID</code></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Playlists</span><span class="token punctuation">(</span><span class="token punctuation">{</span> artistID <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> artistID<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Wait for the playlists</span>
  <span class="token keyword">const</span> playlists <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getArtistPlaylists</span><span class="token punctuation">(</span>artistID<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>playlists<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>playlist<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>playlist<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>playlist<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Wait for the artist</span>
  <span class="token keyword">const</span> artist <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getArtist</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>artist<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Playlists</span></span> <span class="token attr-name">artistID</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>artist<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),W={href:"https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming",target:"_blank",rel:"noopener noreferrer"},J={href:"https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming#streaming-with-suspense",target:"_blank",rel:"noopener noreferrer"},Y=s("code",null,"<Suspense>",-1),$=e(`<h4 id="parallel-data-fetching" tabindex="-1"><a class="header-anchor" href="#parallel-data-fetching" aria-hidden="true">#</a> Parallel Data Fetching</h4><p>若要將請求並行處理，則可以把 request 邏輯抽離 component 放在外部，接著在 component 中並行調用，藉此減少所有請求完成的時間，但這麼做用戶必須等待並行 request 都完成後才看得到畫面</p><p>如下範例中，把 <code>getArtist</code>, <code>getArtistAlbums</code> 定義在組件外部</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> Albums <span class="token keyword">from</span> <span class="token string">&#39;./albums&#39;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getArtist</span><span class="token punctuation">(</span>username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://api.example.com/artist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getArtistAlbums</span><span class="token punctuation">(</span>username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://api.example.com/artist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/albums</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Initiate both requests in parallel</span>
  <span class="token keyword">const</span> artistData <span class="token operator">=</span> <span class="token function">getArtist</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
  <span class="token keyword">const</span> albumsData <span class="token operator">=</span> <span class="token function">getArtistAlbums</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>

  <span class="token comment">// Wait for the promises to resolve</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>artist<span class="token punctuation">,</span> albums<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>artistData<span class="token punctuation">,</span> albumsData<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>artist<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Albums</span></span> <span class="token attr-name">list</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>albums<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Albums</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),K={href:"https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming",target:"_blank",rel:"noopener noreferrer"},Q=e(`<h3 id="preloading-data" tabindex="-1"><a class="header-anchor" href="#preloading-data" aria-hidden="true">#</a> Preloading Data</h3><p>要減少 client-server waterfalls，也可以在組件檔案中定義一個 <code>preload</code> function(名稱可以自由命名)，並在使用組件的地方提前並行調用，幫助組件在之後的 render 過程加速</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/* components/Item.tsx */</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils/get-item&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">preload</span> <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// void evaluates the given expression and returns undefined</span>
  <span class="token comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void</span>
  <span class="token keyword">void</span> <span class="token function">getItem</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getItem</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">/* app/item/[id]/page.tsx */</span>
<span class="token keyword">import</span> Item<span class="token punctuation">,</span> <span class="token punctuation">{</span> preload<span class="token punctuation">,</span> checkIsAvailable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/components/Item&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// starting loading item data</span>
  <span class="token function">preload</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
  <span class="token comment">// perform another asynchronous task</span>
  <span class="token keyword">const</span> isAvailable <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">checkIsAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> isAvailable <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span></span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-react-cache-server-only-和-preload-pattern" tabindex="-1"><a class="header-anchor" href="#使用-react-cache-server-only-和-preload-pattern" aria-hidden="true">#</a> 使用 React cache, server-only 和 Preload Pattern</h3><p>可以透過 React <code>cache</code>, <code>server-only</code> package, 以及 preload pattern 製作工具如下，確保此 request 能並行執行、cache data、且只在 server 端請求，並在之後由 <code>layout</code>, <code>page</code>, <code>component</code> 引入使用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> cache <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;server-only&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">preload</span> <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">getItem</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> getItem <span class="token operator">=</span> <span class="token function">cache</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),G=s("h2",{id:"結論",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#結論","aria-hidden":"true"},"#"),n(" 結論")],-1),X=s("p",null,"本篇主要是閱讀官方文件的筆記轉化後寫成，希望大家不會嫌棄內容太多，下一篇預計會是使用後統整的進階筆記，那就下篇見拉～=V=",-1);function Z(nn,sn){const o=p("SocialBlock"),c=p("RouterLink"),t=p("ExternalLinkIcon");return l(),u("div",null,[k,a(o,{hashtags:"javascript,react,Next.js,Data Fetching,Caching,Revalidating"}),v,s("p",null,[n("Hi 大家好，我是 Johnny，本篇將接續前一篇"),a(c,{to:"/articles/js/next13-intro-approuter.html"},{default:r(()=>[n("快速上手 NextJS v13 - 基礎觀念 AppRouter 篇")]),_:1}),n("，針對 Next13 "),m,n(", "),g,n(", "),h,n(" 等部分進行介紹，關於 "),b,n(" 部分屬於實作，建議直接"),s("a",f,[n("查看官網範例學習"),a(t)]),n("，還沒看過前一篇的同志們，建議先閱讀完前篇之後再來閱讀這篇喔")]),y,s("ul",null,[s("li",null,[s("a",w,[n("關於 Next13 的 fetch"),a(t)])])]),x,s("p",null,[n("Next13 預設會將 fetch 返回的內容存放在 server 端的 "),s("a",_,[n("Data Cache"),a(t)]),n(" 當中，也代表該 request 可以在 build time, request time 觸發，並 cache 資料")]),j,s("ol",null,[s("li",null,[s("strong",null,[s("a",q,[n("Time-based revalidation"),a(t)])]),n(": 在固定時間後自動刷新，適用於非關鍵且不會頻繁更新的 data，使用方式如下")])]),R,s("ol",S,[s("li",null,[P,n(": 手動由事件觸發刷新（比如 form 表單），其中又分為 "),s("a",N,[n("revalidateTag"),a(t)]),n(", "),s("a",D,[n("revalidatePath"),a(t)]),n(" 兩種方式對 data group 一次性刷新，適用於關鍵且可能頻繁被更新的 data，使用於 "),I,n(", "),A,n(" 中")])]),C,s("blockquote",null,[s("p",null,[n("注意點 1：Revalidation 只在 "),s("a",T,[n("Nodejs Runtime"),a(t)]),n("（預設）中生效")])]),F,s("p",null,[n("在 server 端使用第三方套件時，無法直接針對 fetch 進行設定，必須透過 "),s("a",H,[n("Route Segment Config Option"),a(t)]),n(" 或 React 的 "),E,n(" function 設定")]),M,s("blockquote",null,[s("p",null,[n("未來 "),s("a",O,[n("React RFC"),a(t)]),n(" 的 "),z,n(" function 不建議在 client component 內包裹 fetch 使用，可能導致 component 多次 rerender")])]),L,s("p",null,[n("Streaming 和 Suspense 是 React 的機制，允許開發者在 client side 進行漸進式的 UI render，透過 Server Component，可以讓不需要 data 的區塊內容快速顯示，僅在需要 data 的區塊展示 loading 狀態，讓用戶不需要等待整個頁面都載入完成，就能夠瀏覽到部分的畫面，詳細可參考"),s("a",B,[n("Loading UI"),a(t)]),n("、"),s("a",U,[n("Streaming 和 Suspense"),a(t)]),n("相關介紹")]),V,s("p",null,[n("在這種情況下，可以透過 "),s("a",W,[n("loading.js"),a(t)]),n("(for route segments) 或是 "),s("a",J,[n("React "),Y,a(t)]),n(" 對請求中的組件進行處理，避免整個畫面被請求阻塞住，導致用戶無法與畫面中的其他部分互動")]),$,s("p",null,[n("並行使用的方式可以透過 "),s("a",K,[n("Suspense Boundary"),a(t)]),n("，優化使用者體驗")]),Q,a(o,{hashtags:"javascript,react,Next.js,Data Fetching,Caching,Revalidating"}),G,X])}const tn=i(d,[["render",Z],["__file","next13-intro-datafetching.html.vue"]]);export{tn as default};
