import{_ as o,c as d,b as a,a as e,d as i,e as n,w as r,r as t,o as u}from"./app-aytLpXyP.js";const m={};function h(k,s){const l=t("YoutubeVideo"),p=t("Mermaid"),c=t("RouteLink");return u(),d("div",null,[s[4]||(s[4]=a("h1",{id:"api-first-學習筆記",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#api-first-學習筆記"},[a("span",null,"API First 學習筆記")])],-1)),s[5]||(s[5]=a("p",null,"哈摟大家好～我是 Johnny。",-1)),s[6]||(s[6]=a("p",null,[n("今天這篇是觀看 "),a("code",null,"91APP 首席架構師 Andrew Wu"),n(" 有關於 API First 的介紹影片時的觀看筆記～")],-1)),s[7]||(s[7]=a("p",null,[n("影片連結在這邊！"),a("a",{href:"https://www.youtube.com/watch?v=xDMTP2OVROo",target:"_blank",rel:"noopener noreferrer"},"DevOps 潮流下的 API First 開發策略"),n("，歡迎有興趣看看的朋友可以看一下～")],-1)),e(l,{src:"https://www.youtube.com/embed/xDMTP2OVROo",title:"DevOps 潮流下的 API First 開發策略"}),s[8]||(s[8]=i('<h2 id="什麼是-api-first" tabindex="-1"><a class="header-anchor" href="#什麼是-api-first"><span>什麼是 API First</span></a></h2><p>指得是 API 的順位要擺在第一考量，推動 API First 的要素有以下三點</p><ul><li>先做好 API(Developer Experience)，再做好 Product</li><li>系統間的通訊方式就是 API 的規格，避免直接互相存取儲存空間等等</li><li>誰訂 API Spec?誰來訂都沒關係，重點在確立 Contrast</li></ul><h2 id="為何需要-api-first" tabindex="-1"><a class="header-anchor" href="#為何需要-api-first"><span>為何需要 API First</span></a></h2><p>API 背後代表的是使用 <code>服務</code>、<code>資料</code> 的標準方式，高度整合能夠帶來便利、自動化、規模化，也更易於開放 API 給其他客戶、異業進行合作</p><h2 id="產品團隊難題" tabindex="-1"><a class="header-anchor" href="#產品團隊難題"><span>產品團隊難題</span></a></h2><p>為了區分 <code>服務</code>、<code>應用</code> 的分界，必須確立哪些東西是需要收斂成 API 服務的？而哪些該被當成客製化需求交付，而不應該是通通寫進標準產品當中。</p><h2 id="aws-的-api-授權-備忘錄-2002年" tabindex="-1"><a class="header-anchor" href="#aws-的-api-授權-備忘錄-2002年"><span>AWS 的 <code>API 授權</code> 備忘錄(2002年)</span></a></h2><ul><li>所有團隊必須以服務介面連接埠的方式，提供彼此系統間的資料和各種功能</li><li>不允許任何其他形式的互操作，不允許直接連結，不允許直接讀取其他團隊資料，不允許共享儲存空間，不允許任何形式的後門，<code>唯一許可的方式就是透過網路呼叫服務</code></li><li>具體的網路實作技術不侷限在 HTTP</li><li>所有的服務連接埠，必須從一開始就以可以公開作為設計導向，也就是在設計時就預設可以對外部人員開放使用</li><li><code>不遵守上述規定者，一律開除</code></li></ul><p>備忘錄的真正含義，考量的並不單純僅僅是複用性的問題，而是作為一家科技公司，其<code>資產就是對於專業領域的資訊處理能力</code>，API 不論對內、對外都是最適合作為提供服務的型態，為了讓公司服務能夠更容易被運用，這是整個商業運作的骨幹不可妥協，故<code>不遵守上述規定者，一律開除</code></p><h2 id="api-開發策略" tabindex="-1"><a class="header-anchor" href="#api-開發策略"><span>API 開發策略</span></a></h2><ul><li>開發流程改變 <ul><li><code>Contrast First</code> (vs Requirement First)</li></ul></li><li>分析設計方式改變 <ul><li>從 Domain 的 action, model 分析開始，非 db schema 開始</li><li>API 背後的細節需要被封裝，降低整體系統溝通複雜度</li></ul></li><li>安全控管的改變 <ul><li>scoped + api-key (vs function-list + 授權 + 帳號)</li><li>功能開關，轉變為領域操作授權</li><li>API 安全性做得有多確實，決定整個生態系的安全性(oauth 的授權同意功能)</li></ul></li></ul><h2 id="開發流程改變" tabindex="-1"><a class="header-anchor" href="#開發流程改變"><span>開發流程改變</span></a></h2><p>先討論 api schema，API 基於 mock 先行提供(能有 swagger 更讚)，前後端同時開發，也可更快找到原本設計上不合理或缺失的地方</p><h2 id="api-設計方式的改變與標準化" tabindex="-1"><a class="header-anchor" href="#api-設計方式的改變與標準化"><span>API 設計方式的改變與標準化</span></a></h2><ul><li>練習先找出關鍵的 API 結構，排除非必要的細節設計</li><li>關鍵 API 先出來後就能先進行案例驗證，完成後再展開細節設計</li><li>細節包括：參數定義、實作技術、組合 API 等等</li></ul><h2 id="設計-api-的核心結構-狀態機" tabindex="-1"><a class="header-anchor" href="#設計-api-的核心結構-狀態機"><span>設計 API 的核心結構 - 狀態機</span></a></h2><ul><li>找出 domain 最關鍵的行為（不用急著找出全部）</li><li>以 OOP 思維，將服務降維思考成 <code>物件 = states + methods</code></li><li>用 <code>狀態機</code> + <code>實例化案例</code> 來確認 API 骨架是否正確合理，再展開為 Spec</li></ul><h3 id="參考圖" tabindex="-1"><a class="header-anchor" href="#參考圖"><span>參考圖</span></a></h3><p>以下透過簡單的經典登入狀態機來說明如何設計</p>',20)),e(p,{id:"mermaid_64a56ebc",graph:"flowchart%20TD%0AStart(%5BStart%5D)%20--%3E%20%7CRegister%20-%20A%2CD%7C%20Unverified%0AUnverified%20--%3E%20%7CVerify%20-%20A%7C%20Verified%0AVerified%20--%3E%20%7CBan%20-%20B%7C%20Banned%0AVerified%20--%3E%20%7CRemove%20-%20A%7C%20End%0ABanned%20--%3E%20%7CRecover%20-%20B%7C%20Verified%0ABanned%20--%3E%20%7CRemove%20-%20B%2CC%7C%20End(%5BEnd%5D)%0A"}),s[9]||(s[9]=i(`<p>根據狀態機我們可以得到這些細節（抱歉本人習慣用 Typescript 寫ＸＤ請多包涵，僅供參考）</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token comment">// 列出 states</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">AccountStatus</span> <span class="token operator">=</span> <span class="token string">&#39;Unverified&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;Verified&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;Banned&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 列出 actions</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Register</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Verify</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Ban</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Recover</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Remove</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 列出 Get actions（不改變狀態）</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Get</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">GetMasked</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 列出 Caller 為後續權限管控的機制設計</span></span>
<span class="line"><span class="token keyword">enum</span> Caller <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">A</span> <span class="token operator">=</span> <span class="token string">&#39;會員本人&#39;</span></span>
<span class="line">  <span class="token constant">B</span> <span class="token operator">=</span> <span class="token string">&#39;營運人員&#39;</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token operator">=</span> <span class="token string">&#39;Service(自己)&#39;</span></span>
<span class="line">  <span class="token constant">D</span> <span class="token operator">=</span> <span class="token string">&#39;3rd&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 列出 Event 監聽改動後需要相應觸發的事件</span></span>
<span class="line"><span class="token comment">// 實作可用 message bug, webhooks or etc.</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">OnRegistering</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">(</span></span>
<span class="line">    id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">    initState<span class="token operator">:</span> AccountStatus<span class="token punctuation">,</span></span>
<span class="line">    finalState<span class="token operator">:</span> AccountStatus</span>
<span class="line">  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">OnRegistered</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">OnAccountStatusChanged</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最終開出類似下方的 api 規格，事後需要修改需求時，只需要拿出這個狀態機參考改動就可以快速釐清目標跟改動範圍</p><ol><li><code>API: POST /api/members/{id}:{action}</code></li><li><code>API: GET /api/members/{id}:{action}</code></li><li>更多可透過 1. + 2. 組合成的好用服務，確保行為一致</li></ol><h3 id="權限管制表" tabindex="-1"><a class="header-anchor" href="#權限管制表"><span>權限管制表</span></a></h3><p>狀態機中的權限雖然方便，但無法一目瞭然，可以再另外整理一張表格，加速溝通理解的速度，具體像是 <code>Remove</code> 這個 action，在 <code>AccountStatus</code> 不同的狀態下，權限設定是不同的</p><table><thead><tr><th style="text-align:left;"></th><th>Register</th><th>Verify</th><th>Ban</th><th>Recover</th><th>Remove</th></tr></thead><tbody><tr><td style="text-align:left;">A. 會員本人</td><td>start:*</td><td>unverified:*</td><td></td><td></td><td>verified:*</td></tr><tr><td style="text-align:left;">B. 營運人員</td><td></td><td></td><td>verified:*</td><td>banned:*</td><td>banned:*</td></tr><tr><td style="text-align:left;">C. Service(自己)</td><td></td><td></td><td></td><td></td><td>banned:*</td></tr><tr><td style="text-align:left;">D. 3RD</td><td>start:*</td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>Think: 如果我想控制<code>只允許內部使用的 API</code>，該怎麼做？</p></blockquote><h3 id="實作收斂" tabindex="-1"><a class="header-anchor" href="#實作收斂"><span>實作收斂</span></a></h3><p>上面的表格雖然精美，但實作上 <code>5x4</code> 的這樣排列組合 action 是很可觀的，需要經過 scope 收斂，比如 action 透過 <code>CRUD</code> 收斂，caller 透過 <code>api-key</code> 收斂等等。具體關於 API Access Scope 的案例可<a href="https://developers.smartrecruiters.com/docs/access-scopes#list-of-available-access-scopes" target="_blank" rel="noopener noreferrer">參考這邊</a>，文章後面會提到如何實作這部分～</p><h3 id="api-需求驗證" tabindex="-1"><a class="header-anchor" href="#api-需求驗證"><span>API 需求驗證</span></a></h3><p>到這階段，我們可以拿著剛剛製作好的狀態機，開始一一驗證 PM, PO 開的 API 需求是否都有滿足了，這個過程基本上都還是紙上作業，驗證速度比起實際開發後才做比對修改會快上非常多</p><h3 id="對比-crud" tabindex="-1"><a class="header-anchor" href="#對比-crud"><span>對比 CRUD</span></a></h3><p><img src="https://raw.githubusercontent.com/jwlearn1994/image-uploader/main/2022/10/compare-crud.png" alt=""></p><h2 id="從-api-設計階段考慮安全性" tabindex="-1"><a class="header-anchor" href="#從-api-設計階段考慮安全性"><span>從 API 設計階段考慮安全性</span></a></h2><p>這邊定義的安全性是 <code>能被刻意利用，用來影響正常運作的任何因素</code>。這邊討論的不是基礎建設的資安問題（加密、二次驗證），而是 API 設計上是否讓商業邏輯本身有漏洞存在。</p><h3 id="授權管理" tabindex="-1"><a class="header-anchor" href="#授權管理"><span>授權管理</span></a></h3><p><strong>授權管理的原則：</strong></p><ol><li>需知道每個 API 呼叫是來自哪個 caller？<br> 常見做法：每個 caller 配發 api-key 識別</li><li>產生 的 api-key 把 scope 綁在上面，並儲存在 db, redis 等處，當需要時進行反查</li></ol><p><strong>安全風險考慮</strong></p><ol><li>會異動資料的 API</li><li>會異動狀態的 API</li><li>會取得個資或機密資訊的 API</li><li>會列舉資料（大量）的 API</li></ol><h3 id="認證管理" tabindex="-1"><a class="header-anchor" href="#認證管理"><span>認證管理</span></a></h3><p><strong>常見措施：</strong></p><ol><li>集中式：API Gateway, Ingress</li><li>協作式：Service Discovery</li><li>分散式：Service Mesh</li></ol><p><strong>對內、對外應有不同的 api-key 管理機制</strong> 以車票、識別證兩種不同的比喻方式類比</p><ul><li>車票：不論誰拿到，都能使用上面記載的服務內容，車票本身可進行驗證真偽</li><li>識別證：票券本身證明持有者身份，至於服務內容則透過服務供應者根據其身份進行權限管制</li></ul><p><img src="https://raw.githubusercontent.com/jwlearn1994/image-uploader/main/2022/10/api-key-manage.png" alt=""></p><h3 id="題外話-what-is-ac" tabindex="-1"><a class="header-anchor" href="#題外話-what-is-ac"><span>題外話 What is AC?</span></a></h3>`,28)),a("blockquote",null,[a("p",null,[s[1]||(s[1]=n("聽到這邊突然想起最近在公司內部上過的 Workshop - ",-1)),s[2]||(s[2]=a("code",null,"What is AC - Acceptance Criteria 驗收條件",-1)),s[3]||(s[3]=n("，發現有許多異曲同工之妙。但 AC 更著重在事前的整個實例討論，在事前準備工作上需要花費更大量的時間，但對於產品的關鍵功能可最大程度確保，可",-1)),e(c,{to:"/articles/memo/what-is-ac.html"},{default:r(()=>s[0]||(s[0]=[n("參考這篇",-1)])),_:1,__:[0]})])])])}const b=o(m,[["render",h]]),f=JSON.parse('{"path":"/articles/memo/api-first-learn.html","title":"API First 學習筆記","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1748788505000,"contributors":[{"name":"JohnnyWang","username":"JohnnyWang","email":"johnnywang@test.com","commits":1,"url":"https://github.com/JohnnyWang"},{"name":"Lindy Liao","username":"","email":"meiliao1207@gmail.com","commits":1}],"changelog":[{"hash":"f01bfa128b4d33fbeddb8abb1697b5391b273d28","time":1748788505000,"email":"meiliao1207@gmail.com","author":"Lindy Liao","message":"UPD"},{"hash":"ba204e93b2ac1eb3cc67598a0a87d65aa016e4e8","time":1665674889000,"email":"johnnywang@test.com","author":"JohnnyWang","message":"UPD: add article list"}]},"filePathRelative":"articles/memo/api-first-learn.md"}');export{b as comp,f as data};
