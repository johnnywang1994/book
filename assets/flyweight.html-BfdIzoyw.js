import{_ as e,c as o,b as n,a as t,d as c,e as a,r as i,o as l}from"./app-D_QMa3Pm.js";const u={};function r(k,s){const p=i("SocialBlock");return l(),o("div",null,[s[0]||(s[0]=n("h1",{id:"flyweight-pattern",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#flyweight-pattern"},[n("span",null,"Flyweight Pattern")])],-1)),t(p,{hashtags:"design,pattern,flyweight"}),s[1]||(s[1]=c(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>大家好，我是 Johnny，今天要紀錄分享的是 Patterns 筆記系列的 <code>Flyweight Pattern</code></p><h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹"><span>介紹</span></a></h2><p><code>Flyweight Pattern</code> 是一種在創建大量相似物件時，節省記憶體空間的有效模式。</p><p>以下舉例假設我們有個需求，需要建立一個名為 iPhone 的類別，並且透過該類別我們可以產生包含各 iphone 機型資訊的物件</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">IPhone</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">version<span class="token punctuation">,</span> memory<span class="token punctuation">,</span> isbn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>version <span class="token operator">=</span> version<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>isbn <span class="token operator">=</span> isbn<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常情況下，我們希望在相同的 ISBN 編號的情況下，不會重複產生一次相同的 iphone 實例，因此我們透過一個 <code>createIphone</code> 方法來創建，並在其中判定該編號是否已經存在，若存在則直接使用之前創建過的物件</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> iphones <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">createIphone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">version<span class="token punctuation">,</span> memory<span class="token punctuation">,</span> isbn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> existingIphone <span class="token operator">=</span> iphones<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>existingIphone<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> iphones<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> iphone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span>version<span class="token punctuation">,</span> memory<span class="token punctuation">,</span> isbn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  iphones<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>isbn<span class="token punctuation">,</span> iphone<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> iphone<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常情況下這麼做確實可以避免重複創建相同的實例，但對於 iphone 的 <code>version</code>, <code>memory</code> 等屬性，我們還是會不斷重複創建相同的內容在不同的實例上，也就會導致記憶體持續被佔用，為了避免這種 <code>共用屬性的重複創建</code> 狀況，我們可以改寫如下</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Flyweight object</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">IphoneType</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">version<span class="token punctuation">,</span> memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>version <span class="token operator">=</span> version<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Flyweight factory</span></span>
<span class="line"><span class="token keyword">const</span> iphoneTypeFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> caches <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">get</span><span class="token punctuation">(</span>version<span class="token punctuation">,</span> memory<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>memory<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>caches<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        caches<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IphoneType</span><span class="token punctuation">(</span>version<span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> caches<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Unshared object</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">IPhone</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">version<span class="token punctuation">,</span> memory<span class="token punctuation">,</span> isbn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> iphoneTypeFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>version<span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>isbn <span class="token operator">=</span> isbn<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>透過把共用的一些公共屬性拉出管理，進一步節省整體記憶體的消耗量，也讓每個創建的物件得到最大程度的覆用，改寫後即使我們連續創建 5 台 iphoneX 128g，也不會在每個物件裡產生多餘的重複屬性佔用記憶體空間了</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> iphoneX_1 <span class="token operator">=</span> <span class="token function">createIphone</span><span class="token punctuation">(</span><span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;128g&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;x-22345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> iphoneX_2 <span class="token operator">=</span> <span class="token function">createIphone</span><span class="token punctuation">(</span><span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;128g&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;x-32345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">createIphone</span><span class="token punctuation">(</span><span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;128g&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;x-42345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">createIphone</span><span class="token punctuation">(</span><span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;128g&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;x-52345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">createIphone</span><span class="token punctuation">(</span><span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;128g&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;x-62345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iphoneX_1<span class="token punctuation">.</span>type <span class="token operator">===</span> iphoneX_2<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),t(p,{hashtags:"design,pattern,flyweight"}),s[2]||(s[2]=n("h2",{id:"結論",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#結論"},[n("span",null,"結論")])],-1)),s[3]||(s[3]=n("p",null,[n("code",null,"Flyweight Pattern"),a(" 對於應付容易造成 RAM 資源耗盡的，大量創建物件場景很好用，可有效降低佔用的記憶體空間，上面的範例只是方便展示，實際在 Javascript 中也可以很容易透過 "),n("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",target:"_blank",rel:"noopener noreferrer"},"prototypal inheritance"),a(" 來實現，然而隨著現代 RAM 的空間動輒到 GB 等級，使得 "),n("code",null,"Flyweight Pattern"),a(" 漸漸不是這麼地被重視與重要了")],-1)),s[4]||(s[4]=n("p",null,"今天分享就到這邊，下篇見拉～",-1))])}const m=e(u,[["render",r]]),v=JSON.parse('{"path":"/articles/memo/patterns/design/flyweight.html","title":"Flyweight Pattern","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1748788505000,"contributors":[{"name":"johnnywang","username":"johnnywang","email":"johnnywang@test.com","commits":2,"url":"https://github.com/johnnywang"},{"name":"Lindy Liao","username":"","email":"meiliao1207@gmail.com","commits":1}],"changelog":[{"hash":"f01bfa128b4d33fbeddb8abb1697b5391b273d28","time":1748788505000,"email":"meiliao1207@gmail.com","author":"Lindy Liao","message":"UPD"},{"hash":"59718f04d2b93892eb0905e3f6a7245e055a42b7","time":1677144926000,"email":"johnnywang@test.com","author":"johnnywang","message":"UPD"},{"hash":"7cf8258164b98a681baabbbc045f5a44b75720ea","time":1673953009000,"email":"johnnywang@test.com","author":"johnnywang","message":"UPD: add hoc &#x26; flyweight"}]},"filePathRelative":"articles/memo/patterns/design/flyweight.md"}');export{m as comp,v as data};
