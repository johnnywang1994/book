import{_ as c,r as e,o as i,c as l,a as s,d as n,e as a,f as t}from"./app-f87c10f2.js";const u={},k=n("h1",{id:"mediator-middleware-pattern",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mediator-middleware-pattern","aria-hidden":"true"},"#"),a(" Mediator/Middleware Pattern")],-1),r=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>大家好，我是 Johnny，今天要紀錄分享的是 Patterns 筆記系列的 <code>Mediator/Middleware Pattern</code></p><h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹" aria-hidden="true">#</a> 介紹</h2><ul><li>Mediator 模式指採用單一核心來取代組件多對多的複雜交互機制</li><li>Middleware 指程式中處理 request, response 的管道模式</li><li>Middleware Pattern 指微服務架構中描述請求路由(message routing)處理方式的模式，類似中央處理器決定哪個微服務將接收請求</li></ul><h2 id="比喻案例" tabindex="-1"><a class="header-anchor" href="#比喻案例" aria-hidden="true">#</a> 比喻案例</h2><p>想像成機長與塔台的關係，比起機長與機長彼此溝通，透過塔台統一整理所有機長的資訊並共享，最大化消除機長間溝通的效率與複雜度，所有機長只需要跟塔台溝通即可，不需個別維護與其他機長間的溝通</p><h2 id="mediator-範例" tabindex="-1"><a class="header-anchor" href="#mediator-範例" aria-hidden="true">#</a> Mediator 範例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>chatroom <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">send</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>chatroom<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>from<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ChatRoom</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>members <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">newMember</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newMember<span class="token punctuation">.</span>chatroom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>members<span class="token punctuation">[</span>newMember<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> newMember<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">send</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> from<span class="token punctuation">,</span> to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// single</span>
      to<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// broadcast</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> members <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> name <span class="token keyword">in</span> members<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>members<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">!==</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// exclude sender</span>
          members<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> chatroom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatRoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> johnny <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;johnny&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> kevin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;kevin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> chris <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;chris&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

chatroom<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>johnny<span class="token punctuation">)</span><span class="token punctuation">;</span>
chatroom<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>kevin<span class="token punctuation">)</span><span class="token punctuation">;</span>
chatroom<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>chris<span class="token punctuation">)</span><span class="token punctuation">;</span>

johnny<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Kevin!&#39;</span><span class="token punctuation">,</span> kevin<span class="token punctuation">)</span><span class="token punctuation">;</span>
johnny<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello everyone!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
chris<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;When is meeting?&#39;</span><span class="token punctuation">,</span> johnny<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// johnny to kevin: Hello Kevin!</span>
<span class="token comment">// johnny to kevin: Hello everyone!</span>
<span class="token comment">// johnny to chris: Hello everyone!</span>
<span class="token comment">// chris to johnny: When is meeting?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="middleware-範例" tabindex="-1"><a class="header-anchor" href="#middleware-範例" aria-hidden="true">#</a> Middleware 範例</h2>`,9),d={href:"https://gist.github.com/darrenscerri/5c3b3dcbe4d370435cfa",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),v=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Middleware</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>go <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>go<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>go<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Middleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">logCurrentTime</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;log process&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">app1</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;my app 1 executed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">app2</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;my app 2 executed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

app
  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;app1&#39;</span><span class="token punctuation">,</span> logCurrentTime<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;app1&#39;</span><span class="token punctuation">,</span> app1<span class="token punctuation">)</span><span class="token punctuation">;</span>

app
  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;app2&#39;</span><span class="token punctuation">,</span> logCurrentTime<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;app2&#39;</span><span class="token punctuation">,</span> app2<span class="token punctuation">)</span><span class="token punctuation">;</span>

app
  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;combined&#39;</span><span class="token punctuation">,</span> logCurrentTime<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;combined&#39;</span><span class="token punctuation">,</span> app1<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;combined&#39;</span><span class="token punctuation">,</span> app2<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span>go<span class="token punctuation">.</span><span class="token function">combined</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;process end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// log process 2023-xx-xxTxx:xx:xx.xxxZ</span>
<span class="token comment">// my app 1 executed</span>
<span class="token comment">// my app 2 executed</span>
<span class="token comment">// process end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),b=t('<h2 id="結論" tabindex="-1"><a class="header-anchor" href="#結論" aria-hidden="true">#</a> 結論</h2><table><thead><tr><th>Pattern</th><th>Pros</th><th>Cons</th></tr></thead><tbody><tr><td>Mediator</td><td><ul><li>編寫簡單</li><li>程式解耦</li><li>減少深層子類</li></ul></td><td>Mediator 通常為了與所有的類保持緊密，自身結構將變得更複雜</td></tr><tr><td>Middleware</td><td><ul><li>簡化業務邏輯</li><li>保持跨系統訊息的完整性</li><li>應用範圍廣泛</li></ul></td><td><ul><li>開發成本高</li><li>特定情形下的效能問題</li></ul></td></tr></tbody></table><p>感謝大家觀看，我們下一篇見拉～～</p>',3);function h(f,g){const p=e("SocialBlock"),o=e("ExternalLinkIcon");return i(),l("div",null,[k,s(p,{hashtags:"design,pattern,mediator,middleware"}),r,n("ul",null,[n("li",null,[n("a",d,[a("middleware demo"),s(o)]),m,a(" 與 Mediator Pattern 非常類似，但 Middleware 通過單一入口強化了應用程式的組件連貫動作，可以讓相關組件、動作組成管道 pipeline 依序執行，並最大程度加強了組件間彼此共用的能力，管道中的組件不需要擔心某些前提事件是否已經被執行過，比如權限驗證功能")])]),v,s(p,{hashtags:"design,pattern,mediator,middleware"}),b])}const y=c(u,[["render",h],["__file","mediator-middleware.html.vue"]]);export{y as default};
