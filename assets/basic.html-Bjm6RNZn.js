import{_ as a,c as s,d as n,o as i}from"./app-BTOpo2wX.js";const t={};function d(c,e){return i(),s("div",null,e[0]||(e[0]=[n(`<h1 id="git-基礎使用-init-clone-add-commit-status-log" tabindex="-1"><a class="header-anchor" href="#git-基礎使用-init-clone-add-commit-status-log"><span>Git 基礎使用 - init, clone, add, commit, status, log</span></a></h1><h2 id="建立-local-倉庫" tabindex="-1"><a class="header-anchor" href="#建立-local-倉庫"><span>建立 local 倉庫</span></a></h2><p><code>git init</code> 將會建立一個名為 <code>.git</code> 的子資料夾，其中包含 Git 所有必需的倉儲檔案，</p><p>如果你的專案資料夾原本已經有檔案（不是空的），那麼建議你應該馬上追蹤這些原本就有的檔案，然後進行第一次提交。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ <span class="token function">git</span> init</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="clone-現有倉庫" tabindex="-1"><a class="header-anchor" href="#clone-現有倉庫"><span>clone 現有倉庫</span></a></h2><p><code>git clone</code> 這指令將會建立名為「test_1」的資料夾，並在這個資料夾下初始化一個 <code>.git</code> 資料夾，從遠端倉儲拉取所有資料，</p><p>並且取出（checkout）專案中最新的版本。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ <span class="token function">git</span> clone https://github.com/example/test_1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="檢查檔案狀態" tabindex="-1"><a class="header-anchor" href="#檢查檔案狀態"><span>檢查檔案狀態</span></a></h2><p><code>git status</code> 用來偵測哪些檔案處在什麼樣的狀態下的主要工具</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ <span class="token function">git</span> status</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>後綴加上 <code>-s</code> 或 <code>--short</code> 可以簡化輸出內容，</p><p>未追蹤的新檔案在開頭被標示為 ??、被加入預存區的新檔案被標為 A、已修改檔案則是 M 等等。</p><h2 id="開始追蹤、預存檔案" tabindex="-1"><a class="header-anchor" href="#開始追蹤、預存檔案"><span>開始追蹤、預存檔案</span></a></h2><p><code>git add</code> 是一個多重用途的指令——用來「開始追蹤」檔案、「預存」檔案以及做一些其它的事，</p><p>像是「標記合併衝突（merge-conflicted）檔案為已解決」。比起「把這個檔案加進專案」，</p><p>把它想成「把檔案內容加入下一個提交中」會比較容易理解。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>filename<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>當你在 add 預存檔案後，對已預存的檔案進行其他修改，此時在用 <code>git status</code> 查看，會發現他同時出現在已預存、未預存中，</p><p>切記！如果你在 git add 後修改檔案，你必需再次執行 git add 來預存最新版的檔案。</p><h2 id="忽略不需要的檔案" tabindex="-1"><a class="header-anchor" href="#忽略不需要的檔案"><span>忽略不需要的檔案</span></a></h2><p>通常你會有一類檔案不想讓 Git 自動加入，也不希望它們被顯示為未追蹤，這些通常是自動產生的檔案，</p><p>例如：日誌檔案或者編譯系統產生的檔案；在這情況下，你可以新建一個名為 .gitignore 的檔案，</p><p>在該檔中列舉符合這些檔名的模式（pattern）。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ <span class="token function">cat</span> .gitignore</span>
<span class="line">node_modules</span>
<span class="line">dist</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="提交修改" tabindex="-1"><a class="header-anchor" href="#提交修改"><span>提交修改</span></a></h2><p>現在你的預存區已被建構成你想要的，你可以開始提交你的變更；記住：任何未預暫存的檔案——新增的、已修改的，</p><p>自從你編輯它們卻尚未用 git add 預存的檔案將不會納入本次的提交中。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ <span class="token function">git</span> commit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>這麼做會啟動你選定的編輯器，並請求輸入該次提交的內容，實作上，常會加入後綴 <code>-m</code> 直接添加。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Init repo&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果你想跳過預存區，Git 提供了一個簡易的捷徑， 在 <code>git commit</code> 命令加上 <code>-a</code> 選項，</p><p>使 Git 在提交前自動預存所有已追蹤的檔案，讓你略過 git add 步驟。很方便，但請小心，有時候它會納入你並不想要的變更。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">-a</span> <span class="token parameter variable">-m</span> <span class="token string">&quot;Init repo&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果提交後馬上發現有個小錯誤要修正時，除了再下一個 commit 之外，可以透過 <code>git commit --amend</code> 來對「最新提交」的 commit 進行修正取代，注意，--amend 是新建一個 commit 取代它而不是修正</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="檢視提交的歷史記錄" tabindex="-1"><a class="header-anchor" href="#檢視提交的歷史記錄"><span>檢視提交的歷史記錄</span></a></h2><p>專案目錄內執行 <code>git log</code> 將以反向的時間順序列出版本庫的提交歷史記錄——也就是說最新的提交會先被列出來。</p><ul><li><p><code>-p</code>：最有用的選項之一，用來顯示每筆提交所做的修改內容。</p></li><li><p><code>-2</code>：限制只輸出最後兩筆提交內容。</p></li><li><p><code>--oneline</code>：壓縮紀錄為一行，對於檢視大量的提交時很有用。</p></li><li><p><code>--graph</code>：會附加一個還不錯的 ASCII 圖形用來顯示分支及合併的歷史。</p></li></ul><p>常使用以下指令綜觀整個歷史紀錄</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">$ <span class="token function">git</span> log <span class="token parameter variable">--color</span> <span class="token parameter variable">--decorate</span> <span class="token parameter variable">--oneline</span> <span class="token parameter variable">--graph</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,42)]))}const p=a(t,[["render",d]]),o=JSON.parse('{"path":"/articles/git/basic.html","title":"Git 基礎使用 - init, clone, add, commit, status, log","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1648521821000,"contributors":[{"name":"Johnny Wang","username":"","email":"wangj@garena.com","commits":1},{"name":"johnnywang1994","username":"johnnywang1994","email":"johnny29621189@kimo.com","commits":3,"url":"https://github.com/johnnywang1994"}],"changelog":[{"hash":"71ccb7693345c8ddc2f554e00f8a0ce73af2b783","time":1648521821000,"email":"johnny29621189@kimo.com","author":"johnnywang1994","message":"UPD: upgrade to v2"},{"hash":"0a0cca98f1fd6ae86765f73c526eba906ed1e4de","time":1637656663000,"email":"johnny29621189@kimo.com","author":"johnnywang1994","message":"UPD: update git diff"},{"hash":"ed5c90d340759d0e74011a16ad94a0269a4ee528","time":1630549901000,"email":"johnny29621189@kimo.com","author":"johnnywang1994","message":"UPD: update git md"},{"hash":"51e618d93d4f837fbce25a1e1f0a9783cbc46b6a","time":1624012650000,"email":"wangj@garena.com","author":"Johnny Wang","message":"INIT"}]},"filePathRelative":"articles/git/basic.md"}');export{p as comp,o as data};
