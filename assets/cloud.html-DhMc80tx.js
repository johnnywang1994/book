import{_ as s,c as a,d as e,o as t}from"./app-DSyX4Wk3.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="parse-cloud-code-章節" tabindex="-1"><a class="header-anchor" href="#parse-cloud-code-章節"><span>Parse Cloud Code 章節</span></a></h1><ul><li><a href="https://docs.parseplatform.org/cloudcode/guide/" target="_blank" rel="noopener noreferrer">Link</a></li></ul><p>預設來說，Parse Cloud 環境入口為 <code>./cloud/main.js</code>，路徑可以透過 parse server options 設定</p><h2 id="cloud-functions" tabindex="-1"><a class="header-anchor" href="#cloud-functions"><span>Cloud Functions</span></a></h2><ul><li><a href="https://docs.parseplatform.org/cloudcode/guide/#cloud-functions" target="_blank" rel="noopener noreferrer">Link</a> Cloud Function 定義由 <code>Parse.Cloud.define</code> 處理，因為是在 Parse 環境下，所以可以直接調用 Parse 相關功能，比如下面範例</li></ul><h3 id="創建-cloud-code-function" tabindex="-1"><a class="header-anchor" href="#創建-cloud-code-function"><span>創建 Cloud Code Function</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;averageStars&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&#39;Review&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&#39;movie&#39;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>params<span class="token punctuation">.</span>movie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> results<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    sum <span class="token operator">+=</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;stars&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> sum <span class="token operator">/</span> results<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="執行-cloud-code-function" tabindex="-1"><a class="header-anchor" href="#執行-cloud-code-function"><span>執行 Cloud Code Function</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> params <span class="token operator">=</span>  <span class="token punctuation">{</span> <span class="token literal-property property">movie</span><span class="token operator">:</span> <span class="token string">&quot;The Matrix&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> ratings <span class="token operator">=</span> <span class="token keyword">await</span> Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&quot;averageStars&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="request-物件" tabindex="-1"><a class="header-anchor" href="#request-物件"><span>Request 物件</span></a></h3><ul><li>params: 傳進 function 的參數</li><li>user: 當前調用的 User</li><li>master: 是否透過 <code>masterKey</code> 調用</li></ul><h3 id="限制條件" tabindex="-1"><a class="header-anchor" href="#限制條件"><span>限制條件</span></a></h3><p>限制傳入參數必須有 movie，並且只有登入用戶能調用此 function</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;averageStars&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...same above</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">fields</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;movie&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">requireUser</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&quot;averageStars&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;Review&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;movie&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>params<span class="token punctuation">.</span>movie<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token keyword">return</span> sum <span class="token operator">/</span> results<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">fields</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">movie</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">options</span><span class="token operator">:</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> val<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&quot;Movie must be less than 20 characters&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">requireUserKeys</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">accType</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token string">&#39;reviewer&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&#39;Only reviewers can get average stars&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常見-options" tabindex="-1"><a class="header-anchor" href="#常見-options"><span>常見 options</span></a></h4><ul><li><a href="https://docs.parseplatform.org/cloudcode/guide/#implementing-cloud-function-validation" target="_blank" rel="noopener noreferrer">Link</a></li><li>requireMaster</li><li>requireUser</li><li>validateMasterKey</li><li>fields</li><li>requireAnyUserRoles</li><li>requireAllUserRoles</li><li>requireUserKeys</li></ul><p>更多限制方式可<a href="https://docs.parseplatform.org/cloudcode/guide/#more-advanced-validation" target="_blank" rel="noopener noreferrer">參考這邊</a></p><h4 id="validation-函數檢驗" tabindex="-1"><a class="header-anchor" href="#validation-函數檢驗"><span>Validation 函數檢驗</span></a></h4><p>當一般 options 無法滿足你的檢驗需求時，你可以傳入一個 function 對其進行更詳細的檢驗，也提升檢驗邏輯的複用能力</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">validationRules</span> <span class="token operator">=</span> <span class="token parameter">request</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>master<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span>user <span class="token operator">||</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id <span class="token operator">!==</span> <span class="token string">&#39;masterUser&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token string">&#39;Unauthorized&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;adminFunction&#39;</span><span class="token punctuation">,</span> <span class="token parameter">request</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do admin code here, confident that request.user.id is masterUser, or masterKey is provided</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> validationRules<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;adminFunctionTwo&#39;</span><span class="token punctuation">,</span> <span class="token parameter">request</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// do admin code here, confident that request.user.id is masterUser, or masterKey is provided</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> validationRules<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>validation 函數會在 Cloud Code Function 前執行，可以使用 async 或 promise 型態的檢驗函數，但盡量確保檢驗過程的簡短，讓 Cloud Code Function 能更快被執行</li></ul><h2 id="cloud-jobs" tabindex="-1"><a class="header-anchor" href="#cloud-jobs"><span>Cloud Jobs</span></a></h2><ul><li><a href="https://docs.parseplatform.org/cloudcode/guide/#cloud-jobs" target="_blank" rel="noopener noreferrer">Link</a></li></ul><p>有時您想執行長時間運行的函數，並且不想等待回應。Cloud Jobs 就是為此而生的。</p><h3 id="創建-job" tabindex="-1"><a class="header-anchor" href="#創建-job"><span>創建 Job</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">job</span><span class="token punctuation">(</span><span class="token string">&quot;myJob&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// params: 傳入參數</span></span>
<span class="line">  <span class="token comment">// headers: 觸發 job 的請求 headers</span></span>
<span class="line">  <span class="token comment">// log: 傳入 request 的 logger</span></span>
<span class="line">  <span class="token comment">// message: 更新 job 狀態的函數</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> params<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> log<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> request<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">message</span><span class="token punctuation">(</span><span class="token string">&quot;I just started&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">doSomethingVeryLong</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="執行-job" tabindex="-1"><a class="header-anchor" href="#執行-job"><span>執行 Job</span></a></h3><p>執行 Job 必須以 <code>master</code> 權限進行，注意 url 結構是以綁定的 parse server 位置中的</p><ul><li><code>/[parse-mount-path]/jobs/[job-name]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&#39;X-Parse-Application-Id: appId&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;X-Parse-Master-Key: masterKey&#39;</span> https://my-parse-server.com/parse/jobs/myJob</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="查看-job" tabindex="-1"><a class="header-anchor" href="#查看-job"><span>查看 Job</span></a></h3><p>在 Parse Dashboard 中能夠查看，或是使用 <code>masterKey</code> 對 <code>_JobStatus</code> class 進行 query</p><h2 id="save-triggers" tabindex="-1"><a class="header-anchor" href="#save-triggers"><span>Save Triggers</span></a></h2><ul><li><a href="https://docs.parseplatform.org/cloudcode/guide/#save-triggers" target="_blank" rel="noopener noreferrer">Link</a> 當我們想對資料格式做些特殊處理時，如果每一次都要單獨寫一遍非常無意義，此時可以使用 <code>save triggers</code> 對資料的寫入前、寫入後做特定的處理</li></ul><h3 id="validation" tabindex="-1"><a class="header-anchor" href="#validation"><span>validation</span></a></h3><p>以下範例在寫入評價前檢查 <code>stars</code> 數量是否 valid</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">beforeSave</span><span class="token punctuation">(</span><span class="token string">&#39;Review&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">fields</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">stars</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">options</span><span class="token operator">:</span> <span class="token parameter">stars</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> stars <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> stars <span class="token operator">=</span><span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&#39;Your review must be between one and five stars&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果函數拋出異常，Review 對象將不會被保存，客戶端會報錯。如果沒有拋出任何東西，對象將被正常保存。</p><h3 id="modifying" tabindex="-1"><a class="header-anchor" href="#modifying"><span>modifying</span></a></h3><p>或是在資料儲存寫入前進行修改，以下範例確保存入的 <code>comment</code> 欄位長度在 140 字元內</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">beforeSave</span><span class="token punctuation">(</span><span class="token string">&quot;Review&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// original: 保存物件原本的值，若為新物件則為不存在</span></span>
<span class="line">  <span class="token comment">// object: 即將保存的物件</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> object<span class="token punctuation">,</span> original <span class="token punctuation">}</span> <span class="token operator">=</span> request</span>
<span class="line">  <span class="token keyword">const</span> comment <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;comment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>comment<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">140</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Truncate and add a ...</span></span>
<span class="line">    object<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;comment&quot;</span><span class="token punctuation">,</span> comment<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="predefined-class" tabindex="-1"><a class="header-anchor" href="#predefined-class"><span>predefined class</span></a></h3><p>對於 Parse 預定義的內建 class，請直接傳入 <code>Parse.User</code> 這種方式，而不是字串</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">beforeSave</span><span class="token punctuation">(</span>Parse<span class="token punctuation">.</span>User<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// code here</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// Validation Object or Validation Function</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aftersave" tabindex="-1"><a class="header-anchor" href="#aftersave"><span>afterSave</span></a></h3><p>前面都是在儲存前做事情，我們也可以使用 <code>afterSave</code> 在物件存入後進行操作，通常用於較為<code>冗長的操作</code>，不希望此操作影響到物件儲存的情況下可以考慮使用，例如下面範例在 <code>Comment</code> 物件存入後，對所屬的 <code>Post</code> 物件 comment 欄位加值</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">afterSave</span><span class="token punctuation">(</span><span class="token string">&quot;Comment&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;Post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  query<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>object<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      post<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string">&quot;comments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> post<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Got an error &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面的動作實際上在完成前就會先返回使用者，即使在 <code>post.save()</code> 時發生錯誤，用戶也不會被通知，錯誤可以在 Cloud Code Log 中看到，為了在 afterSave 處理程序完成之前回應客戶端，您的處理程序可能不可返回 promise，並且不要使用 async/await。</p></blockquote><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>Context</span></a></h3><p>context 是一個讓開發者能在不同時機使用的物件空間，context 會從 <code>beforeSave</code> 處理程序傳遞到 <code>afterSave</code> 處理程序。</p><h2 id="delete-triggers" tabindex="-1"><a class="header-anchor" href="#delete-triggers"><span>Delete Triggers</span></a></h2><ul><li><a href="https://docs.parseplatform.org/cloudcode/guide/#delete-triggers" target="_blank" rel="noopener noreferrer">Link</a> 在刪除物件之前運行自定義 Cloud Code。您可以使用 <code>beforeDelete</code> 方法執行此操作。</li></ul><h3 id="beforedelete" tabindex="-1"><a class="header-anchor" href="#beforedelete"><span>beforeDelete</span></a></h3><p>以下範例在刪除 <code>Album</code> 物件之前，檢查其中是否還有 photos 存在，當錯誤拋出時，album 將不會被誤刪除</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">beforeDelete</span><span class="token punctuation">(</span><span class="token string">&quot;Album&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> object <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;Photo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;album&quot;</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">useMasterKey</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token string">&quot;Can&#39;t delete album if it still has photos.&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="afterdelete" tabindex="-1"><a class="header-anchor" href="#afterdelete"><span>afterDelete</span></a></h3><p>以下範例在刪除 <code>Post</code> 後，需要一次將 post 的 <code>Comment</code> 全部刪除</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">afterDelete</span><span class="token punctuation">(</span><span class="token string">&quot;Post&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> object <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&quot;Comment&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  query<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 這邊不使用 async/await 可以加快回應使用者的時間，此操作不影響使用者後續動作</span></span>
<span class="line">  query<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>Parse<span class="token punctuation">.</span>Object<span class="token punctuation">.</span>destroyAll<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error finding related comments &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find-triggers" tabindex="-1"><a class="header-anchor" href="#find-triggers"><span>Find Triggers</span></a></h2><ul><li><a href="https://docs.parseplatform.org/cloudcode/guide/#find-triggers" target="_blank" rel="noopener noreferrer">Link</a> 在某些情況下，可能希望轉換傳入查詢、添加額外或增加默認限制</li></ul><h3 id="beforefind-or-afterfind" tabindex="-1"><a class="header-anchor" href="#beforefind-or-afterfind"><span>beforeFind or afterFind</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Properties available</span></span>
<span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">beforeFind</span><span class="token punctuation">(</span><span class="token string">&#39;MyObject&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> query <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span> <span class="token comment">// the Parse.Query</span></span>
<span class="line">  <span class="token keyword">let</span> user <span class="token operator">=</span> req<span class="token punctuation">.</span>user<span class="token punctuation">;</span> <span class="token comment">// the user</span></span>
<span class="line">  <span class="token keyword">let</span> triggerName <span class="token operator">=</span> req<span class="token punctuation">.</span>triggerName<span class="token punctuation">;</span> <span class="token comment">// beforeFind</span></span>
<span class="line">  <span class="token keyword">let</span> isMaster <span class="token operator">=</span> req<span class="token punctuation">.</span>master<span class="token punctuation">;</span> <span class="token comment">// if the query is run with masterKey</span></span>
<span class="line">  <span class="token keyword">let</span> isCount <span class="token operator">=</span> req<span class="token punctuation">.</span>count<span class="token punctuation">;</span> <span class="token comment">// if the query is a count operation</span></span>
<span class="line">  <span class="token keyword">let</span> logger <span class="token operator">=</span> req<span class="token punctuation">.</span>log<span class="token punctuation">;</span> <span class="token comment">// the logger</span></span>
<span class="line">  <span class="token keyword">let</span> installationId <span class="token operator">=</span> req<span class="token punctuation">.</span>installationId<span class="token punctuation">;</span> <span class="token comment">// The installationId</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Returning a different query</span></span>
<span class="line">Parse<span class="token punctuation">.</span>Cloud<span class="token punctuation">.</span><span class="token function">beforeFind</span><span class="token punctuation">(</span><span class="token string">&#39;MyObject&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> query <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">let</span> otherQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parse<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span><span class="token string">&#39;MyObject&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  otherQuery<span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> Parse<span class="token punctuation">.</span>Query<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> otherQuery<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="security" tabindex="-1"><a class="header-anchor" href="#security"><span>Security</span></a></h2><p>要覆蓋對象和類訪問權限，您可以設置 <code>useMasterKey: true</code> 如果請求接受主密鑰選項，但需要注意，使用 master 權限卉返回物件所有資源，在將其發送到客戶端之前，您可能希望刪除客戶端不應訪問的物件屬性。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">query<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">useMasterKey</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span>Config</span></a></h2><p>默認情況下，Parse Config 參數可以公開讀取，如果參數包含不應向客戶端公開的敏感信息，則可能不希望這樣做</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 藉由添加 requireMasterKey 在 Config 欄位，可以添加 master 權限的 config 設定</span></span>
<span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token keyword">await</span> Parse<span class="token punctuation">.</span>Config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">useMasterKey</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> privateParam <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;privateParam&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69)]))}const i=s(p,[["render",o],["__file","cloud.html.vue"]]),u=JSON.parse('{"path":"/articles/memo/parse/cloud.html","title":"Parse Cloud Code 章節","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"Cloud Functions","slug":"cloud-functions","link":"#cloud-functions","children":[{"level":3,"title":"創建 Cloud Code Function","slug":"創建-cloud-code-function","link":"#創建-cloud-code-function","children":[]},{"level":3,"title":"執行 Cloud Code Function","slug":"執行-cloud-code-function","link":"#執行-cloud-code-function","children":[]},{"level":3,"title":"Request 物件","slug":"request-物件","link":"#request-物件","children":[]},{"level":3,"title":"限制條件","slug":"限制條件","link":"#限制條件","children":[]}]},{"level":2,"title":"Cloud Jobs","slug":"cloud-jobs","link":"#cloud-jobs","children":[{"level":3,"title":"創建 Job","slug":"創建-job","link":"#創建-job","children":[]},{"level":3,"title":"執行 Job","slug":"執行-job","link":"#執行-job","children":[]},{"level":3,"title":"查看 Job","slug":"查看-job","link":"#查看-job","children":[]}]},{"level":2,"title":"Save Triggers","slug":"save-triggers","link":"#save-triggers","children":[{"level":3,"title":"validation","slug":"validation","link":"#validation","children":[]},{"level":3,"title":"modifying","slug":"modifying","link":"#modifying","children":[]},{"level":3,"title":"predefined class","slug":"predefined-class","link":"#predefined-class","children":[]},{"level":3,"title":"afterSave","slug":"aftersave","link":"#aftersave","children":[]},{"level":3,"title":"Context","slug":"context","link":"#context","children":[]}]},{"level":2,"title":"Delete Triggers","slug":"delete-triggers","link":"#delete-triggers","children":[{"level":3,"title":"beforeDelete","slug":"beforedelete","link":"#beforedelete","children":[]},{"level":3,"title":"afterDelete","slug":"afterdelete","link":"#afterdelete","children":[]}]},{"level":2,"title":"Find Triggers","slug":"find-triggers","link":"#find-triggers","children":[{"level":3,"title":"beforeFind or afterFind","slug":"beforefind-or-afterfind","link":"#beforefind-or-afterfind","children":[]}]},{"level":2,"title":"Security","slug":"security","link":"#security","children":[]},{"level":2,"title":"Config","slug":"config","link":"#config","children":[]}],"git":{"updatedTime":1658746476000,"contributors":[{"name":"JohnnyWang","email":"johnnywang@test.com","commits":2},{"name":"JohnnyWang","email":"johnnywang@TW-LW13987-M.local","commits":1}]},"filePathRelative":"articles/memo/parse/cloud.md"}');export{i as comp,u as data};
