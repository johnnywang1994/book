import{_ as t,c as p,b as n,a as e,d as c,o as l,r as o}from"./app-RvPLl2RM.js";const i={};function u(r,s){const a=o("SocialBlock");return l(),p("div",null,[s[0]||(s[0]=n("h1",{id:"react-usestate-取得最新值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#react-usestate-取得最新值"},[n("span",null,"React useState 取得最新值")])],-1)),e(a,{hashtags:"react,javascript,useState,setState,promise"}),s[1]||(s[1]=c(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>嗨~大家好，我是 Johnny。最近在研究 React Hooks 的一些底層機制，包含像是狀態更新、生命週期、Hooks 的整個創建到更新的流程(相關文章都記錄在<a href="https://johnnywang1994.github.io/book/articles/memo/learning.html#react" target="_blank" rel="noopener noreferrer">我的閱讀紀錄</a>的 React 章節中)，而其中最讓我感興趣的是 <code>useState</code> 中的<code>狀態更新機制</code></p><h2 id="目標" tabindex="-1"><a class="header-anchor" href="#目標"><span>目標</span></a></h2><p>當調用如下方式更新狀態時，因為 <code>setState</code> 本身是非同步的，React 內部會在 hooks 構建階段才重新取值放到 <code>memoizedState</code> 去 render 畫面，在原來的 function 的 scope 中我們拿到的還是舊的值，若我們希望能拿到更新後的狀態做事情時，就必須用 <code>useEffect</code> 綁定 deps，當觸發一次 increment 時，在 useEffect 階段才會拿到新的狀態</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">// 0</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;effect trigger&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token comment">// effect trigger 1</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;rerender&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>h3 onClick<span class="token operator">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span><span class="token operator">&gt;</span>Hi<span class="token punctuation">,</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上網查了下發現許多解法都是圍繞著過去 class component 時期的 callback，製作像是 <code>useCallbackState</code> 這種 hooks 來處理</p><h3 id="第一種做法-usecallbackstate" tabindex="-1"><a class="header-anchor" href="#第一種做法-usecallbackstate"><span>第一種做法 useCallbackState</span></a></h3><p>第一種 callback 的寫法按照上面的 <code>useEffect</code> 作法如下</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">useCallbackState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> callbackRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleSetState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">updatedState<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    callbackRef<span class="token punctuation">.</span>current <span class="token operator">=</span> cb</span>
<span class="line">    <span class="token function">setState</span><span class="token punctuation">(</span>updatedState<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callbackRef<span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      callbackRef<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span></span>
<span class="line">      callbackRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">undefined</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> handleSetState<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>useRef</code> 把 callback 函數儲存起來，並在 <code>useEffect</code> 中調用執行，但這種作法的執行結果如下，可以明顯看到會在 rerender 後才執行</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// rerender</span></span>
<span class="line"><span class="token comment">// 1</span></span>
<span class="line"><span class="token comment">// effect trigger 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二種做法-usecallbackstate" tabindex="-1"><a class="header-anchor" href="#第二種做法-usecallbackstate"><span>第二種做法 useCallbackState</span></a></h3><p>為了保證我們的 callback 是在正確的時間點被執行，第二種比起第一種做法：<code>不必等到狀態 commit 後才執行，能保有更完整的生命週期正確性</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">useCallbackState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleSetState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">updatedState<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setState</span><span class="token punctuation">(</span>updatedState<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">cb</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> prevState</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> handleSetState<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>這個做法是根據<a href="https://stackoverflow.com/a/65757628/10300120" target="_blank" rel="noopener noreferrer">這篇討論</a>中提到的 <code>functional setState</code> 串聯特性，每一個 setState 的 function prevState 都必然是前面狀態更新後的回傳</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 1</span></span>
<span class="line"><span class="token comment">// rerender</span></span>
<span class="line"><span class="token comment">// effect trigger 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第三種作法-useasyncstate" tabindex="-1"><a class="header-anchor" href="#第三種作法-useasyncstate"><span>第三種作法 useAsyncState</span></a></h3><p>這種作法跟第一種很像，只是把 callback 替換成 promise resolve，並且因為 promise resolve 實際上是比同步執行慢半拍的，所以實際實行時機甚至比其他 useEffect 更晚</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">useAsyncState</span><span class="token punctuation">(</span><span class="token parameter">initialValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> resolveCb <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleSetState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">updatedState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// force previous promise resolved</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> resolveCb<span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        resolveCb<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span>updatedState<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      resolveCb<span class="token punctuation">.</span>current <span class="token operator">=</span> resolve</span>
<span class="line">      <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setState</span><span class="token punctuation">(</span>updatedState<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        resolveCb<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">undefined</span></span>
<span class="line">        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> resolveCb<span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      resolveCb<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span></span>
<span class="line">      resolveCb<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">undefined</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> handleSetState<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>執行順序如下</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// rerender</span></span>
<span class="line"><span class="token comment">// effect trigger 1</span></span>
<span class="line"><span class="token comment">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="結論" tabindex="-1"><a class="header-anchor" href="#結論"><span>結論</span></a></h2><ul><li>Promise 雖然不會造成 callback hell，但後續動作調用時機會被往後<code>延到其他 useEffect 之後</code></li><li>Callback 分成兩種做法 <ul><li>第一種：傳遞 callback 函數並以 <code>useRef</code> 儲存，並在 <code>useEffect</code> 中調用執行，這種作法也是等到 <code>commit</code> 狀態 <code>rerender</code> 後才執行</li><li>第二種：運用 <code>functional setState</code> 狀態串聯傳遞的原理，連續調用兩次 <code>setState</code> 並將 <code>callback</code> 在第二次 <code>setState</code> 中調用，這種做法不用等到狀態 <code>commit</code> 階段 <code>rerender</code> 結束，會在 <code>commit</code> 狀態前就依序執行</li></ul></li></ul><p>感謝大家觀看，下篇文章見拉大家!~ =V=</p>`,24)),e(a,{hashtags:"react,javascript,useState,setState,promise"}),s[2]||(s[2]=n("h2",{id:"參考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#參考"},[n("span",null,"參考")])],-1)),s[3]||(s[3]=n("ul",null,[n("li",null,[n("a",{href:"https://stackoverflow.com/a/65757628/10300120",target:"_blank",rel:"noopener noreferrer"},"how-to-use-setstate-callback-on-react-hooks")])],-1))])}const k=t(i,[["render",u],["__file","react-use-state.html.vue"]]),v=JSON.parse('{"path":"/articles/js/react-use-state.html","title":"React useState 取得最新值","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"目標","slug":"目標","link":"#目標","children":[{"level":3,"title":"第一種做法 useCallbackState","slug":"第一種做法-usecallbackstate","link":"#第一種做法-usecallbackstate","children":[]},{"level":3,"title":"第二種做法 useCallbackState","slug":"第二種做法-usecallbackstate","link":"#第二種做法-usecallbackstate","children":[]},{"level":3,"title":"第三種作法 useAsyncState","slug":"第三種作法-useasyncstate","link":"#第三種作法-useasyncstate","children":[]}]},{"level":2,"title":"結論","slug":"結論","link":"#結論","children":[]},{"level":2,"title":"參考","slug":"參考","link":"#參考","children":[]}],"git":{"updatedTime":1653230048000,"contributors":[{"name":"johnnywang","email":"johnny29621189@kimo.com","commits":2,"url":"https://github.com/johnnywang"}]},"filePathRelative":"articles/js/react-use-state.md"}');export{k as comp,v as data};
