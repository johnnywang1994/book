import{_ as p,c as l,b as n,a as e,d as t,o as i,r as c}from"./app-bao44jos.js";const r={};function o(d,s){const a=c("SocialBlock");return i(),l("div",null,[s[0]||(s[0]=n("h1",{id:"正則表達式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#正則表達式"},[n("span",null,"正則表達式")])],-1)),e(a,{hashtags:"javascript,regexp"}),s[1]||(s[1]=t(`<p>這篇主要用來記錄我在網路上學習正則的過程中學習的一些筆記跟方法～</p><p>內容不包含全部正則的基礎介紹，僅針對個人認為較為重要、特殊、神奇的部分進行記錄</p><h2 id="重要概念" tabindex="-1"><a class="header-anchor" href="#重要概念"><span>重要概念</span></a></h2><p>正則表達式是 <code>匹配模式</code>，要馬<code>匹配字符</code>，要馬<code>匹配位置</code></p><h2 id="匹配位置" tabindex="-1"><a class="header-anchor" href="#匹配位置"><span>匹配位置</span></a></h2><p>舉個例子，數字千位數<code>,</code>分割就是匹配位置</p><p>常見的匹配位置語法有：<br> ^、$、\\b、\\B、?=p、(?!p)、(?&lt;=p)、(?&lt;!p)</p><h3 id="匹配開頭" tabindex="-1"><a class="header-anchor" href="#匹配開頭"><span>^ - 匹配開頭</span></a></h3><h3 id="匹配結尾" tabindex="-1"><a class="header-anchor" href="#匹配結尾"><span>$ - 匹配結尾</span></a></h3><h3 id="b-匹配-block" tabindex="-1"><a class="header-anchor" href="#b-匹配-block"><span>\\b - 匹配 block</span></a></h3><p>匹配下列三種位置：</p><ol><li>\\w 和 \\W 之間</li><li>^ 和 \\w 之間</li><li>\\w 和 $ 之間</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string">&#39;file.mp4&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;❤️&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ❤️file❤️.❤️mp4❤️</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="p-匹配符合-p-格式之前方位置" tabindex="-1"><a class="header-anchor" href="#p-匹配符合-p-格式之前方位置"><span>(?=p) - 匹配符合 p 格式之前方位置</span></a></h3><p>也稱<code>正向先行斷言</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string">&#39;Good Movie&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=Good)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;❤️&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ❤️Good Movie</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="p-匹配符合-p-以外的位置" tabindex="-1"><a class="header-anchor" href="#p-匹配符合-p-以外的位置"><span>(?!p) - 匹配符合 (?=p) 以外的位置</span></a></h3><p>也稱<code>負向先行斷言</code></p><h3 id="p-匹配符合-p-格式之後方位置" tabindex="-1"><a class="header-anchor" href="#p-匹配符合-p-格式之後方位置"><span>(?&lt;=p) - 匹配符合 p 格式之後方位置</span></a></h3><h3 id="p-匹配-p-以外的位置" tabindex="-1"><a class="header-anchor" href="#p-匹配-p-以外的位置"><span>(?&lt;!p) - 匹配 (?&lt;=p) 以外的位置</span></a></h3><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h4><ol><li>數字千分位分割 匹配每 3 個數字的前方位置，除了開頭以外</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string">&#39;123456789&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^)(?=(\\d{3})+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 123,456,789</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>密碼驗證<br> 需滿足三個條件</li></ol><ul><li>長度介於 6-12 位</li><li>由數字、小寫、大寫字母組成</li><li>須至少包含兩種字符（數字+小寫, 數字+大寫...）</li></ul><h5 id="驗證長度" tabindex="-1"><a class="header-anchor" href="#驗證長度"><span>驗證長度</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> regLength <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z\\d]{6,12}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="驗證字符種類" tabindex="-1"><a class="header-anchor" href="#驗證字符種類"><span>驗證字符種類</span></a></h5><p>有4種排列組合，第四種包含在前三種內可忽略</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 數字+(小寫or大寫)</span></span>
<span class="line"><span class="token keyword">let</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?=.*\\d)((?=.*[a-z])|(?=.*[A-Z])))</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 小寫+大寫</span></span>
<span class="line"><span class="token keyword">let</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[a-z])(?=.*[A-Z])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 結合上面兩者</span></span>
<span class="line"><span class="token keyword">let</span> reg3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?=.*\\d)((?=.*[a-z])|(?=.*[A-Z])))|(?=.*[a-z])(?=.*[A-Z])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 加上長度驗證</span></span>
<span class="line"><span class="token keyword">let</span> regResult <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?=.*\\d)((?=.*[a-z])|(?=.*[A-Z])))|(?=.*[a-z])(?=.*[A-Z])^[a-zA-Z\\d]{6,12}$</span><span class="token regex-delimiter">/</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="匹配字符" tabindex="-1"><a class="header-anchor" href="#匹配字符"><span>匹配字符</span></a></h2><h3 id="模糊匹配" tabindex="-1"><a class="header-anchor" href="#模糊匹配"><span>模糊匹配</span></a></h3><p>分為橫向、縱向匹配兩種</p><h4 id="橫向匹配" tabindex="-1"><a class="header-anchor" href="#橫向匹配"><span>橫向匹配</span></a></h4><p>包含量詞 ?, +, *, {m,n} 等幾種實現方式</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab{2,5}c</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;abc abbc abbbc abbbbc abbbbbc abbbbbbc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [ &#39;abbc&#39;, &#39;abbbc&#39;, &#39;abbbbc&#39;, &#39;abbbbbc&#39; ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="縱向匹配" tabindex="-1"><a class="header-anchor" href="#縱向匹配"><span>縱向匹配</span></a></h3><p>透過 <code>字符組</code> 的方式配對</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a[123]b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span></span>
<span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;a0b a1b a2b a3b a4b&#39;</span></span>
<span class="line"></span>
<span class="line">str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [ &#39;a1b&#39;, &#39;a2b&#39;, &#39;a3b&#39; ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="範圍表示法" tabindex="-1"><a class="header-anchor" href="#範圍表示法"><span>範圍表示法</span></a></h3><p><code>[123456abcdefABCDEF] =&gt; [1-6a-fA-F]</code></p><h3 id="排除字符組" tabindex="-1"><a class="header-anchor" href="#排除字符組"><span>排除字符組</span></a></h3><p>與原字符組意義相法，將指定字符組作為反向不存在的驗證 <code>[^abc]</code></p><h3 id="簡寫字符" tabindex="-1"><a class="header-anchor" href="#簡寫字符"><span>簡寫字符</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">\\d <span class="token comment">// number</span></span>
<span class="line">\\<span class="token constant">D</span> <span class="token comment">// not number</span></span>
<span class="line">\\w <span class="token comment">// [0-9a-zA-Z_]</span></span>
<span class="line">\\<span class="token constant">W</span> <span class="token comment">// [^0-9a-zA-Z_]</span></span>
<span class="line">\\s <span class="token comment">// [\\t\\v\\n\\r\\f]</span></span>
<span class="line">\\<span class="token constant">S</span> <span class="token comment">// [^\\t\\v\\n\\r\\f]</span></span>
<span class="line"><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="量詞" tabindex="-1"><a class="header-anchor" href="#量詞"><span>量詞</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token number">1.</span> <span class="token punctuation">{</span>m<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token comment">// least m times</span></span>
<span class="line"><span class="token number">2.</span> <span class="token punctuation">{</span>m<span class="token punctuation">}</span> <span class="token comment">// m times</span></span>
<span class="line"><span class="token number">3.</span> <span class="token operator">?</span> <span class="token comment">// 0 or 1</span></span>
<span class="line"><span class="token number">4.</span> <span class="token operator">+</span> <span class="token comment">// least 1</span></span>
<span class="line"><span class="token number">5.</span> <span class="token operator">*</span> <span class="token comment">// least 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="貪婪匹配-惰性匹配" tabindex="-1"><a class="header-anchor" href="#貪婪匹配-惰性匹配"><span>貪婪匹配, 惰性匹配</span></a></h3><p>正則預設行為<code>貪婪匹配</code>，會盡可能多的匹配內容，在量詞後接上一個 <code>?</code> 即變化為<code>惰性匹配</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{2,5}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span></span>
<span class="line"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;123 1234 12345 123456&#39;</span></span>
<span class="line"><span class="token comment">// 貪婪匹配</span></span>
<span class="line">string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [ 123, 1234, 12345, 12345 ]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 惰性匹配</span></span>
<span class="line"><span class="token keyword">let</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{2,5}?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span></span>
<span class="line">string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [ 12, 12, 34, 12, 34, 12, 34, 56  ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>多選分支匹配為<code>惰性匹配</code>，當前面匹配成功時即停止，不會將後續分支也匹配</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">good|nice</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;good idea, nice try.&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [ &#39;good&#39;, &#39;nice&#39; ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">good|goodbye</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;goodbye~&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [&#39;good&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="案例-1" tabindex="-1"><a class="header-anchor" href="#案例-1"><span>案例</span></a></h4><ol><li>HTML string id 匹配 若沒有加上 <code>?</code> 惰性匹配，會連後面的 class 一起取出</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id=&quot;.*?&quot;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;&lt;div id=&quot;container&quot; class=&quot;main&quot;&gt;&lt;/div&gt;&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [&#39;id=&quot;container&quot;&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="括號" tabindex="-1"><a class="header-anchor" href="#括號"><span>括號</span></a></h2><p>括號幫助我們對匹配到的東西進行分組，以便後續進行引用、使用</p><h3 id="分組-capturing-parentheses" tabindex="-1"><a class="header-anchor" href="#分組-capturing-parentheses"><span>分組(Capturing Parentheses)</span></a></h3><p>量詞作用於整體</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&#39;ababa abbb ababab&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [&quot;abab&quot;, &quot;ab&quot;, &quot;ababab&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分支結構" tabindex="-1"><a class="header-anchor" href="#分支結構"><span>分支結構</span></a></h3><p>類似使用 || 的概念</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">I love (Mama|Dada)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="match-分組引用" tabindex="-1"><a class="header-anchor" href="#match-分組引用"><span>match 分組引用</span></a></h3><p>這是括號最強大的功能之一，可以提取匹配的資料進行使用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token string">&#39;2021-08-14&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [&quot;2021-08-14&quot;, &quot;2021&quot;, &quot;08&quot;, &quot;14&quot;, ...]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replace-資料替換" tabindex="-1"><a class="header-anchor" href="#replace-資料替換"><span>replace 資料替換</span></a></h3><p>運用 <code>$1,$2,...</code> 的方式對匹配到的資料進行替代</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 1.</span></span>
<span class="line"><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span></span>
<span class="line"><span class="token string">&#39;2021-08-14&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;$2/$3/$1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2.</span></span>
<span class="line"><span class="token string">&#39;2021-08-14&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$0<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> $2<span class="token punctuation">,</span> $3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> $2 <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> $3 <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> $1<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 08/14/2021</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非捕獲性括號-non-capturing-parentheses" tabindex="-1"><a class="header-anchor" href="#非捕獲性括號-non-capturing-parentheses"><span>非捕獲性括號(Non-Capturing Parentheses)</span></a></h3><p>找出匹配的格式，但不進行記憶</p><p>詳情範例請見<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-capturing-parentheses" target="_blank" rel="noopener noreferrer">MDN-Non-Capturing Parentheses</a></p><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><p>本篇文章主要為閱讀此篇文章學習的筆記，也歡迎前往看看原文章喔～</p><ul><li><a href="https://juejin.cn/post/7021672733213720613" target="_blank" rel="noopener noreferrer">就因为这三个知识点，我彻底学废了&quot;正则表达式&quot;</a></li></ul>`,76)),e(a,{hashtags:"javascript,regexp"})])}const k=p(r,[["render",o],["__file","regexp.html.vue"]]),g=JSON.parse('{"path":"/articles/memo/js/regexp.html","title":"正則表達式","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"重要概念","slug":"重要概念","link":"#重要概念","children":[]},{"level":2,"title":"匹配位置","slug":"匹配位置","link":"#匹配位置","children":[{"level":3,"title":"^ - 匹配開頭","slug":"匹配開頭","link":"#匹配開頭","children":[]},{"level":3,"title":"$ - 匹配結尾","slug":"匹配結尾","link":"#匹配結尾","children":[]},{"level":3,"title":"\\\\b - 匹配 block","slug":"b-匹配-block","link":"#b-匹配-block","children":[]},{"level":3,"title":"(?=p) - 匹配符合 p 格式之前方位置","slug":"p-匹配符合-p-格式之前方位置","link":"#p-匹配符合-p-格式之前方位置","children":[]},{"level":3,"title":"(?!p) - 匹配符合 (?=p) 以外的位置","slug":"p-匹配符合-p-以外的位置","link":"#p-匹配符合-p-以外的位置","children":[]},{"level":3,"title":"(?<=p) - 匹配符合 p 格式之後方位置","slug":"p-匹配符合-p-格式之後方位置","link":"#p-匹配符合-p-格式之後方位置","children":[]},{"level":3,"title":"(?<!p) - 匹配 (?<=p) 以外的位置","slug":"p-匹配-p-以外的位置","link":"#p-匹配-p-以外的位置","children":[]}]},{"level":2,"title":"匹配字符","slug":"匹配字符","link":"#匹配字符","children":[{"level":3,"title":"模糊匹配","slug":"模糊匹配","link":"#模糊匹配","children":[]},{"level":3,"title":"縱向匹配","slug":"縱向匹配","link":"#縱向匹配","children":[]},{"level":3,"title":"範圍表示法","slug":"範圍表示法","link":"#範圍表示法","children":[]},{"level":3,"title":"排除字符組","slug":"排除字符組","link":"#排除字符組","children":[]},{"level":3,"title":"簡寫字符","slug":"簡寫字符","link":"#簡寫字符","children":[]},{"level":3,"title":"量詞","slug":"量詞","link":"#量詞","children":[]},{"level":3,"title":"貪婪匹配, 惰性匹配","slug":"貪婪匹配-惰性匹配","link":"#貪婪匹配-惰性匹配","children":[]}]},{"level":2,"title":"括號","slug":"括號","link":"#括號","children":[{"level":3,"title":"分組(Capturing Parentheses)","slug":"分組-capturing-parentheses","link":"#分組-capturing-parentheses","children":[]},{"level":3,"title":"分支結構","slug":"分支結構","link":"#分支結構","children":[]},{"level":3,"title":"match 分組引用","slug":"match-分組引用","link":"#match-分組引用","children":[]},{"level":3,"title":"replace 資料替換","slug":"replace-資料替換","link":"#replace-資料替換","children":[]},{"level":3,"title":"非捕獲性括號(Non-Capturing Parentheses)","slug":"非捕獲性括號-non-capturing-parentheses","link":"#非捕獲性括號-non-capturing-parentheses","children":[]}]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{"updatedTime":1649601399000,"contributors":[{"name":"johnnywang","email":"johnny29621189@kimo.com","commits":1,"url":"https://github.com/johnnywang"},{"name":"johnnywang1994","email":"johnny29621189@kimo.com","commits":3,"url":"https://github.com/johnnywang1994"}]},"filePathRelative":"articles/memo/js/regexp.md"}');export{k as comp,g as data};
