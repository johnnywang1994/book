import{_ as o,c as i,d as s,a as c,b as a,e as n,r as l,o as r}from"./app-DPsCAi97.js";const h={};function d(p,e){const t=l("Mermaid");return r(),i("div",null,[e[0]||(e[0]=s('<h1 id="what-is-ac-acceptance-criteria-驗收條件" tabindex="-1"><a class="header-anchor" href="#what-is-ac-acceptance-criteria-驗收條件"><span>What is AC - Acceptance Criteria 驗收條件</span></a></h1><p>本篇為學習 AC 後的一些筆記，記錄在這也給大家參考～</p><h2 id="什麼是-ac" tabindex="-1"><a class="header-anchor" href="#什麼是-ac"><span>什麼是 AC</span></a></h2><p>Story 需要滿足客戶和 PO 所想要的狀況(conditions). 這些狀況由一堆敘述所組成, 每個敘述會有很清楚通過和失敗的標準, 讓我們可以度量是否滿足. 這堆敘述稱之為驗收條件</p><h2 id="什麼時候寫、誰寫" tabindex="-1"><a class="header-anchor" href="#什麼時候寫、誰寫"><span>什麼時候寫、誰寫？</span></a></h2><p>通常在 PO 列出 user story 時就要對應列出驗收條件，但讓 team 和 PO 共同討論得出的驗收條件，不僅能夠更全面的確保 <code>關鍵實例</code> 被包含，也能讓團隊 RD 在開發時有個明確可信賴的測試案例，可以遵循著進行測試，而不僅僅只是為了測試而隨便亂寫一通沒意義的測試</p><h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹"><span>介紹</span></a></h2><p>AC 前提中的 <code>Goal</code> + <code>Scope</code> 就是在確定產品中關鍵行為與範圍，並透過 <code>Given - 用戶行為</code> 來討論思考 <code>keyExamples</code> 得到共識，最後根據這些實例撰寫 <code>ExecutableSpec</code>，並最終經過驗證成為 Documentation</p><p>基本的驗收條件包含四大要素</p><ul><li>情境（Scenario）</li><li>假定（Given）</li><li>當（When）- 建議透過實例化案例幫助理解，給予具體的帶入參數，需注意不要進行目的不明確或重複的設定</li><li>然後（Then）</li></ul><h2 id="舉例" tabindex="-1"><a class="header-anchor" href="#舉例"><span>舉例</span></a></h2><p>假設今天產品有一個頁面功能是<code>查詢部門預算</code>，那麼整個功能驗收規劃會像下方這樣</p><h3 id="情境" tabindex="-1"><a class="header-anchor" href="#情境"><span><strong>情境</strong></span></a></h3><p>使用者進入查詢頁面</p><h3 id="假定" tabindex="-1"><a class="header-anchor" href="#假定"><span><strong>假定</strong></span></a></h3><p>使用者想輸入日期範圍來查詢部門預算</p><h3 id="當" tabindex="-1"><a class="header-anchor" href="#當"><span><strong>當</strong></span></a></h3><ol><li>輸入日期非整個月，只選擇了部分天數時</li><li>輸入日期範圍跨月份時</li><li>輸入日期格式錯誤時（eg. end 日期小於 start）</li><li>輸入日期中，某一月份尚無預算資料時</li><li>輸入日期中，某一月份預算無法整除月份天數時 ....etc</li></ol><h3 id="然後" tabindex="-1"><a class="header-anchor" href="#然後"><span><strong>然後</strong></span></a></h3><ol><li>換算該月每天預算值再乘上天數</li><li>換算各月預算值乘上該月天數後相加</li><li>跳出輸入日期格式錯誤</li><li>無資料視為預算 0，返回範圍內其他月份預算加總</li><li>每日預算值乘上天數後，再進行無條件捨棄</li></ol><p>上面可以看到使用文字描述 <code>AC</code> 其實非常不直覺，實務上推薦使用實際具體的帶入參數進行記錄會更容易進行討論理解<code>關鍵實例</code></p><h2 id="參考圖" tabindex="-1"><a class="header-anchor" href="#參考圖"><span>參考圖</span></a></h2>',22)),c(t,{id:"mermaid_64a5702a",graph:"flowchart%20TD%0ADevelopAsk%20--%3E%20Goal%0AGoal%20--%3E%20Scope%0AScope%20--%3E%20KeyExamples%0AKeyExamples%20--%3E%20ExecutableSpec(Testcase)%0AExecutableSpec%20--%3E%20Validate%0AExecutableSpec%20--%3E%20Documentation%0A"}),e[1]||(e[1]=a("h2",{id:"結論",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#結論"},[a("span",null,"結論")])],-1)),e[2]||(e[2]=a("p",null,[n("撰寫 "),a("code",null,"驗收條件"),n(" 的目的在於能夠讓團隊在開發前，能對整個產品的關鍵功能有所共識，雖然花費的時間成本不小，但根據該共識讓後續開發、溝通上的成本大幅度降低")],-1)),e[3]||(e[3]=a("ul",null,[a("li",null,"找出最小的關鍵實例驗收, 而非整個功能細節"),a("li",null,"避免寫一堆技術細節, 要讓所有人都容易理解"),a("li",null,"專注 What, 而非 How")],-1))])}const u=o(h,[["render",d]]),g=JSON.parse('{"path":"/articles/memo/what-is-ac.html","title":"What is AC - Acceptance Criteria 驗收條件","lang":"zh-TW","frontmatter":{},"git":{"updatedTime":1665674889000,"contributors":[{"name":"JohnnyWang","username":"JohnnyWang","email":"johnnywang@test.com","commits":1,"url":"https://github.com/JohnnyWang"}],"changelog":[{"hash":"ba204e93b2ac1eb3cc67598a0a87d65aa016e4e8","time":1665674889000,"email":"johnnywang@test.com","author":"JohnnyWang","message":"UPD: add article list"}]},"filePathRelative":"articles/memo/what-is-ac.md"}');export{u as comp,g as data};
