import{_ as e,c as a,e as n,o as l}from"./app-Ba7lTalA.js";const i={};function t(c,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="bash-基礎概念" tabindex="-1"><a class="header-anchor" href="#bash-基礎概念"><span>Bash 基礎概念</span></a></h1><h2 id="基礎概念" tabindex="-1"><a class="header-anchor" href="#基礎概念"><span>基礎概念</span></a></h2><h3 id="退出狀態碼" tabindex="-1"><a class="header-anchor" href="#退出狀態碼"><span>退出狀態碼</span></a></h3><ul><li>value: <code>0-255</code>, 0 =&gt; 成功</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token boolean">false</span> <span class="token comment"># true, false 單純返回狀態 0, 1</span></span>
<span class="line">$ <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> <span class="token comment"># $? 紀錄上個指令的執行狀態碼</span></span>
<span class="line"><span class="token comment"># 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="document" tabindex="-1"><a class="header-anchor" href="#document"><span>document</span></a></h3><ul><li><code>[]</code> 表示可選</li><li><code>|</code> 表示左右選項互斥</li><li><code>&lt;&gt;</code> 表示實際值替換部分</li><li><code>...</code> 表示可存在多個值</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=&lt;git-receive-pack&gt;]</span>
<span class="line">  [--repo=&lt;repository&gt;] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]</span>
<span class="line">  [-u | --set-upstream] [-o &lt;string&gt; | --push-option=&lt;string&gt;]</span>
<span class="line">  [--[no-]signed|--signed=(true|false|if-asked)]</span>
<span class="line">  [--force-with-lease[=&lt;refname&gt;[:&lt;expect&gt;]] [--force-if-includes]]</span>
<span class="line">  [--no-verify] [&lt;repository&gt; [&lt;refspec&gt;...]]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="組合命令" tabindex="-1"><a class="header-anchor" href="#組合命令"><span>組合命令</span></a></h3><ul><li><code>;</code> 可以串接多個命令在一行。需注意，即使前面的指令退出碼不是 0（出錯誤），後面一樣會執行</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ command1<span class="token punctuation">;</span> command2<span class="token punctuation">;</span> command3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>&amp;&amp;</code> 前面執行成功後，才會執行後面</li><li><code>||</code> 前面執行失敗後，才會執行後面</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># if else 效果</span></span>
<span class="line">$ <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>|</code> pipeline 流水線，可以把前一個指令結束的結果傳給下一個指令</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># history 返回用戶歷史命令</span></span>
<span class="line"><span class="token comment"># grep 匹配出只帶有&quot;echo&quot;字的歷史</span></span>
<span class="line"><span class="token comment"># less 將過濾後的歷史以滾動查看的方式展示</span></span>
<span class="line">$ <span class="token function">history</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;echo&quot;</span> <span class="token operator">|</span> <span class="token function">less</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&amp;</code> 可以開啟子shell來異步執行指令，並返回當前 shell 中，也可以拿來拼接指令</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ command1 <span class="token operator">&amp;</span> command2 <span class="token operator">&amp;</span> command3</span>
<span class="line"><span class="token comment"># 1, 2 會在背景跑，3 在前台</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>{}</code> 代碼塊，常用在實現多條指令重定向</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token punctuation">{</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;file content: &quot;</span><span class="token punctuation">;</span> <span class="token function">cat</span> source_file <span class="token punctuation">}</span> <span class="token operator">&gt;</span> target_file</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="命令歷史" tabindex="-1"><a class="header-anchor" href="#命令歷史"><span>命令歷史</span></a></h3><ul><li><code>!!</code> 指代上一條指令</li><li><code>!-n</code> 指代前n條指令</li><li><code>!$</code> 上一條指令的最後一個參數</li><li><code>!*</code> 上一條指令的所有參數</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">mkdir</span> hello</span>
<span class="line">$ <span class="token builtin class-name">cd</span> <span class="token operator">!</span>* <span class="token comment"># = cd hello</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="引號" tabindex="-1"><a class="header-anchor" href="#引號"><span>引號</span></a></h3><p>Shell 不存在數據類型（有數組），只有字符串一種值。除了 <code>$</code>(變量展開), \`(命令替換), \\(轉義) 這些外，其他在雙引號內都為字串</p><h2 id="命令展開流程" tabindex="-1"><a class="header-anchor" href="#命令展開流程"><span>命令展開流程</span></a></h2><ol><li><code>{}</code>展開：<code>ab{c?, d*, ef}g</code> =&gt; <code>abc?g abd*g abefg</code></li><li><code>\${}</code>變數展開</li><li><code>$(( expression ))</code>算式展開</li><li><code>$(command)</code>or<code>command</code>命令結果輸出、替換</li><li>單詞分割：把上面的结果根據環境變數 IFS 分割成多个單詞，預設使用空白</li><li>文件名展開：含有<code>* ? []</code>的文件名模式，展開為匹配的文件名稱，比如下面這樣</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">git</span> <span class="token function">add</span> Documentation/<span class="token punctuation">\\</span>*.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="glob-模式" tabindex="-1"><a class="header-anchor" href="#glob-模式"><span>Glob 模式</span></a></h3><p>大括號和文件名展開很常用來匹配文件名，比如 gitignore, Eslint 配置等</p><table><thead><tr><th>模式</th><th>含義、例子</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配任意字符串（含空串），但是不能跨越目錄層級</td></tr><tr><td><code>**</code></td><td>匹配任意層級目錄</td></tr><tr><td><code>?</code></td><td>匹配一個字符</td></tr><tr><td><code>[abc]</code></td><td>匹配中括號內的字符集合中的一個。排除法用 [^abc] 或 [!abc]</td></tr><tr><td><code>a{b,c*}d</code></td><td>先展開成模式 abd，ac*d，再分別匹配，只要能滿足一個就算匹配</td></tr></tbody></table><blockquote><p>glob 和正則表達容易混淆，但 Glob 專用於匹配文件名，正則為通用字符串匹配工具，可參考阮一峰<a href="https://www.ruanyifeng.com/blog/2018/09/bash-wildcards.html" target="_blank" rel="noopener noreferrer">命令匹配符教學</a></p></blockquote><h2 id="i-o-重定向" tabindex="-1"><a class="header-anchor" href="#i-o-重定向"><span>I/O 重定向</span></a></h2><p>Shell 的標準輸入輸出包括 stdin、stdout、stderr，分別對應指令狀態碼 0, 1, 2</p><h3 id="輸出" tabindex="-1"><a class="header-anchor" href="#輸出"><span>輸出</span></a></h3><p>使用 <code>&gt;</code> 把指令輸出重定向到文件</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">ls</span> <span class="token operator">&gt;</span> files</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>若文件不存在會直接創建新的文件</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;{}&quot;</span> <span class="token operator">&gt;</span> config.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>若文件存在，則會先清空後再寫入，可以用 <code>&gt;&gt;</code> 改為 append 在原本內容後添加</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">ls</span> <span class="token operator">&gt;&gt;</span> files.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="錯誤輸出" tabindex="-1"><a class="header-anchor" href="#錯誤輸出"><span>錯誤輸出</span></a></h3><p>使用 <code>2&gt;</code> 把錯誤重定向，或是用 <code>&amp;&gt;</code> 同時重定向輸出和錯誤輸出</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">ls</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> ls-err</span>
<span class="line">$ <span class="token function">ls</span> <span class="token operator">&amp;&gt;</span> files</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="輸入" tabindex="-1"><a class="header-anchor" href="#輸入"><span>輸入</span></a></h3><p>輸入重定向用得較少，大多數使用文件當作參數，如下面這樣</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># read-print.sh</span></span>
<span class="line">$ <span class="token builtin class-name">read</span> var</span>
<span class="line">$ <span class="token builtin class-name">echo</span> <span class="token variable">$var</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">bash</span> read-print.sh <span class="token operator">&lt;</span> files.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="here-文檔、字符串" tabindex="-1"><a class="header-anchor" href="#here-文檔、字符串"><span>Here 文檔、字符串</span></a></h3><p>Here 文檔允許我们把一段字符串作為輸入源，基本語法如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">command</span> <span class="token operator">&lt;&lt;</span> <span class="token string">token</span>
<span class="line"># 這裡是內容</span>
<span class="line">text ...</span>
<span class="line">token</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>token</code> 只是一個標示，可以是任意值，只要收尾相同即可，內部支援變數展開</p><p>常用在長文本的格式的撰寫</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">title</span><span class="token operator">=</span><span class="token string">&quot;Simple HTML&quot;</span></span>
<span class="line"><span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">&quot;Hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># cat 命令預設從標準輸入讀取内容</span></span>
<span class="line"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF</span>
<span class="line">&lt;html&gt;</span>
<span class="line">&lt;head&gt;</span>
<span class="line">  &lt;title&gt;</span>
<span class="line">  The title of page:<span class="token variable">$title</span></span>
<span class="line">  &lt;/title&gt;</span>
<span class="line">&lt;/head&gt;</span>
<span class="line">&lt;body&gt;</span>
<span class="line">  <span class="token variable">$content</span></span>
<span class="line">&lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line">EOF</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果文本較短，也可以用 here字符串</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token builtin class-name">alias</span> echo-hello<span class="token operator">=</span><span class="token string">&quot;bash read-print.sh &lt;&lt;&lt; &#39;Hello&#39;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="跳脫-hero-字串變數名稱字符" tabindex="-1"><a class="header-anchor" href="#跳脫-hero-字串變數名稱字符"><span>跳脫 Hero 字串變數名稱字符</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># escape some content start with \`$\` by adding \`\\\` before it</span></span>
<span class="line"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF</span>
<span class="line">Username is <span class="token variable">$username</span>...</span>
<span class="line">Other not bash variable \\<span class="token variable">$password</span>...</span>
<span class="line">EOF</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="獲取幫助" tabindex="-1"><a class="header-anchor" href="#獲取幫助"><span>獲取幫助</span></a></h2><h3 id="help" tabindex="-1"><a class="header-anchor" href="#help"><span>help</span></a></h3><p>查看內建指令的基本用法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token builtin class-name">help</span> <span class="token builtin class-name">type</span></span>
<span class="line">$ <span class="token builtin class-name">help</span> <span class="token function">ls</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="man-manual-page" tabindex="-1"><a class="header-anchor" href="#man-manual-page"><span>man(manual page)</span></a></h3><p>大部分指令帶有使用手冊，詳細描述該指令的用法與參數、作用。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">man</span> <span class="token function">ls</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="info" tabindex="-1"><a class="header-anchor" href="#info"><span>info</span></a></h3><p><code>man</code>, <code>help</code> 相對過時，目前較新的文檔敘述指令為 <code>info</code></p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ul><li><a href="https://juejin.cn/post/7130982053528469511" target="_blank" rel="noopener noreferrer">Bash 基礎知識</a></li></ul>`,68)]))}const p=e(i,[["render",t],["__file","01basic.html.vue"]]),r=JSON.parse('{"path":"/articles/memo/bash/01basic.html","title":"Bash 基礎概念","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"基礎概念","slug":"基礎概念","link":"#基礎概念","children":[{"level":3,"title":"退出狀態碼","slug":"退出狀態碼","link":"#退出狀態碼","children":[]},{"level":3,"title":"document","slug":"document","link":"#document","children":[]},{"level":3,"title":"組合命令","slug":"組合命令","link":"#組合命令","children":[]},{"level":3,"title":"命令歷史","slug":"命令歷史","link":"#命令歷史","children":[]},{"level":3,"title":"引號","slug":"引號","link":"#引號","children":[]}]},{"level":2,"title":"命令展開流程","slug":"命令展開流程","link":"#命令展開流程","children":[{"level":3,"title":"Glob 模式","slug":"glob-模式","link":"#glob-模式","children":[]}]},{"level":2,"title":"I/O 重定向","slug":"i-o-重定向","link":"#i-o-重定向","children":[{"level":3,"title":"輸出","slug":"輸出","link":"#輸出","children":[]},{"level":3,"title":"錯誤輸出","slug":"錯誤輸出","link":"#錯誤輸出","children":[]},{"level":3,"title":"輸入","slug":"輸入","link":"#輸入","children":[]},{"level":3,"title":"Here 文檔、字符串","slug":"here-文檔、字符串","link":"#here-文檔、字符串","children":[]}]},{"level":2,"title":"獲取幫助","slug":"獲取幫助","link":"#獲取幫助","children":[{"level":3,"title":"help","slug":"help","link":"#help","children":[]},{"level":3,"title":"man(manual page)","slug":"man-manual-page","link":"#man-manual-page","children":[]},{"level":3,"title":"info","slug":"info","link":"#info","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"updatedTime":1670481440000,"contributors":[{"name":"johnnywang","username":"johnnywang","email":"johnnywang@test.com","commits":2,"url":"https://github.com/johnnywang"}]},"filePathRelative":"articles/memo/bash/01basic.md"}');export{p as comp,r as data};
