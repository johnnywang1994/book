import{_ as e,c as o,b as n,e as a,a as t,d as l,o as c,r as i}from"./app-RvPLl2RM.js";const r={};function u(d,s){const p=i("SocialBlock");return c(),o("div",null,[s[0]||(s[0]=n("h1",{id:"用-2d-物理引擎-matterjs-製作經典馬力歐-1-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#用-2d-物理引擎-matterjs-製作經典馬力歐-1-1"},[n("span",null,"用 2D 物理引擎 Matterjs 製作經典馬力歐 1-1")])],-1)),s[1]||(s[1]=n("h6",{id:"tags-javascript-matterjs-mario",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tags-javascript-matterjs-mario"},[n("span",null,[a("tags: "),n("code",null,"JavaScript"),a(", "),n("code",null,"Matterjs"),a(", "),n("code",null,"Mario")])])],-1)),t(p,{hashtags:"javascript,matterjs,mario"}),s[2]||(s[2]=l(`<p>嗨～大家好，我是 Johnny，最近台灣本土疫情稍為刺激，週末待在家閒著無聊，剛好前陣子學了一款 2D 物理引擎<a href="https://brm.io/matter-js/" target="_blank" rel="noopener noreferrer">Matterjs</a> 想說來試著用它做點東西。（其實是公司內居然提問可不可能製作一款類似馬力歐遊戲的需求，雖然快被嚇死，內心卻備受衝擊想著：靠北！我做不出來！！趕緊來試著做看看）</p><p>今天這篇是一個實作紀錄，主要紀錄如何使用 Matterjs 製作一個橫向捲軸式遊戲～</p><p>因為馬力歐算是這種遊戲的經典款，網路上相關資源也蠻多，就決定是馬力歐拉，礙於篇幅會過長，本篇只會聚焦在開發想法上面喔</p><p>製作完的<a href="https://johnnywang1994.github.io/p5-game/#/matter-mario" target="_blank" rel="noopener noreferrer">成品在這</a>，歡迎前往玩看看喔～</p><h2 id="技術選擇" tabindex="-1"><a class="header-anchor" href="#技術選擇"><span>技術選擇</span></a></h2><p>首先要製作一個 2D 網頁遊戲最重要的就是技術選擇，因為這次是以練習 Matterjs 及原生手做能力為主，所以沒有過多的考慮，平常如果要開發遊戲的話，可以選擇像是 Phaserjs 這種遊戲框架會方便很多～</p><h2 id="前置思考" tabindex="-1"><a class="header-anchor" href="#前置思考"><span>前置思考</span></a></h2><p>製作前需要先確定一下哪先部分可以交給 Matterjs，哪些部分需要我們自己手動完成</p><h3 id="matterjs-代勞" tabindex="-1"><a class="header-anchor" href="#matterjs-代勞"><span>Matterjs 代勞</span></a></h3><ol><li>物件渲染（Body）</li><li>物理特性（位置、速度、重力、碰撞）</li></ol><h3 id="手動" tabindex="-1"><a class="header-anchor" href="#手動"><span>手動</span></a></h3><ol><li>動畫渲染（Animation）</li><li>流程、機制控制（Trigger）</li><li>操控事件（Controller）</li><li>素材載入（Loader）</li><li>音效處理（Howler）</li></ol><h2 id="實作過程" tabindex="-1"><a class="header-anchor" href="#實作過程"><span>實作過程</span></a></h2><p>實作過程中主要碰到了以下幾個困難</p><h3 id="素材在多個地方分開載入" tabindex="-1"><a class="header-anchor" href="#素材在多個地方分開載入"><span>素材在多個地方分開載入</span></a></h3><p>這個問題其實就是製作一個素材 Loader，統一在一個地方載入素材後，其他地方只需要調用這個 Loader 返回的結果就行了</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">loader<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;mario&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/cdn/mario.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 等待素材載入（Promise.all）</span></span>
<span class="line">  <span class="token keyword">await</span> loader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 開始遊戲</span></span>
<span class="line">  <span class="token function">startGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="創建動畫" tabindex="-1"><a class="header-anchor" href="#創建動畫"><span>創建動畫</span></a></h3><p>Matterjs 主要只負責物理特性部分，動畫部分可以透過抽象將邏輯拆出去，由外部注入函數來創建動畫對象，並且添加 Matterjs 的 render events &quot;afterRender&quot; 內進行渲染</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>render<span class="token punctuation">,</span> <span class="token string">&#39;afterRender&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ... dome some animation</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同一物件多種動畫" tabindex="-1"><a class="header-anchor" href="#同一物件多種動畫"><span>同一物件多種動畫</span></a></h3><p>這個可以透過在物件中添加 status 來控制，每當切換狀態時執行不同的動畫即可</p><h3 id="同類型物件歸類" tabindex="-1"><a class="header-anchor" href="#同類型物件歸類"><span>同類型物件歸類</span></a></h3><p>物件之間彼此或多或少都會有關聯，比如蘑菇、烏龜都是「敵人」，此時可以創建 Matterjs 的 group 來分類，這樣在後續判定 Collision 碰撞時可以提升效率，否則每個物件都必須寫一次碰撞就比較繁瑣了</p><h3 id="橫向捲軸跟隨" tabindex="-1"><a class="header-anchor" href="#橫向捲軸跟隨"><span>橫向捲軸跟隨</span></a></h3><p>橫向捲軸有兩種，一種是 loop 類型也就是 Camera 固定，背景持續重複，而馬力歐屬於第二類，背景為長條狀，Camera 跟隨人物移動，製作上可以添加 bounds 邊界概念，而使用 Matterjs 則可以用 Bounds 內建模組將 render.bounds 進行移動來達成</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">checkBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> position<span class="token punctuation">,</span> <span class="token literal-property property">velocity</span><span class="token operator">:</span> vel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>body<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> min<span class="token punctuation">,</span> max <span class="token punctuation">}</span> <span class="token operator">=</span> render<span class="token punctuation">.</span>bounds<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>vel<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> min<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// no move</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vel<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> max<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> config<span class="token punctuation">.</span>mapWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// no move</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> min<span class="token punctuation">.</span>x<span class="token operator">+</span>config<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> vel<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    Bounds<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>render<span class="token punctuation">.</span>bounds<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">x</span><span class="token operator">:</span> vel<span class="token punctuation">.</span>x<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> min<span class="token punctuation">.</span>x<span class="token operator">+</span>config<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> vel<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    Bounds<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>render<span class="token punctuation">.</span>bounds<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">x</span><span class="token operator">:</span> vel<span class="token punctuation">.</span>x<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="結論" tabindex="-1"><a class="header-anchor" href="#結論"><span>結論</span></a></h2><p>必須說，真的是術業有專攻，製作遊戲真的是異常辛苦，希望大家平日玩遊戲遇到 bug 時都能冷靜一點哈哈哈，因為真的是非常非常辛苦，製作難免會有一些缺漏或不完美，透過親身製作一次真的可以體會...</p><p>今天就介紹到這拉～感謝大家觀看 =V=!!</p><p><a href="https://github.com/johnnywang1994/matter-mario" target="_blank" rel="noopener noreferrer">源碼放在這</a>，有興趣的朋友可以參觀看看摟，對於遊戲我認為寫的還有待加強，請大佬見諒哈哈</p>`,31)),t(p,{hashtags:"javascript,matterjs,mario"})])}const m=e(r,[["render",u],["__file","matter-mario.html.vue"]]),h=JSON.parse('{"path":"/articles/js/matter-mario.html","title":"用 2D 物理引擎 Matterjs 製作經典馬力歐 1-1","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"技術選擇","slug":"技術選擇","link":"#技術選擇","children":[]},{"level":2,"title":"前置思考","slug":"前置思考","link":"#前置思考","children":[{"level":3,"title":"Matterjs 代勞","slug":"matterjs-代勞","link":"#matterjs-代勞","children":[]},{"level":3,"title":"手動","slug":"手動","link":"#手動","children":[]}]},{"level":2,"title":"實作過程","slug":"實作過程","link":"#實作過程","children":[{"level":3,"title":"素材在多個地方分開載入","slug":"素材在多個地方分開載入","link":"#素材在多個地方分開載入","children":[]},{"level":3,"title":"創建動畫","slug":"創建動畫","link":"#創建動畫","children":[]},{"level":3,"title":"同一物件多種動畫","slug":"同一物件多種動畫","link":"#同一物件多種動畫","children":[]},{"level":3,"title":"同類型物件歸類","slug":"同類型物件歸類","link":"#同類型物件歸類","children":[]},{"level":3,"title":"橫向捲軸跟隨","slug":"橫向捲軸跟隨","link":"#橫向捲軸跟隨","children":[]}]},{"level":2,"title":"結論","slug":"結論","link":"#結論","children":[]}],"git":{"updatedTime":1648521821000,"contributors":[{"name":"johnnywang1994","email":"johnny29621189@kimo.com","commits":3,"url":"https://github.com/johnnywang1994"}]},"filePathRelative":"articles/js/matter-mario.md"}');export{m as comp,h as data};
