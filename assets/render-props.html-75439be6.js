import{_ as c,r as o,o as l,c as i,a,d as n,e as s,f as t}from"./app-b03d09bb.js";const r={},u=n("h1",{id:"render-props-pattern",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#render-props-pattern","aria-hidden":"true"},"#"),s(" Render Props Pattern")],-1),d=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>大家好，我是 Johnny，今天要紀錄分享的是 Patterns 筆記系列的 <code>Render Props Pattern</code></p><h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹" aria-hidden="true">#</a> 介紹</h2><p><code>Render Props Pattern</code> 是一種在 props 中提供回傳 JSX 的函數，提供組件間分享、傳遞組件狀態邏輯樣式的能力，類似前面提過的 <code>HOC</code>，以下是一個簡單範例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Title render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token constant">I</span> am a render prop<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而在 <code>&lt;Title&gt;</code> 組件中我們可以定義如下，透過呼叫外部傳進來的 <code>props.render</code>，即可產出對應的 jsx 內容：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Title</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),k=n("code",null,"Ant Design",-1),v=n("code",null,"Select",-1),m={href:"https://ant.design/components/select#components-select-demo-custom-tag-render",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Select tagRender<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="狀態共享" tabindex="-1"><a class="header-anchor" href="#狀態共享" aria-hidden="true">#</a> 狀態共享</h2><p>由於 render props 是一個函數，也就提供了從外部獲取子組件狀態的能力，通過把子組件狀態傳遞進 render props 函數中，我們可以如下面這樣使用取代傳統的 <code>state lifting</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Input</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input
        type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span>
        value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span>
        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>
        placeholder<span class="token operator">=</span><span class="token string">&quot;Temp in °C&quot;</span>
      <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;Input
  render={value =&gt; (
    &lt;&gt;
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Kelvin</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{value}</span> <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fahrenheit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{value}</span> <span class="token punctuation">/&gt;</span></span>
    &lt;/&gt;
  )}
/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="把-children-直接當作-render-props-使用" tabindex="-1"><a class="header-anchor" href="#把-children-直接當作-render-props-使用" aria-hidden="true">#</a> 把 children 直接當作 render props 使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Input</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input
        type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span>
        value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span>
        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>
        placeholder<span class="token operator">=</span><span class="token string">&quot;Temp in °C&quot;</span>
      <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用起來變這樣</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span><span class="token punctuation">&gt;</span></span>
  {value =&gt; (
    &lt;&gt;
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Kelvin</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{value}</span> <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fahrenheit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{value}</span> <span class="token punctuation">/&gt;</span></span>
    &lt;/&gt;
  )}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Input</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),h=n("code",null,"react-transition-group",-1),b={href:"https://reactcommunity.org/react-transition-group/transition",target:"_blank",rel:"noopener noreferrer"},f=t(`<h2 id="pros-cons" tabindex="-1"><a class="header-anchor" href="#pros-cons" aria-hidden="true">#</a> Pros &amp; Cons</h2><h3 id="優點" tabindex="-1"><a class="header-anchor" href="#優點" aria-hidden="true">#</a> 優點</h3><ul><li>限制組件 re-render 範圍，因為 render props 本身就是一個函數，具備其內部狀態 scoped，當 render props 內的狀態更新時，排除一些特殊狀態操作的場合（比如使用在 render props 中的狀態也同時被用在同一個組件中其他地方），只會觸發它自己刷新，導致整個子組件 re-render 而影響效能</li><li>解決 HOC 的 props 名稱衝突問題，我們可以在子組件中明確看到 props 有哪些，不會導致隱性的命名衝突</li></ul><h3 id="缺點" tabindex="-1"><a class="header-anchor" href="#缺點" aria-hidden="true">#</a> 缺點</h3><ul><li>破壞了 JSX 的一些語法習慣，雖然提供了一定的狀態傳遞能力，但也增加了程式碼的複雜度，並降低了可讀性，在應用上避免過度使用，否則在爽爽寫程式的同時，也容易導致其他後續維護問題</li><li>組件深度擴增，為了使用 render props 我們往往會在 children 中提供函數渲染，但這種寫法套多層以後就會長得想下面這樣...</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 這邊我們以 Apollo Client 中提供的 \`Mutation\` 組件為例 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Mutation</span> <span class="token attr-name">mutation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{FIRST_MUTATION}</span><span class="token punctuation">&gt;</span></span>
  {firstMutation =&gt; (
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Mutation</span> <span class="token attr-name">mutation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{SECOND_MUTATION}</span><span class="token punctuation">&gt;</span></span>
      {secondMutation =&gt; (
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Mutation</span> <span class="token attr-name">mutation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{THIRD_MUTATION}</span><span class="token punctuation">&gt;</span></span>
          {thirdMutation =&gt; (
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Element</span>
              <span class="token attr-name">firstMutation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{firstMutation}</span>
              <span class="token attr-name">secondMutation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{secondMutation}</span>
              <span class="token attr-name">thirdMutation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{thirdMutation}</span>
            <span class="token punctuation">/&gt;</span></span>
          )}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Mutation</span><span class="token punctuation">&gt;</span></span>
      )}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Mutation</span><span class="token punctuation">&gt;</span></span>
  )}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Mutation</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可使用-hooks-取代" tabindex="-1"><a class="header-anchor" href="#可使用-hooks-取代" aria-hidden="true">#</a> 可使用 Hooks 取代</h3><p>與 HOC 一樣，其實目前僅剩餘少數場景使用 render props patterns，現代開發大部分場景都能透過 hooks 來取代，同樣以 Apollo Client 為例，下面是使用 hooks <code>useMutation</code> 的範例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useMutation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@apollo/react-hooks&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">ADD_MESSAGE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./resolvers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>addMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token constant">ADD_MESSAGE</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">variables</span><span class="token operator">:</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;input-row&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input
        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>
        type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span>
        placeholder<span class="token operator">=</span><span class="token string">&quot;Type something...&quot;</span>
      <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>addMessage<span class="token punctuation">}</span><span class="token operator">&gt;</span>Add<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),_=n("h2",{id:"結論",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#結論","aria-hidden":"true"},"#"),s(" 結論")],-1),q=n("p",null,"實際這種模式的使用時機，個人認為還是必須根據開發場景來採取最適合你的方式，畢竟沒有技術是絕對得好或壞，隨著時代技術的推進，每種技術、概念都會各有其優缺點，只看你當下的取捨摟",-1),x=n("p",null,"那今天分享就到這拉～感謝大家收看，下篇見摟！=V=",-1);function M(y,w){const e=o("SocialBlock"),p=o("ExternalLinkIcon");return l(),i("div",null,[u,a(e,{hashtags:"render props,pattern,compound"}),d,n("p",null,[s("藉由傳遞 render props 我們可以根據實際應用場景，提供不同的樣式、設定的 props 給予子組件，這種方式最常應用在第三方組件庫、客製化工具組件中，比如你可以在 "),k,s(" 的 "),v,s(" 組件中看到類似的應用，透過提供一個 render props，我們可以讓工具組件更加靈活地去產生我們需求的組件內容，詳情"),n("a",m,[s("請參考這邊"),a(p)])]),g,n("p",null,[s("這種寫法在 React 的動畫特效套件 "),h,s(" 中也有所應用，有興趣的朋友可以"),n("a",b,[s("點這邊看看"),a(p)])]),f,a(e,{hashtags:"render props,pattern,compound"}),_,q,x])}const S=c(r,[["render",M],["__file","render-props.html.vue"]]);export{S as default};
