import{_ as p,r as o,o as l,c,d as n,e as s,a as e,f as t}from"./app.a6b87ec6.js";const i={},r=n("h1",{id:"apollo-client-\u5B78\u7FD2\u4F7F\u7528\u7B46\u8A18",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#apollo-client-\u5B78\u7FD2\u4F7F\u7528\u7B46\u8A18","aria-hidden":"true"},"#"),s(" Apollo Client \u5B78\u7FD2\u4F7F\u7528\u7B46\u8A18")],-1),u=n("p",null,"\u672C\u7BC7\u662F\u5B78\u7FD2\u57FA\u790E Apollo Client \u6642\u7684\u90E8\u5206\u7B46\u8A18\uFF0C\u540C\u6A23\u50C5\u8A18\u9304\u7279\u5B9A\u6211\u89BA\u5F97\u5F88\u91CD\u8981\u7684\u90E8\u5206\uFF0C\u6703\u6839\u64DA\u6211\u5BE6\u969B\u4F7F\u7528\u72C0\u6CC1\u6301\u7E8C\u589E\u88DC\u5167\u5BB9\uFF0C\u4E0D\u6703\u628A\u6240\u6709\u57FA\u790E\u5167\u5BB9\u90FD\u7D00\u9304\u5728\u9019",-1),d={href:"https://www.apollographql.com/docs/react/",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"fetch-policy",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fetch-policy","aria-hidden":"true"},"#"),s(" Fetch Policy")],-1),v={href:"https://www.apollographql.com/docs/react/data/queries/#supported-fetch-policies",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"cache-first",-1),h=n("code",null,"nextFetchPolicy",-1),b=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token constant">GET_DOGS</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">fetchPolicy</span><span class="token operator">:</span> <span class="token string">&#39;network-only&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Used for first execution</span>
  <span class="token literal-property property">nextFetchPolicy</span><span class="token operator">:</span> <span class="token string">&#39;cache-first&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Used for subsequent executions</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),g={href:"https://www.apollographql.com/docs/react/data/queries#nextfetchpolicy",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"update-local-data",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#update-local-data","aria-hidden":"true"},"#"),s(" Update Local Data")],-1),f={href:"https://www.apollographql.com/docs/react/data/mutations#updating-local-data",target:"_blank",rel:"noopener noreferrer"},_=t(`<h3 id="refetching-query" tabindex="-1"><a class="header-anchor" href="#refetching-query" aria-hidden="true">#</a> refetching query</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Refetches two queries after mutation completes</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>addTodo<span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token constant">ADD_TODO</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">refetchQueries</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token constant">GET_POST</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// DocumentNode object parsed with gql</span>
    <span class="token string">&#39;GetComments&#39;</span> <span class="token comment">// Query name</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="updating-cache-directly" tabindex="-1"><a class="header-anchor" href="#updating-cache-directly" aria-hidden="true">#</a> updating cache directly</h3><p>include the result from mutation response, <code>cache</code> object includes <code>readQuery/writeQuery</code>, <code>readFragment/writeFragment</code>, <code>modify</code>, and <code>evict</code> method</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>addTodo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token constant">ADD_TODO</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">cache<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> addTodo <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">fields</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">todos</span><span class="token punctuation">(</span><span class="token parameter">existingTodos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> newTodoRef <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">writeFragment</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> addTodo<span class="token punctuation">,</span>
            <span class="token literal-property property">fragment</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
              fragment NewTodo on Todo {
                id
                type
              }
            </span><span class="token template-punctuation string">\`</span></span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>existingTodos<span class="token punctuation">,</span> newTodoRef<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fragments" tabindex="-1"><a class="header-anchor" href="#fragments" aria-hidden="true">#</a> Fragments</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>fragment NameParts on Person <span class="token punctuation">{</span>
  title
  firstName
  middleName
  lastName
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inline-fragments-with-unions-interfaces" tabindex="-1"><a class="header-anchor" href="#inline-fragments-with-unions-interfaces" aria-hidden="true">#</a> inline fragments with Unions Interfaces</h3><p>\u76F8\u95DC\u7B46\u8A18\u5DF2\u8A18\u9304\u5728 <code>graphql/advance</code> \u5167</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>query AllCharacters <span class="token punctuation">{</span>
  all_characters <span class="token punctuation">{</span>

    <span class="token operator">...</span> on Character <span class="token punctuation">{</span>
      name
    <span class="token punctuation">}</span>

    <span class="token operator">...</span> on Jedi <span class="token punctuation">{</span>
      side
    <span class="token punctuation">}</span>

    <span class="token operator">...</span> on Droid <span class="token punctuation">{</span>
      model
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="possibletypes" tabindex="-1"><a class="header-anchor" href="#possibletypes" aria-hidden="true">#</a> possibleTypes</h3>`,11),w={href:"https://www.apollographql.com/docs/react/data/fragments#defining-possibletypes-manually",target:"_blank",rel:"noopener noreferrer"},q=n("li",null,[n("p",null,"\u624B\u52D5\u5B9A\u7FA9")],-1),x=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">possibleTypes</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Character</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Jedi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Droid&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Test</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;PassingTest&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;FailingTest&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;SkippedTest&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Snake</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Viper&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),j={href:"https://www.apollographql.com/docs/react/data/fragments#generating-possibletypes-automatically",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"graphql-query-best-practices",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#graphql-query-best-practices","aria-hidden":"true"},"#"),s(" GraphQL query best practices")],-1),C={href:"https://www.apollographql.com/docs/react/data/operation-best-practices",target:"_blank",rel:"noopener noreferrer"},Q=n("li",null,[n("p",null,"Name all operations: \u547D\u540D\u6240\u6709 query, mutation \u64CD\u4F5C")],-1),F=n("li",null,[n("p",null,[s("Provide variable as arguments: \u63D0\u4F9B\u8B8A\u6578\u4F5C\u70BA\u53C3\u6578\uFF0C\u63A8\u85A6\u4F7F\u7528 "),n("code",null,"$input"),s(" \u5305\u88F9\u6240\u6709\u53C3\u6578")])],-1),I={href:"https://www.apollographql.com/docs/intro/benefits/#graphql-provides-declarative-efficient-data-fetching",target:"_blank",rel:"noopener noreferrer"},L=n("li",null,[n("p",null,"Use fragments: \u4F7F\u7528 fragments \u5C01\u88DD\u76F8\u4F3C\u6B04\u4F4D\u5B57\u6BB5\uFF0C\u4F46\u907F\u514D\u904E\u5EA6\u6FEB\u7528")],-1),D=n("li",null,[n("p",null,"Query separately: \u5206\u958B query \u5168\u57DF\u8CC7\u6599\u53CA user \u76F8\u95DC\u8CC7\u6599\uFF0C\u8B93 GraphQL \u80FD\u6709\u6548\u9032\u884C\u7368\u7ACB cache \u4F5C\u696D\uFF0C\u63D0\u5347\u6548\u80FD\uFF08\u5343\u842C\u5225\u5728\u540C\u4E00\u500B query \u88E1\u62FF\u4E00\u5806\u4E0D\u540C type \u7684\u6771\u897F\uFF09")],-1),P=n("li",null,[n("p",null,[s("Add "),n("code",null,"name"),s(", "),n("code",null,"version"),s(" in client: \u5728 ApolloClient \u521D\u59CB\u5316\u6642\u63D0\u4F9B name, version \u63D0\u5347\u5075\u932F\u7684\u6548\u7387")])],-1),A=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">uri</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:4000/graphql&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;MarketingSite&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&#39;1.2&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cache" tabindex="-1"><a class="header-anchor" href="#cache" aria-hidden="true">#</a> Cache</h2>`,2),N={href:"https://www.apollographql.com/docs/react/caching/overview",target:"_blank",rel:"noopener noreferrer"},G=n("h3",{id:"typepolicies",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#typepolicies","aria-hidden":"true"},"#"),s(" typePolicies")],-1),S={href:"https://www.apollographql.com/docs/react/caching/cache-configuration#customizing-cache-ids",target:"_blank",rel:"noopener noreferrer"},V=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> makeVar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@apollo/client&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> doneVar <span class="token operator">=</span> makeVar<span class="token operator">&lt;</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">typePolicies</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Product</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// In an inventory management system, products might be identified</span>
      <span class="token comment">// by their UPC.</span>
      <span class="token literal-property property">keyFields</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;upc&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Todo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// custom behavior by field name</span>
      <span class="token comment">// eg. \u53EF\u4EE5\u7528\u5BA2\u88FD\u5316\u7684 cache \u6A5F\u5236\u88FD\u4F5C client only \u7684\u6B04\u4F4D\uFF0C\u4E26\u5728 query \u6642\u6A19\u8A3B\u7372\u53D6</span>
      <span class="token literal-property property">fields</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">isDone</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token function">read</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> <span class="token punctuation">{</span> readField <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> objectId <span class="token operator">=</span> <span class="token function">readField</span><span class="token punctuation">(</span><span class="token string">&#39;objectId&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> string<span class="token punctuation">;</span>
            <span class="token keyword">const</span> doneList <span class="token operator">=</span> <span class="token function">doneVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> doneList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>objectId<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M={href:"https://www.apollographql.com/docs/react/local-state/managing-state-with-field-policies/",target:"_blank",rel:"noopener noreferrer"},R=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> todoItem <span class="token operator">=</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  fragment TodoItem on Todo {
    objectId
    title
    content
    isDone @client
  }
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="read-write-interaction" tabindex="-1"><a class="header-anchor" href="#read-write-interaction" aria-hidden="true">#</a> Read/Write Interaction</h3>`,2),O={href:"https://www.apollographql.com/docs/react/caching/cache-interaction",target:"_blank",rel:"noopener noreferrer"},U=t(`<h4 id="read-all-caches" tabindex="-1"><a class="header-anchor" href="#read-all-caches" aria-hidden="true">#</a> Read All Caches</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useApolloClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@apollo/client&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">useApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> serializedState <span class="token operator">=</span> client<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>serializedState<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="read-write-query-cache" tabindex="-1"><a class="header-anchor" href="#read-write-query-cache" aria-hidden="true">#</a> Read/Write Query Cache</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Fetch the cached to-do item with ID 5</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> todo <span class="token punctuation">}</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">readQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">query</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    query ReadTodo($id: ID!) {
      todo(id: $id) {
        id
        text
        completed
      }
    }
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">variables</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// Provide any required variables here.  Variables of mismatched types will return \`null\`.</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">writeQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">query</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    query WriteTodo($id: Int!) {
      todo(id: $id) {
        id
        text
        completed
      }
    }</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">,</span>
  <span class="token literal-property property">variables</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span>
  <span class="token punctuation">}</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// Contains the data to write</span>
    <span class="token literal-property property">todo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">__typename</span><span class="token operator">:</span> <span class="token string">&#39;Todo&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
      <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;Buy grapes \u{1F347}&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),E=n("code",null,"\u4E0D\u8981\u76F4\u63A5\u4FEE\u6539\u8FD4\u56DE\u7684\u5C0D\u8C61",-1),$={href:"https://www.apollographql.com/docs/react/caching/cache-interaction#combining-reads-and-writes",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>\u7576\u4F7F\u7528 <code>writeQuery</code> \u6642\uFF0C\u6CE8\u610F\u4EE5\u4E0B\u63D0\u793A\uFF1A</p><ul><li>\u4EFB\u4F55\u4F7F\u7528 <code>writeQuery</code> \u5C0D cache \u8CC7\u6599\u7684\u6539\u52D5\u4E0D\u6703\u540C\u6B65\u5230 GraphQL server\uFF0C\u91CD\u65B0\u6574\u7406\u5F8C\u5C31\u6703\u6D88\u5931</li><li>query \u7684 shape \u4E0D\u9700\u8981\u8DDF GraphQL server \u7684 schema \u76F8\u540C\uFF0C\u53EF\u4EE5\u5305\u542B\u4E0D\u5728 schema \u4E2D\u7684\u6B04\u4F4D</li></ul><h4 id="read-write-fragments" tabindex="-1"><a class="header-anchor" href="#read-write-fragments" aria-hidden="true">#</a> Read/Write Fragments</h4><ul><li>id: <code>&lt;__typename&gt;:&lt;id&gt;</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> todo <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">readFragment</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;Todo:5&#39;</span><span class="token punctuation">,</span> <span class="token comment">// The value of the to-do item&#39;s cache ID</span>
  <span class="token literal-property property">fragment</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    fragment MyTodo on Todo {
      id
      text
      completed
    }
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

client<span class="token punctuation">.</span><span class="token function">writeFragment</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;Todo:5&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fragment</span><span class="token operator">:</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    fragment MyTodo on Todo {
      completed
    }
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="update-query-cache" tabindex="-1"><a class="header-anchor" href="#update-query-cache" aria-hidden="true">#</a> Update Query Cache</h4>`,6),W={href:"https://www.apollographql.com/docs/react/caching/cache-interaction#using-updatequery-and-updatefragment",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"updateQuery",-1),J=n("code",null,"updateFragment",-1),H=n("code",null,"read/write",-1),K=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> query <span class="token operator">=</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  query MyTodoAppQuery {
    todos {
      id
      text
      completed
    }
  }
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">// Set all todos in the cache as completed</span>
cache<span class="token punctuation">.</span><span class="token function">updateQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span> query <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">todos</span><span class="token operator">:</span> data<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>todo<span class="token punctuation">,</span> <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function X(Y,Z){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,u,n("ul",null,[n("li",null,[n("a",d,[s("Apollo Client"),e(a)])])]),k,n("ul",null,[n("li",null,[n("a",v,[s("Supported fetch policies"),e(a)]),s(" \u9810\u8A2D Query \u4F7F\u7528\u7684 cache \u653F\u7B56\u662F "),m,s("\uFF0C\u7576\u8ACB\u6C42\u6642\u6703\u5148\u6AA2\u67E5\u672C\u5730 cache\uFF0C\u5982\u679C\u5B58\u5728\u5247\u76F4\u63A5\u8FD4\u56DE\uFF0C\u800C\u4E0D\u9032\u884C network request\uFF0C\u4E5F\u53EF\u4EE5\u4F7F\u7528 "),h,s(" \u8A2D\u5B9A\u7B2C\u4E8C\u6B21\u5F8C\u8ACB\u6C42\u7684 cache \u653F\u7B56\uFF0C\u5982\u4E0B\u7BC4\u4F8B\u7E3D\u662F\u5728\u7B2C\u4E00\u6B21\u6642\u5BE6\u969B\u9032\u884C network request\uFF0C\u4E26\u5728\u4E4B\u5F8C\u4EE5 cache \u8FD4\u56DE\u70BA\u4E3B")])]),b,n("p",null,[s("\u8A73\u7D30\u4F7F\u7528\u53EF\u53C3\u8003"),n("a",g,[s("nextFetchPolicy"),e(a)])]),y,n("ul",null,[n("li",null,[n("a",f,[s("Link"),e(a)])])]),_,n("ul",null,[n("li",null,[n("p",null,[n("a",w,[s("Link"),e(a)])])]),q]),x,n("ul",null,[n("li",null,[n("a",j,[s("\u81EA\u52D5\u7522\u751F"),e(a)])])]),T,n("ul",null,[n("li",null,[n("p",null,[n("a",C,[s("Link"),e(a)])])]),Q,F,n("li",null,[n("p",null,[s("Get data only when/where you need: \u53EA\u62FF\u4F60\u9700\u8981\u7528\u5230\u7684\u8CC7\u6599\uFF0C\u767C\u63EE GraphQL \u512A\u52E2-"),n("a",I,[s("declarative data fetching"),e(a)])])]),L,D,P]),A,n("ul",null,[n("li",null,[n("a",N,[s("Link"),e(a)])])]),G,n("ul",null,[n("li",null,[n("a",S,[s("Custom Cache id"),e(a)])])]),V,n("ul",null,[n("li",null,[s("query \u7372\u53D6 client only \u6B04\u4F4D\uFF0C\u8A73\u60C5\u53EF\u53C3\u8003 "),n("a",M,[s("Local Only Field"),e(a)])])]),R,n("ul",null,[n("li",null,[n("a",O,[s("Link"),e(a)])])]),U,n("blockquote",null,[n("p",null,[s("Apollo Client \u6703\u81EA\u52D5 queries \u6BCF\u500B\u7269\u4EF6\u7684 __typename, \u5373\u4F7F\u4F60\u6C92\u6709\u63D0\u4F9B\u5728 query \u8ACB\u6C42\u4E2D\uFF0C\u5207\u8A18 "),E,s("\uFF0C\u5982\u679C\u6709\u9700\u8981\u66F4\u65B0 cache\uFF0C\u8ACB\u53C3\u8003"),n("a",$,[s("Combining reads and writes"),e(a)])])]),B,n("ul",null,[n("li",null,[n("a",W,[s("Link"),e(a)]),s(" use "),z,s(", "),J,s(" to combine usage with "),H])]),K])}const sn=p(i,[["render",X],["__file","apollo-client.html.vue"]]);export{sn as default};
