import{_ as r,r as l,o as i,c as o,d as n,e as a,a as e,f as t}from"./app-da643460.js";const p={},c=t(`<h1 id="graphql-學習筆記-基礎篇" tabindex="-1"><a class="header-anchor" href="#graphql-學習筆記-基礎篇" aria-hidden="true">#</a> GraphQL 學習筆記 - 基礎篇</h1><h2 id="介紹" tabindex="-1"><a class="header-anchor" href="#介紹" aria-hidden="true">#</a> 介紹</h2><p>GraphQL 是一種為 API 設計的資料查詢(修改)的語言，使得 client 端可以使用更直覺且彈性的語法來取得或修改資料。 Facebook 為了因應跨裝置及開發 News Feed 功能而開發</p><h3 id="輪廓" tabindex="-1"><a class="header-anchor" href="#輪廓" aria-hidden="true">#</a> 輪廓</h3><p>流程由上到下</p><ul><li>Schema: Server 端撰寫的一個規範</li><li>Query: Client 端根據 Schema 規範撰寫的 query 請求</li><li>Server Response: Server 根據 query 請求返回給 Client 端資料</li></ul><h4 id="schema" tabindex="-1"><a class="header-anchor" href="#schema" aria-hidden="true">#</a> Schema</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type Query <span class="token punctuation">{</span>
  <span class="token literal-property property">hello</span><span class="token operator">:</span> String<span class="token operator">!</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="query" tabindex="-1"><a class="header-anchor" href="#query" aria-hidden="true">#</a> Query</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>query <span class="token punctuation">{</span>
  hello
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="server-response" tabindex="-1"><a class="header-anchor" href="#server-response" aria-hidden="true">#</a> Server Response</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;hello&quot;</span><span class="token operator">:</span> <span class="token string">&quot;world&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="優點" tabindex="-1"><a class="header-anchor" href="#優點" aria-hidden="true">#</a> 優點</h3><ul><li>精準資料取得</li><li>程式即文檔</li><li>前端控制權提升</li><li>強型別</li></ul><h3 id="缺點" tabindex="-1"><a class="header-anchor" href="#缺點" aria-hidden="true">#</a> 缺點</h3><ul><li>過於自由、規範少</li><li>學習成本</li><li>Server Side Caching 實作複雜</li></ul><h2 id="生態圈" tabindex="-1"><a class="header-anchor" href="#生態圈" aria-hidden="true">#</a> 生態圈</h2>`,17),d=n("code",null,"Javascript",-1),u={href:"https://graphql.org/code/#javascript",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"Apollo Server/Client",-1),h={href:"https://www.apollographql.com/docs/apollo-server/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.apollographql.com/docs/react/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://ithelp.ithome.com.tw/articles/10202144",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="基礎-query" tabindex="-1"><a class="header-anchor" href="#基礎-query" aria-hidden="true">#</a> 基礎 Query</h2><p><img src="https://i.imgur.com/jz0e8ea.png" alt=""></p><h3 id="object-vs-scalar" tabindex="-1"><a class="header-anchor" href="#object-vs-scalar" aria-hidden="true">#</a> Object vs Scalar</h3><p>在使用 query 時需要注意，type 分為 <code>Object Type</code>, <code>Scalar Type</code>，前者在 query 取得時必須展開，後者則不需要，例如下面範例中 <code>User</code> 就是一個 <code>Object Type</code>，而 <code>String</code> 則是 <code>Scalar Type</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type User <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token constant">ID</span><span class="token operator">!</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> String
<span class="token punctuation">}</span>

<span class="token string">&quot;Query 是最上層的&quot;</span>
type Query <span class="token punctuation">{</span>
  <span class="token literal-property property">hello</span><span class="token operator">:</span> String
  <span class="token literal-property property">me</span><span class="token operator">:</span> User
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在進行 query 時，必須要把 <code>Object Type</code> 明確展開</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>query <span class="token punctuation">{</span>
  hello
  me <span class="token punctuation">{</span>
    id
    name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><p>query 進行時，實際上是使用 HTTP <code>Post</code> method 把 query 請求轉為 header 字串送到 Server，Server 收到後會解析成 <code>AST</code> 格式，並且驗證欄位，只有 <code>解析</code>, <code>驗證</code> 都通過後才會正式進行 <code>執行</code></p><h2 id="apollo-server-基礎" tabindex="-1"><a class="header-anchor" href="#apollo-server-基礎" aria-hidden="true">#</a> Apollo Server 基礎</h2>`,10),g={href:"https://github.com/jwlearn1994/graphql-blog-demo",target:"_blank",rel:"noopener noreferrer"},y=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> ApolloServer<span class="token punctuation">,</span> gql <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;apollo-server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 1. GraphQL Schema 定義</span>
<span class="token keyword">const</span> typeDefs <span class="token operator">=</span> gql<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  type Query {
    &quot;A simple type for getting started!&quot;
    hello: String
  }
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

<span class="token comment">// 2. Resolvers 是一個會對照 Schema 中 field 的 function map ，讓你可以計算並回傳資料給 GraphQL Server</span>
<span class="token keyword">const</span> resolvers <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">Query</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 需注意名稱一定要對到 Schema 中 field 的名稱</span>
    <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;world&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 初始化 Web Server ，需傳入 typeDefs (Schema) 與 resolvers (Resolver)</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// Schema 部分</span>
  typeDefs<span class="token punctuation">,</span>
  <span class="token comment">// Resolver 部分</span>
  resolvers
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4. 啟動 Server</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> url <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">? Server ready at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,2),f={href:"https://ithelp.ithome.com.tw/articles/10202596",target:"_blank",rel:"noopener noreferrer"};function _(S,q){const s=l("ExternalLinkIcon");return i(),o("div",null,[c,n("p",null,[a("GraphQL 生態圈非常大，基本上你能想到的語言都支援，這邊主要以 "),d,a(" 來說明，可以參考"),n("a",u,[a("官網 Javascript 清單"),e(s)]),a("，除了原生的以外，最著名的大概就是 "),v,a("，主要是內部時做了很多知名 Nodejs Framework 的相容層，讓開發者能夠更快將 GraphQL 與原來熟悉的技術做結合使用")]),n("ul",null,[n("li",null,[n("a",h,[a("Apollo Server"),e(s)])]),n("li",null,[n("a",m,[a("Apollo Client"),e(s)])]),n("li",null,[n("a",k,[a("其他生態系統介紹"),e(s)])])]),b,n("p",null,[a("以下是 Apollo Server 最基本的建立方式，若想看看一個基礎 "),n("a",g,[a("GraphQL Blog 範例"),e(s)]),a("，可以點連結參考看看")]),y,n("ul",null,[n("li",null,[n("a",f,[a("2019 IT 邦幫忙 - Think in GraphQL"),e(s)])])])])}const x=r(p,[["render",_],["__file","basic.html.vue"]]);export{x as default};
