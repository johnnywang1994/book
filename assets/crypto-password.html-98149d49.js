import{_ as o,r as i,o as p,c,d as n,e as a,a as e,f as t}from"./app-7841ac8a.js";const r={},l=n("h1",{id:"crypto-密碼加密方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#crypto-密碼加密方法","aria-hidden":"true"},"#"),a(" Crypto 密碼加密方法")],-1),d={href:"https://cryptojs.gitbook.io/docs/",target:"_blank",rel:"noopener noreferrer"},u=t(`<p>前端在傳遞登入等帳號密碼資訊時，若直接將用戶的帳號密碼顯示在 header 中，會有很大的安全風險，這篇提供一個基礎的前端 Crypto 登入加密方法，實際開發上可根據情況進行更複雜的處理，雖然這個加密法也只是讓 Network 中較難直接獲取明碼資訊，但也是一個蠻重要的基礎安全優化步驟</p><h2 id="加密過程" tabindex="-1"><a class="header-anchor" href="#加密過程" aria-hidden="true">#</a> 加密過程</h2><ol><li>prelogin 由 server 提供 v1, v2</li></ol><p>前端請求 prelogin 帶著 id, account 給後端，後端根據 id, account 生成對應的 v1, v2 字串(產生過程就根據安全性要求進行)</p><h4 id="request" tabindex="-1"><a class="header-anchor" href="#request" aria-hidden="true">#</a> Request</h4><div class="language-json= line-numbers-mode" data-ext="json="><pre class="language-json="><code>{
    &quot;account&quot;: &quot;aaa&quot;
    &quot;format&quot;: &quot;json&quot;
    &quot;id&quot;: 1652864874683
    &quot;app_id&quot;: 10100
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="response" tabindex="-1"><a class="header-anchor" href="#response" aria-hidden="true">#</a> Response</h4><div class="language-json= line-numbers-mode" data-ext="json="><pre class="language-json="><code>{
    &quot;account&quot;: &quot;aaa&quot;
    &quot;id&quot;: &quot;1652864874683&quot;
    &quot;v1&quot;: &quot;UjKNzjDe&quot;
    &quot;v2&quot;: &quot;4nnizi8FVFAYs5w2&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>前端根據 v1, v2 加密</li></ol>`,9),v=n("code",null,"CryptoJS",-1),h={href:"https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86",target:"_blank",rel:"noopener noreferrer"},k={href:"https://zh.wikipedia.org/zh-tw/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},m=t(`<blockquote><p>注意，預設 CryptoJS 採用的是 CBC mode 加密，比起 ECB 相對較安全，本文僅為示範使用</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">encryptCryptoJS</span><span class="token punctuation">(</span><span class="token parameter">password<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> passwordMd5 <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">MD5</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> passwordKey <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">SHA256</span><span class="token punctuation">(</span>
        CryptoJS<span class="token punctuation">.</span><span class="token constant">SHA256</span><span class="token punctuation">(</span>passwordMd5 <span class="token operator">+</span> v1<span class="token punctuation">)</span> <span class="token operator">+</span> v2
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> encryptedPassword <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>
        passwordMd5<span class="token punctuation">,</span>
        passwordKey<span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">mode</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token constant">ECB</span><span class="token punctuation">,</span>
          <span class="token literal-property property">padding</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>pad<span class="token punctuation">.</span>NoPadding
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    encryptedPassword <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>
        encryptedPassword<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Hex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> encryptedPassword<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>login 傳遞帳號和加密後的密碼</li></ol><p>將前面 parse 出來的密碼放入真正的 login 請求，後端將根據相似步驟解析，這麼一來在我們的 Network 中就不會直接看到 password 了~</p><div class="language-json= line-numbers-mode" data-ext="json="><pre class="language-json="><code>{
    &quot;account&quot;: &quot;aaa&quot;
    &quot;password&quot;: &quot;29867ad1117073713a5c22c2e411d3fe&quot;
    &quot;redirect_uri&quot;: &quot;xxxxx&quot;
    &quot;format&quot;: &quot;json&quot;
    &quot;id&quot;: 1652864874798
    &quot;app_id&quot;: 10100
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="學習" tabindex="-1"><a class="header-anchor" href="#學習" aria-hidden="true">#</a> 學習</h2><h3 id="md5-訊息摘要演算法" tabindex="-1"><a class="header-anchor" href="#md5-訊息摘要演算法" aria-hidden="true">#</a> MD5 訊息摘要演算法</h3><p><code>MD5 Hex String</code>，本身就是一種演算法，能夠將不論多長的字串內容統一轉為 128bit(16bytes) 的 Hash 雜湊值，用於確保資訊傳輸完整一致</p><h4 id="優點" tabindex="-1"><a class="header-anchor" href="#優點" aria-hidden="true">#</a> 優點</h4><ul><li>方便使用</li><li>一定範圍情況下，可確保資料傳輸正確性</li></ul><h4 id="缺點" tabindex="-1"><a class="header-anchor" href="#缺點" aria-hidden="true">#</a> 缺點</h4><ul><li>因為多組字串有可能轉換為相同 MD5 Hash，存在碰撞攻擊疑慮，不適合用在安全性認證</li></ul><h3 id="aes-進階加密標準-對稱加密" tabindex="-1"><a class="header-anchor" href="#aes-進階加密標準-對稱加密" aria-hidden="true">#</a> AES 進階加密標準(對稱加密)</h3><p>用來替代舊的 DES 加密</p><h4 id="優點-1" tabindex="-1"><a class="header-anchor" href="#優點-1" aria-hidden="true">#</a> 優點</h4><ul><li>安全性高</li><li>美國政府認可的機密文件加密規範</li></ul><h4 id="缺點-1" tabindex="-1"><a class="header-anchor" href="#缺點-1" aria-hidden="true">#</a> 缺點</h4><ul><li>機率雖然非常低，但曾被破解的方式為 <code>Side-channel attack</code>，或是<code>中間人攻擊</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ openssl aes-256-cbc <span class="token parameter variable">-in</span> <span class="token operator">&lt;</span>input<span class="token operator">&gt;</span> <span class="token parameter variable">-out</span> <span class="token operator">&lt;</span>output<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sha2-secure-hash-algorithm-2" tabindex="-1"><a class="header-anchor" href="#sha2-secure-hash-algorithm-2" aria-hidden="true">#</a> SHA2 - Secure Hash Algorithm 2</h3><p>其下又可再分為六個不同的演算法標準，SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256</p>`,21);function b(q,g){const s=i("ExternalLinkIcon");return p(),c("div",null,[l,n("ul",null,[n("li",null,[n("a",d,[a("CryptoJS"),e(s)])])]),u,n("p",null,[a("前端根據 v1, v2 字串，以 "),v,a(" 加密，範例中先將原密碼轉為 Hash MD5，接者加入server 給的 v1, v2 字串，讓此次登入密碼變為唯一 secret，接著再用剛剛產生的 secret 以 "),n("a",h,[a("AES 對稱加密"),e(s)]),a(" 對 Hashed Md5 密碼加密，採用基本的"),n("a",k,[a("電子密碼本（ECB）模式"),e(s)]),a("，最後再從加密後的結果中 parse 出字串狀態")]),m])}const f=o(r,[["render",b],["__file","crypto-password.html.vue"]]);export{f as default};
