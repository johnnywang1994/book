import{_ as o,r as c,o as l,c as i,a,d as n,e as s,f as t}from"./app-f87c10f2.js";const r={},u=n("h1",{id:"原生-javascript-的類型標註工具-jsdoc",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原生-javascript-的類型標註工具-jsdoc","aria-hidden":"true"},"#"),s(" 原生 Javascript 的類型標註工具 JSDoc")],-1),d=n("h6",{id:"tags-js-jsdoc-typescript-type-check",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tags-js-jsdoc-typescript-type-check","aria-hidden":"true"},"#"),s(" tags: "),n("code",null,"JS"),s(),n("code",null,"JSDoc"),s(),n("code",null,"Typescript"),s(),n("code",null,"Type Check")],-1),k=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>我們知道 Javascript 本身作為一款弱型別的語言，對於變數、函數、類別等等的類型標註能力是十分薄弱的，也因此出現像 Typescript 這樣的超集來協助補全 Javascript 的弱點，然而究竟原生 Javascript 是不是除了用 Typescript 以外就沒其他辦法拯救了呢？</p><p>嘿嘿當然不是拉～，今天就要來介紹一款 JavaScript 的類型標註語言工具 - JSDoc！其實它的誕生時間在 1999 年，可說是非常資深的工具，目前是第三版</p><h2 id="安裝" tabindex="-1"><a class="header-anchor" href="#安裝" aria-hidden="true">#</a> 安裝</h2><p>現代 IDE 編輯器像是 Vscode 等等應該都內部支援他的 comment 標註語法了，使用上可直接書寫，但如果需要生成靜態文檔則必須安裝 jsdoc 的工具如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ npm install -g jsdoc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或是局部安裝</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ npm install --save-dev jsdoc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="基礎用法" tabindex="-1"><a class="header-anchor" href="#基礎用法" aria-hidden="true">#</a> 基礎用法</h2>`,9),m={href:"https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="變數類型" tabindex="-1"><a class="header-anchor" href="#變數類型" aria-hidden="true">#</a> 變數類型</h3><p>可以用 <code>@type</code> 來定義變數的類型，類型語法用 <code>{}</code> 包裹，裡面可以使用 <code>string</code>, <code>number</code>, <code>boolean</code>, <code>function</code>, <code>Object</code>, <code>Array</code> 等等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token constant">FOO</span> <span class="token operator">=</span> <span class="token number">1</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">function</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token operator">:</span> number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> number<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="function-函數" tabindex="-1"><a class="header-anchor" href="#function-函數" aria-hidden="true">#</a> Function 函數</h3><p>函數可以用前面的 <code>@type</code> 或是用下面這種較為詳細的寫法，甚至可以給予 <code>@example</code> 讓使用者能快速了解如何使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Sum two number
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> a: number a
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> b: number b
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> sum result
 * <span class="token keyword">@example</span> <span class="token example"><span class="token code language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="types-語法規則" tabindex="-1"><a class="header-anchor" href="#types-語法規則" aria-hidden="true">#</a> Types 語法規則</h3>`,7),b=n("code",null,"{}",-1),h={href:"https://jsdoc.app/tags-type.html",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">=</span><span class="token punctuation">}</span></span> <span class="token parameter">n</span> - optional
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token optional-parameter"><span class="token punctuation">[</span><span class="token parameter">n</span><span class="token punctuation">]</span></span> - optional
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">(</span>string<span class="token operator">|</span>number<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token parameter">n</span> - multi types
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">n</span> - any type
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">...</span>string<span class="token punctuation">}</span></span> <span class="token parameter">n</span> - repeatable args
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token optional-parameter"><span class="token punctuation">[</span><span class="token parameter">n</span><span class="token punctuation">=</span><span class="token code language-javascript"><span class="token string">&quot;hi&quot;</span></span><span class="token punctuation">]</span></span> - optional with default
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">n</span> - Array of strings
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span> n - Promise fulfilled by array of strings
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="類型定義" tabindex="-1"><a class="header-anchor" href="#類型定義" aria-hidden="true">#</a> 類型定義</h3><p>有時候我們可能需要重複使用類似形態的資料結構類型，此時就可以用 <code>@typedef</code> 進行定義，類似於 Typescript 裡的 <code>interface</code>, <code>type</code> 的用法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@typedef</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token class-name">ApiResponse</span>
 * <span class="token keyword">@property</span> <span class="token class-name"><span class="token punctuation">{</span>object<span class="token punctuation">}</span></span> <span class="token parameter">data</span> - data of api
 * <span class="token keyword">@property</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">status</span> - status of api
 */</span>

<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>ApiResponse<span class="token punctuation">}</span></span> */</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果嫌棄上面這種冗長的 <code>@property</code> 寫法，jsdoc 也提供簡便的快速定義簡寫，效果是一樣的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@typedef</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span> data<span class="token operator">:</span> object<span class="token punctuation">,</span> status<span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token class-name">ApiResponse</span>
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若需要下面這樣 ts 定義動態索引</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ts</span>
<span class="token keyword">interface</span> <span class="token class-name">MyType</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相當於下面這樣（懶得記語法也可以用後面提到的引入 dts 解決）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// jsDoc</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@typedef</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token punctuation">&lt;</span>string<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token class-name">MyType</span>
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函數也是可以</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@typedef</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">(</span>s<span class="token operator">:</span> string<span class="token punctuation">,</span> b<span class="token operator">:</span> boolean<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number<span class="token punctuation">}</span></span> <span class="token class-name">MyFunc</span>
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="進階用法" tabindex="-1"><a class="header-anchor" href="#進階用法" aria-hidden="true">#</a> 進階用法</h2><h3 id="搭配-dts-使用" tabindex="-1"><a class="header-anchor" href="#搭配-dts-使用" aria-hidden="true">#</a> 搭配 dts 使用</h3><p>如果要在 jsDoc 中提示類型錯誤的話，可以在 <code>tsconfig.json</code> 中開啟兩個選項，這樣我們在 js 檔案中的 jsDoc 文件也會提示類型錯誤了</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;allowJS&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允許編譯 JS</span>
    <span class="token property">&quot;checkJS&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 編譯 JS 同時做類型檢查</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;src/**/*.ts&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;src/**/*.js&quot;</span> <span class="token comment">// include JS 檔案讓 tsc 編譯</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下來，如果我們需要從某一個 dts 文件中引入類型的話也可以使用 <code>import</code> 的方式把指定類型引入</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// api.d.ts</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ApiResponse</span> <span class="token punctuation">{</span>
  msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 全部引入</span>
<span class="token doc-comment comment">/** <span class="token keyword">@typedef</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> */</span>

<span class="token comment">// 指定引入使用</span>
<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ApiResponse<span class="token punctuation">}</span></span> */</span>
<span class="token keyword">const</span> apiResponse <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="導出-declaration-檔案" tabindex="-1"><a class="header-anchor" href="#導出-declaration-檔案" aria-hidden="true">#</a> 導出 declaration 檔案</h3><p>透過 tsc 編譯同樣能把 jsDoc 定義的類型輸出成 dts 類型檔案</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>執行編譯後同樣能產出對應的 dts 檔案，jsDoc 搭配 dts 的優點是，在編譯後檔案原始碼跟原本寫的基本一致</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx tsc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h3><p>jsDoc 甚至支持像 ts 中常用的泛型機制，透過 <code>@template</code> 聲明，寫法如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@template</span> <span class="token class-name">T</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>T<span class="token punctuation">}</span></span> <span class="token parameter">x</span> 參數 x
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">iAmSoShock</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或是更複雜的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@template</span> <span class="token class-name">P</span>
 * <span class="token keyword">@typedef</span> <span class="token class-name"><span class="token punctuation">{</span>P <span class="token keyword">extends</span> Promise<span class="token punctuation">&lt;</span><span class="token keyword">infer</span> T<span class="token punctuation">&gt;</span> <span class="token operator">?</span> T <span class="token operator">:</span> never<span class="token punctuation">}</span></span> <span class="token class-name">ValueOfPromise</span>
 */</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>ValueOfPromise<span class="token punctuation">&lt;</span>Promise<span class="token punctuation">&lt;</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">let</span> hello<span class="token punctuation">;</span> <span class="token comment">// hello: &#39;hello&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>雖然 jsDoc 是可以做到複雜類型，不過建議這種複雜的東西直接透過 <code>@type {import(&#39;xxx&#39;).xxx}</code> 的方式引入會比較方便管理跟閱讀...</p><h3 id="class-支援" tabindex="-1"><a class="header-anchor" href="#class-支援" aria-hidden="true">#</a> class 支援</h3><p>jsDoc 也支持在 class 中使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@template</span> <span class="token class-name">T</span>
 * <span class="token keyword">@extends</span> <span class="token class-name"><span class="token punctuation">{</span>Set<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">NameSet</span> <span class="token keyword">extends</span> <span class="token class-name">Set</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
   */</span>
  name<span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">name</span>
   * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">value</span>
   */</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
   */</span>
  <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="enum-類型" tabindex="-1"><a class="header-anchor" href="#enum-類型" aria-hidden="true">#</a> enum 類型</h3><p>enum 其實就是一個 object~，使用上很方便</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** <span class="token keyword">@enum</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> */</span>
<span class="token keyword">const</span> JSDocState <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">BeginningOfLine</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">SawAsterisk</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">SavingComments</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

JSDocState<span class="token punctuation">.</span>SawAsterisk<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但需要注意的是，比起 ts 裡的 enum，jsDoc 裡的 enum 可以是 any 類型，比如 enum函數</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/** <span class="token keyword">@enum</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number<span class="token punctuation">}</span></span> */</span>
<span class="token keyword">const</span> MathFuncs <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">add1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function-variable function">id</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">-</span>n<span class="token punctuation">,</span>
  <span class="token function-variable function">sub1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

MathFuncs<span class="token punctuation">.</span>add1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成文檔" tabindex="-1"><a class="header-anchor" href="#生成文檔" aria-hidden="true">#</a> 生成文檔</h2><p>全局安裝的話只需要，預設會在資料夾下產出一包 <code>out</code>，裡面就是文檔的 html 文件了～</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ jsdoc my-file.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想要切換輸出位置也可以</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ jsdoc my-file.js -d docs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="結論" tabindex="-1"><a class="header-anchor" href="#結論" aria-hidden="true">#</a> 結論</h2><p>總結 jsDoc 其實在不需要 ts 的情境下，也能很好地做到標註，並定義變數、函數、class、泛型等等，也可以引入使用 dts 用 ts 定義更為複雜的類型，不過比起 ts，jsDoc 會讓你的 js 裡多一大坨註解，可能會有些人不是很愛</p><p>所以老實說，如果短時間內無法馬上搭建 Typescript Compiler，或是還在學習中，但又想要試試看類型開發帶來的好處，可以先試試 Jsdoc 我認為也是一個很棒的選擇，用在一些小文檔、舊專案、小專案上非常適合，可以省去搭建編譯器的時間與手續，如果要開發大型應用產品的話，個人還是建議直接使用 Typescript 會比較保險，畢竟編譯器的優勢對於產品來說是比較有保障的</p><p>以上就是這次分享的內容拉～希望大家喜歡摟，喜歡的話別忘記幫我分享啊！！感謝大家</p>`,47),y=n("h2",{id:"參考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#參考","aria-hidden":"true"},"#"),s(" 參考")],-1),j={href:"https://jsdoc.app/index.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.logrocket.com/typescript-vs-jsdoc-javascript/",target:"_blank",rel:"noopener noreferrer"};function x(w,_){const p=c("SocialBlock"),e=c("ExternalLinkIcon");return l(),i("div",null,[u,d,a(p,{hashtags:"javascript,jsdoc,typescript"}),k,n("p",null,[s("詳細"),n("a",m,[s("JSDoc文件連結"),a(e)]),s("先放在這～")]),v,n("p",null,[b,s("中的一些常用語法規則，詳細用法可"),n("a",h,[s("參考這裡"),a(e)])]),g,a(p,{hashtags:"javascript,jsdoc,typescript"}),y,n("ul",null,[n("li",null,[n("a",j,[s("Jsdoc官方文檔"),a(e)])]),n("li",null,[n("a",f,[s("Typescript vs JSDoc for static type checking"),a(e)])])])])}const T=o(r,[["render",x],["__file","jsdoc.html.vue"]]);export{T as default};
