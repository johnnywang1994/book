import{_ as e,c as t,b as s,a as p,e as l,o as c,r as o}from"./app-Ba7lTalA.js";const i={};function u(r,n){const a=o("SocialBlock");return c(),t("div",null,[n[0]||(n[0]=s("h1",{id:"typescript-基礎篇",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#typescript-基礎篇"},[s("span",null,"TypeScript 基礎篇")])],-1)),p(a,{hashtags:"typescript,basic"}),n[1]||(n[1]=l(`<p>此篇文章為看完阮一封前輩的教學後隨手筆記，供日後快速複習使用。</p><h2 id="原始類型" tabindex="-1"><a class="header-anchor" href="#原始類型"><span>原始類型</span></a></h2><p><code>string</code>, <code>number</code>, <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>Symbol</code></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 已知</span></span>
<span class="line"><span class="token keyword">const</span> str <span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 未知預期</span></span>
<span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 已知預期</span></span>
<span class="line">num <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 返回數字的函數</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">30</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 無返回值函數</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="任意值-any" tabindex="-1"><a class="header-anchor" href="#任意值-any"><span>任意值 any</span></a></h2><p>普通類型的變數，不能在運算中改變類型</p><ol><li>一個 any，可以對他做任何操作，返回的內容都是任意值</li><li>當變量未被明確指定類型值且宣告時沒有值時，預設是 any</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> someText <span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment">// 若此設 number 將報錯</span></span>
<span class="line">someText <span class="token operator">=</span> <span class="token string">&#39;someText&#39;</span><span class="token punctuation">;</span> <span class="token comment">// error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="類型推論" tabindex="-1"><a class="header-anchor" href="#類型推論"><span>類型推論</span></a></h2><p>當沒有明確指定類型，會自動依照此規則推斷出一個類型</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> typeS <span class="token operator">=</span> <span class="token string">&#39;seven&#39;</span><span class="token punctuation">;</span></span>
<span class="line">typeS <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 這邊因初始有給值為 string，自動推斷為 string 類型</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> typeA<span class="token punctuation">;</span></span>
<span class="line">typeA <span class="token operator">=</span> <span class="token string">&#39;six&#39;</span><span class="token punctuation">;</span></span>
<span class="line">typeA <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment">// 這邊初始沒有值，推斷為 any</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="聯合類型" tabindex="-1"><a class="header-anchor" href="#聯合類型"><span>聯合類型</span></a></h2><p>表示取值可為多種類型中的一種，使用 <code>|</code> 分隔多個類型</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">let</span> unionC<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token string">&#39;Ray&#39;</span><span class="token punctuation">;</span></span>
<span class="line">unionC <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>something<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> something<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 只能訪問聯合類型所共有的屬性 error</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="對象的類型-接口-interface" tabindex="-1"><a class="header-anchor" href="#對象的類型-接口-interface"><span>對象的類型 - 接口(Interface)</span></a></h2><p>常用於對對象 形狀(Shape) 的描述</p><ol><li>接口一般首字大寫</li><li>在屬性名後加上 <code>?</code> 配置「可選」屬性，加強對象類型的彈性</li><li>可允許任意屬性，但其他屬性必須是該任意屬性類型的子類型</li><li>屬性名前加上 <code>readonly</code> 標記「只讀」屬性</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// 此 age 為可選屬性</span></span>
<span class="line">  <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// 此 prop 為任意屬性字串，並接受任意類型</span></span>
<span class="line">  <span class="token comment">// [prop: string]: string; // 因任意屬性為字串類型值，上方 age 將不可為 number</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token number">3387</span><span class="token punctuation">,</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// age: 30,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 此約束了 Tom 必須與 Person 保持形狀一致。（多或少都不行）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 無法在初始化後修改只讀屬性 error</span></span>
<span class="line">tom<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">4069</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以定義函數的 interface 或是子屬性為函數</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">MyFunction</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">MyObject</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">jump</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="陣列的類型" tabindex="-1"><a class="header-anchor" href="#陣列的類型"><span>陣列的類型</span></a></h2><p>有多種定義方式</p><ol><li>類型 + 中括號</li><li>陣列泛型 (Array)</li><li>interface 描述</li><li>類數組（IArguments, NodeList, HTMLCollection, Element...）</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 1.</span></span>
<span class="line"><span class="token keyword">const</span> myArr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">myArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相關方法也會自動檢查 error</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2.</span></span>
<span class="line"><span class="token keyword">const</span> myArr2<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">myArr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">;</span> <span class="token comment">// error</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3.</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">NumberArray</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> myArr3<span class="token operator">:</span> NumberArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. 內建類數組接口</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> args<span class="token operator">:</span> IArguments <span class="token operator">=</span> arguments<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>關於其他內建物件<a href="https://willh.gitbook.io/typescript-tutorial/basics/built-in-objects" target="_blank" rel="noopener noreferrer">可查看這</a>。</p><h2 id="函數的類型" tabindex="-1"><a class="header-anchor" href="#函數的類型"><span>函數的類型</span></a></h2><p>分為聲明式、表達式，函數具有輸入與輸出，需把兩者都考慮到</p><ol><li>聲明式</li><li>表達式 - 必須將左側變數也加上定義，注意！不要混淆了 TS 的 =&gt; 跟 ES6 的 =&gt; - 因容易混淆，盡量少用</li><li>接口定義</li><li>使用 ? 標記「可選」參數，其後不能有其他必選參數</li><li>參數默認值 =&gt; 具默認值得參數會自動變為「可選」</li><li>rest 參數可用 any[] 陣列類型定義</li><li>重載：允許函數接受不同數量類型的參數時，做出不同的處理</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 1.</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sumFn</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sumFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span></span>
<span class="line"><span class="token function">sumFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2.</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">sumFnEx</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3.</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Isum</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> mySum<span class="token operator">:</span> <span class="token function-variable function">Isum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. &amp; 5.</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span></span>
<span class="line">  firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  lastName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">30</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, now age </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">&#39;johnny&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 6.</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>items<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 7.</span></span>
<span class="line"><span class="token comment">// 必須定義數字進數字出，使用重載先行精確定義函數，最後進行函數邏輯實現</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="類型斷言-type-assertion" tabindex="-1"><a class="header-anchor" href="#類型斷言-type-assertion"><span>類型斷言 - Type Assertion</span></a></h2><p>用以手動指定一值的類型，因在 react 的 tsx(jsx 的 ts 版本)，使用的是以 &quot;值 as 類型&quot; 的方式區隔，故建議都使用這種方式避免混淆</p><ol><li>使用聯合類型時，有時必須在還不確定類型時訪問特定類型屬性 - 使用時必須小心，避免在斷言後直接調用屬性，因編譯時會通過，但運行時會掛</li><li>父類別繼承關係斷言</li><li>&quot;XXX as any&quot; 是解決 TS 類型問題的<code>最後手段，非必要盡量少用</code></li><li><code>斷言補強</code>（對於返回 any 類型的舊代碼，可以在調用返回後明確斷言他的類型）</li><li>類型斷言<code>只會在編譯時有效</code>，對實際編譯後的代碼不具任何影響</li><li>類型聲明比類型斷言更加嚴格，<code>盡量都先使用聲明式</code></li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 1.</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Cat <span class="token operator">|</span> Fish<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 此時因 Cat 不具有 swim 屬性會報錯</span></span>
<span class="line">  <span class="token comment">// if (typeof animal.swim === &#39;function&#39;) {</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span>swim <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Is a fish&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2.</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ApiError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">  code<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">HttpError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">  statusCode<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isApiError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>error <span class="token keyword">as</span> ApiError<span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3.</span></span>
<span class="line"><span class="token comment">// 對 any 類型訪問任何屬性都是合法的，但這是最終手段</span></span>
<span class="line">window<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// error</span></span>
<span class="line"><span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4.</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getCache</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 類型斷言</span></span>
<span class="line"><span class="token keyword">const</span> tomCat <span class="token operator">=</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Cat<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 類型聲明(較為嚴格)</span></span>
<span class="line"><span class="token comment">// const tomCat: Cat = getCache(&#39;tom&#39;);</span></span>
<span class="line">tomCat<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="滿足類型-satisfies" tabindex="-1"><a class="header-anchor" href="#滿足類型-satisfies"><span>滿足類型 - Satisfies</span></a></h2><p>用以手動指定一值滿足的類型，使用方式為 &quot;值 satisfies 類型&quot;，與前面 <code>as</code> 類型斷言不同，<code>as</code> 有強制的意思且會造成編譯器錯誤判讀內容，<code>satisfies</code> 則更彈性，以下為兩者簡單比較:</p><table><thead><tr><th></th><th>as</th><th>satisfies</th></tr></thead><tbody><tr><td>類型判斷</td><td>手動</td><td>自動</td></tr><tr><td>檢查強度</td><td>強制</td><td>靈活</td></tr><tr><td>編譯誤判</td><td>高</td><td>低</td></tr></tbody></table><p>接下來是簡單的範例，先提供背景類型</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Colors</span> <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;green&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">RGB</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span>red<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> green<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> blue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>類型判斷 通常在使用聯合類型時，值不確定是某一個類型，因此必須手動判斷，否則會報錯，如下範例，即使你確定 green 就是 <code>string</code>，仍然需要手動去檢查，非常麻煩</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 變量類型標註</span></span>
<span class="line"><span class="token keyword">const</span> palette<span class="token operator">:</span> Record<span class="token operator">&lt;</span>Colors<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token constant">RGB</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  red<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  green<span class="token operator">:</span> <span class="token string">&#39;#00ff00&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  blue<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Property &#39;toUpperCase&#39; does not exist on type &#39;string | RGB&#39;</span></span>
<span class="line">palette<span class="token punctuation">.</span>green<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 手動檢查，解決</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> palette<span class="token punctuation">.</span>green <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  palette<span class="token punctuation">.</span>green<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>as const</code> 可以解決這問題，但同時會造成其他問題，因為 as const 會將值變為 readonly，且 as const 只會推論類型為其值本身，而非寬域吻合</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// as const</span></span>
<span class="line"><span class="token keyword">const</span> palette <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  red<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  green<span class="token operator">:</span> <span class="token string">&#39;#00ff00&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  blue<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 解決</span></span>
<span class="line">palette<span class="token punctuation">.</span>green<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Cannot assign to &#39;green&#39; because it is a read-only property.</span></span>
<span class="line">palette<span class="token punctuation">.</span>green <span class="token operator">=</span> <span class="token string">&#39;#dddddd&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>satisfies</code> 則完美解決上述問題，在維持類型推論正確的情況下，給予最大的靈活彈性</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// satisfies</span></span>
<span class="line"><span class="token keyword">const</span> palette <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  red<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  green<span class="token operator">:</span> <span class="token string">&#39;#00ff00&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  blue<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> satisfies Record<span class="token operator">&lt;</span>Colors<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token constant">RGB</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">palette<span class="token punctuation">.</span>green<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>編譯誤判</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> palette<span class="token operator">:</span> Record<span class="token operator">&lt;</span>Colors<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token constant">RGB</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  red<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  green<span class="token operator">:</span> <span class="token string">&#39;#00ff00&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  blue<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 實際值為 string，此處仍通過編譯，無錯誤</span></span>
<span class="line"><span class="token punctuation">(</span>palette<span class="token punctuation">.</span>green <span class="token keyword">as</span> <span class="token constant">RGB</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>總結 satisfies 有以下幾個好處</p><ul><li>保證值的類型正確性</li><li>使用時，正確推論出值的類型，即使是聯合類型</li><li>以值本身為優先，而非類型</li></ul><h3 id="搭配-as-const-宣告值唯讀" tabindex="-1"><a class="header-anchor" href="#搭配-as-const-宣告值唯讀"><span>搭配 as const，宣告值唯讀</span></a></h3><p>類型標註與 as const 搭配時，as const 會被類型標注覆蓋導致失去作用</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span></span>
<span class="line">	retCode<span class="token operator">:</span> <span class="token number">200</span> <span class="token operator">|</span> <span class="token number">404</span> <span class="token operator">|</span> <span class="token number">500</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> responseTableData<span class="token operator">:</span> Result <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">	retCode<span class="token operator">:</span> <span class="token number">200</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 被類型標注覆蓋無作用，不會顯示唯讀錯誤</span></span>
<span class="line">responseTableData<span class="token punctuation">.</span>retCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一定要使用類型標注處理唯讀，可以用 <code>Readonly</code>，或是用這邊的 <code>satisfies</code> 處理</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> responseTableData<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Result<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">	retCode<span class="token operator">:</span> <span class="token number">200</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// or</span></span>
<span class="line"><span class="token keyword">const</span> responseTableData <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">	retCode<span class="token operator">:</span> <span class="token number">200</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span> satisfies Result<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Cannot assign to &#39;retCode&#39; because it is a read-only property.</span></span>
<span class="line">responseTableData<span class="token punctuation">.</span>retCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他常見使用範例" tabindex="-1"><a class="header-anchor" href="#其他常見使用範例"><span>其他常見使用範例</span></a></h3><ul><li>臨時且方便的類型推斷</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token string">&#39;Johnny&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    company<span class="token operator">:</span> <span class="token string">&#39;line&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    mail<span class="token operator">:</span> <span class="token string">&#39;johnny@test.com&#39;</span></span>
<span class="line"><span class="token punctuation">}</span> satisfies Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">student<span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>特殊類型檢查唯讀</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">RouteRow</span> <span class="token punctuation">{</span></span>
<span class="line">	path<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">	component<span class="token operator">:</span> <span class="token builtin">any</span></span>
<span class="line">  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  redirect<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">	<span class="token punctuation">{</span></span>
<span class="line">		path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span></span>
<span class="line">		component<span class="token operator">:</span> <span class="token string">&#39;main&#39;</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">{</span></span>
<span class="line">		path<span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span></span>
<span class="line">		component<span class="token operator">:</span> <span class="token string">&#39;login&#39;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span> satisfies RouteRow<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配合 never 進行檢查</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ButtonTypes</span> <span class="token operator">=</span> <span class="token string">&#39;primary&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getButtonStyle</span><span class="token punctuation">(</span>t<span class="token operator">:</span> ButtonTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&quot;primary&quot;</span><span class="token operator">:</span></span>
<span class="line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token comment">// case &quot;error&quot;:</span></span>
<span class="line">    <span class="token comment">//   console.log(123);</span></span>
<span class="line">    <span class="token comment">//   break;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Type &#39;string&#39; does not satisfy the expected type &#39;never&#39;</span></span>
<span class="line">      t satisfies <span class="token builtin">never</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,60)),p(a,{hashtags:"typescript,basic"})])}const d=e(i,[["render",u],["__file","ts-basic.html.vue"]]),m=JSON.parse('{"path":"/articles/js/ts-basic.html","title":"TypeScript 基礎篇","lang":"zh-TW","frontmatter":{},"headers":[{"level":2,"title":"原始類型","slug":"原始類型","link":"#原始類型","children":[]},{"level":2,"title":"任意值 any","slug":"任意值-any","link":"#任意值-any","children":[]},{"level":2,"title":"類型推論","slug":"類型推論","link":"#類型推論","children":[]},{"level":2,"title":"聯合類型","slug":"聯合類型","link":"#聯合類型","children":[]},{"level":2,"title":"對象的類型 - 接口(Interface)","slug":"對象的類型-接口-interface","link":"#對象的類型-接口-interface","children":[]},{"level":2,"title":"陣列的類型","slug":"陣列的類型","link":"#陣列的類型","children":[]},{"level":2,"title":"函數的類型","slug":"函數的類型","link":"#函數的類型","children":[]},{"level":2,"title":"類型斷言 - Type Assertion","slug":"類型斷言-type-assertion","link":"#類型斷言-type-assertion","children":[]},{"level":2,"title":"滿足類型 - Satisfies","slug":"滿足類型-satisfies","link":"#滿足類型-satisfies","children":[{"level":3,"title":"搭配 as const，宣告值唯讀","slug":"搭配-as-const-宣告值唯讀","link":"#搭配-as-const-宣告值唯讀","children":[]},{"level":3,"title":"其他常見使用範例","slug":"其他常見使用範例","link":"#其他常見使用範例","children":[]}]}],"git":{"updatedTime":1710772220000,"contributors":[{"name":"Johnny Wang","username":"Johnny Wang","email":"wangj@garena.com","commits":2,"url":"https://github.com/Johnny Wang"},{"name":"johnnywang1994","username":"johnnywang1994","email":"johnny29621189@kimo.com","commits":2,"url":"https://github.com/johnnywang1994"},{"name":"johnnywang","username":"johnnywang","email":"johnnywang@test.com","commits":1,"url":"https://github.com/johnnywang"}]},"filePathRelative":"articles/js/ts-basic.md"}');export{d as comp,m as data};
